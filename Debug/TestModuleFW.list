
TestModuleFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  08012f60  08012f60  00022f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138f0  080138f0  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  080138f0  080138f0  000238f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138f8  080138f8  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138f8  080138f8  000238f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138fc  080138fc  000238fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08013900  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000126c  200001d4  08013ad4  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  08013ad4  00031440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198ec  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003651  00000000  00000000  00049b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0004d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114a  00000000  00000000  0004e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c4f  00000000  00000000  0004f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b12c  00000000  00000000  00070539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc894  00000000  00000000  0008b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007208  00000000  00000000  00157efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0015f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012f48 	.word	0x08012f48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08012f48 	.word	0x08012f48

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <Set_A1_PWM>:
#define SET_B3_PWM(x)    TIM3->CCR3 = x

#define SET_B_PWM(x)     TIM3->CCR1 = x; TIM3->CCR2 = x; TIM3->CCR3 = x;

 void Set_A1_PWM (uint8_t val)
 {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	SET_A1_PWM(val);
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <Set_A1_PWM+0x1c>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	6353      	str	r3, [r2, #52]	; 0x34
	//On_A1 ();
 }
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40012c00 	.word	0x40012c00

08001060 <Set_A2_PWM>:

 void Set_A2_PWM (uint8_t val)
 {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	 SET_A2_PWM(val);
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <Set_A2_PWM+0x1c>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	6393      	str	r3, [r2, #56]	; 0x38
	 //On_A2 ();
 }
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40012c00 	.word	0x40012c00

08001080 <Set_A3_PWM>:


void Set_A3_PWM (uint8_t val)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	SET_A3_PWM(val);
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <Set_A3_PWM+0x1c>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	63d3      	str	r3, [r2, #60]	; 0x3c
	//On_A3 ();
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40012c00 	.word	0x40012c00

080010a0 <Set_B1_PWM>:

void Set_B1_PWM (uint8_t val)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	SET_B1_PWM(val);
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <Set_B1_PWM+0x1c>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	6353      	str	r3, [r2, #52]	; 0x34
	//On_B1 ();
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40000400 	.word	0x40000400

080010c0 <Set_B2_PWM>:

void Set_B2_PWM (uint8_t val)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	SET_B2_PWM(val);
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <Set_B2_PWM+0x1c>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
	//On_B2 ();
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40000400 	.word	0x40000400

080010e0 <Set_B3_PWM>:

void Set_B3_PWM (uint8_t val)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	SET_B3_PWM(val);
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <Set_B3_PWM+0x1c>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	63d3      	str	r3, [r2, #60]	; 0x3c
	//On_B3 ();
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40000400 	.word	0x40000400

08001100 <On_A1>:

void On_A1 (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001104:	2100      	movs	r1, #0
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <On_A1+0x10>)
 8001108:	f009 ff06 	bl	800af18 <HAL_TIM_PWM_Start>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200006cc 	.word	0x200006cc

08001114 <On_A2>:


void On_A2 (void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001118:	2104      	movs	r1, #4
 800111a:	4802      	ldr	r0, [pc, #8]	; (8001124 <On_A2+0x10>)
 800111c:	f009 fefc 	bl	800af18 <HAL_TIM_PWM_Start>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200006cc 	.word	0x200006cc

08001128 <On_A3>:

void On_A3 (void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800112c:	2108      	movs	r1, #8
 800112e:	4802      	ldr	r0, [pc, #8]	; (8001138 <On_A3+0x10>)
 8001130:	f009 fef2 	bl	800af18 <HAL_TIM_PWM_Start>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200006cc 	.word	0x200006cc

0800113c <On_B1>:

void On_B1 (void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001140:	2100      	movs	r1, #0
 8001142:	4802      	ldr	r0, [pc, #8]	; (800114c <On_B1+0x10>)
 8001144:	f009 fee8 	bl	800af18 <HAL_TIM_PWM_Start>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000718 	.word	0x20000718

08001150 <On_B2>:

void On_B2 (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001154:	2104      	movs	r1, #4
 8001156:	4802      	ldr	r0, [pc, #8]	; (8001160 <On_B2+0x10>)
 8001158:	f009 fede 	bl	800af18 <HAL_TIM_PWM_Start>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000718 	.word	0x20000718

08001164 <On_B3>:

void On_B3 (void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001168:	2108      	movs	r1, #8
 800116a:	4802      	ldr	r0, [pc, #8]	; (8001174 <On_B3+0x10>)
 800116c:	f009 fed4 	bl	800af18 <HAL_TIM_PWM_Start>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000718 	.word	0x20000718

08001178 <Off_A1>:

void Off_A1 (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800117c:	2100      	movs	r1, #0
 800117e:	4802      	ldr	r0, [pc, #8]	; (8001188 <Off_A1+0x10>)
 8001180:	f009 ffca 	bl	800b118 <HAL_TIM_PWM_Stop>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200006cc 	.word	0x200006cc

0800118c <Off_A2>:

void Off_A2 (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001190:	2104      	movs	r1, #4
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <Off_A2+0x10>)
 8001194:	f009 ffc0 	bl	800b118 <HAL_TIM_PWM_Stop>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200006cc 	.word	0x200006cc

080011a0 <Off_A3>:

void Off_A3 (void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80011a4:	2108      	movs	r1, #8
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <Off_A3+0x10>)
 80011a8:	f009 ffb6 	bl	800b118 <HAL_TIM_PWM_Stop>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200006cc 	.word	0x200006cc

080011b4 <Off_B1>:

void Off_B1 (void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4802      	ldr	r0, [pc, #8]	; (80011c4 <Off_B1+0x10>)
 80011bc:	f009 ffac 	bl	800b118 <HAL_TIM_PWM_Stop>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000718 	.word	0x20000718

080011c8 <Off_B2>:

void Off_B2 (void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80011cc:	2104      	movs	r1, #4
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <Off_B2+0x10>)
 80011d0:	f009 ffa2 	bl	800b118 <HAL_TIM_PWM_Stop>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000718 	.word	0x20000718

080011dc <Off_B3>:

void Off_B3 (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80011e0:	2108      	movs	r1, #8
 80011e2:	4802      	ldr	r0, [pc, #8]	; (80011ec <Off_B3+0x10>)
 80011e4:	f009 ff98 	bl	800b118 <HAL_TIM_PWM_Stop>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000718 	.word	0x20000718

080011f0 <Dis_M1>:

void Dis_M1 (void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f008 fded 	bl	8009ddc <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <Dis_M2>:

void Dis_M2 (void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, M2_DIS_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f008 fde2 	bl	8009ddc <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <En_M1>:

void En_M1 (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f008 fdd7 	bl	8009ddc <HAL_GPIO_WritePin>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}

08001232 <En_M2>:

void En_M2 (void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, M2_DIS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f008 fdcc 	bl	8009ddc <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <_DoInit+0x8c>)
 8001250:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2203      	movs	r2, #3
 800125c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <_DoInit+0x90>)
 8001262:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <_DoInit+0x94>)
 8001268:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001270:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_DoInit+0x90>)
 8001288:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_DoInit+0x98>)
 800128e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2210      	movs	r2, #16
 8001294:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3307      	adds	r3, #7
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <_DoInit+0x9c>)
 80012ae:	6810      	ldr	r0, [r2, #0]
 80012b0:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <_DoInit+0xa0>)
 80012b6:	6810      	ldr	r0, [r2, #0]
 80012b8:	6018      	str	r0, [r3, #0]
 80012ba:	8891      	ldrh	r1, [r2, #4]
 80012bc:	7992      	ldrb	r2, [r2, #6]
 80012be:	8099      	strh	r1, [r3, #4]
 80012c0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2220      	movs	r2, #32
 80012c6:	719a      	strb	r2, [r3, #6]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	200001f0 	.word	0x200001f0
 80012d8:	08012f60 	.word	0x08012f60
 80012dc:	20000298 	.word	0x20000298
 80012e0:	20000698 	.word	0x20000698
 80012e4:	08012f6c 	.word	0x08012f6c
 80012e8:	08012f70 	.word	0x08012f70

080012ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	d905      	bls.n	800131c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	3b01      	subs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e007      	b.n	800132c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	6939      	ldr	r1, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	1acb      	subs	r3, r1, r3
 8001326:	4413      	add	r3, r2
 8001328:	3b01      	subs	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	4293      	cmp	r3, r2
 8001338:	bf28      	it	cs
 800133a:	4613      	movcs	r3, r2
 800133c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4293      	cmp	r3, r2
 8001344:	bf28      	it	cs
 8001346:	4613      	movcs	r3, r2
 8001348:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	4618      	mov	r0, r3
 8001358:	f00e fac1 	bl	800f8de <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	4413      	add	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	429a      	cmp	r2, r3
 8001384:	d101      	bne.n	800138a <_WriteBlocking+0x9e>
      WrOff = 0u;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1b5      	bne.n	8001302 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8001396:	69bb      	ldr	r3, [r7, #24]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d90e      	bls.n	80013e2 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00e fa84 	bl	800f8de <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	441a      	add	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80013e0:	e01a      	b.n	8001418 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00e fa73 	bl	800f8de <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6858      	ldr	r0, [r3, #4]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4413      	add	r3, r2
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4619      	mov	r1, r3
 800140e:	f00e fa66 	bl	800f8de <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	60da      	str	r2, [r3, #12]
}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d808      	bhi.n	800144e <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad2      	subs	r2, r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4413      	add	r3, r2
 8001448:	3b01      	subs	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e004      	b.n	8001458 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001458:	697b      	ldr	r3, [r7, #20]
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <SEGGER_RTT_WriteNoLock+0x9c>)
 8001486:	4413      	add	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d029      	beq.n	80014e6 <SEGGER_RTT_WriteNoLock+0x7e>
 8001492:	2b02      	cmp	r3, #2
 8001494:	d82e      	bhi.n	80014f4 <SEGGER_RTT_WriteNoLock+0x8c>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <SEGGER_RTT_WriteNoLock+0x38>
 800149a:	2b01      	cmp	r3, #1
 800149c:	d013      	beq.n	80014c6 <SEGGER_RTT_WriteNoLock+0x5e>
 800149e:	e029      	b.n	80014f4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80014a0:	6978      	ldr	r0, [r7, #20]
 80014a2:	f7ff ffbd 	bl	8001420 <_GetAvailWriteSpace>
 80014a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d202      	bcs.n	80014b6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80014b4:	e021      	b.n	80014fa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff6e 	bl	80013a0 <_WriteNoCheck>
    break;
 80014c4:	e019      	b.n	80014fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ffaa 	bl	8001420 <_GetAvailWriteSpace>
 80014cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	bf28      	it	cs
 80014d6:	4613      	movcs	r3, r2
 80014d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	69b9      	ldr	r1, [r7, #24]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff5e 	bl	80013a0 <_WriteNoCheck>
    break;
 80014e4:	e009      	b.n	80014fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	69b9      	ldr	r1, [r7, #24]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff fefe 	bl	80012ec <_WriteBlocking>
 80014f0:	61f8      	str	r0, [r7, #28]
    break;
 80014f2:	e002      	b.n	80014fa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    break;
 80014f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80014fa:	69fb      	ldr	r3, [r7, #28]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200001f0 	.word	0x200001f0

08001508 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <SEGGER_RTT_Write+0x44>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <SEGGER_RTT_Write+0x18>
 800151c:	f7ff fe94 	bl	8001248 <_DoInit>
  SEGGER_RTT_LOCK();
 8001520:	f3ef 8311 	mrs	r3, BASEPRI
 8001524:	f04f 0120 	mov.w	r1, #32
 8001528:	f381 8811 	msr	BASEPRI, r1
 800152c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff ff98 	bl	8001468 <SEGGER_RTT_WriteNoLock>
 8001538:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8001540:	693b      	ldr	r3, [r7, #16]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001f0 	.word	0x200001f0

08001550 <_write>:
*   Low-level write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write(int file, char *ptr, int len) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	461a      	mov	r2, r3
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ffd0 	bl	8001508 <SEGGER_RTT_Write>
  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <test_byte_order>:

/*************************   B Y T E   O R D E R   ****************************/


static int test_byte_order(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
    if (*(uint32_t*)endianness != 0x31323334UL)
        return CWP_RC_WRONG_BYTE_ORDER;
#else

#ifdef COMPILE_FOR_LITTLE_ENDIAN
    const char *endianness = "1234";
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <test_byte_order+0x28>)
 800157c:	607b      	str	r3, [r7, #4]
    if (*(uint32_t*)endianness != 0x34333231UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <test_byte_order+0x2c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d002      	beq.n	800158e <test_byte_order+0x1a>
        return CWP_RC_WRONG_BYTE_ORDER;
 8001588:	f06f 0304 	mvn.w	r3, #4
 800158c:	e000      	b.n	8001590 <test_byte_order+0x1c>
#endif
#endif
    return CWP_RC_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	08012f78 	.word	0x08012f78
 80015a0:	34333231 	.word	0x34333231

080015a4 <cw_pack_context_init>:
/*******************************   P A C K   **********************************/



int cw_pack_context_init (cw_pack_context* pack_context, void* data, unsigned long length, pack_overflow_handler hpo)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
    pack_context->start = pack_context->current = (uint8_t*)data;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
    pack_context->end = pack_context->start + length;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	441a      	add	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	609a      	str	r2, [r3, #8]
    pack_context->be_compatible = false;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	731a      	strb	r2, [r3, #12]
    pack_context->err_no = 0;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    pack_context->handle_pack_overflow = hpo;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	619a      	str	r2, [r3, #24]
    pack_context->handle_flush = NULL;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
    pack_context->return_code = test_byte_order();
 80015e4:	f7ff ffc6 	bl	8001574 <test_byte_order>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	611a      	str	r2, [r3, #16]
    return pack_context->return_code;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	691b      	ldr	r3, [r3, #16]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <cw_pack_unsigned>:

/*  Packing routines  --------------------------------------------------------------------------------  */


void cw_pack_unsigned(cw_pack_context* pack_context, uint64_t i)
{
 80015fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015fe:	b0a2      	sub	sp, #136	; 0x88
 8001600:	af00      	add	r7, sp, #0
 8001602:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001604:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if (pack_context->return_code)
 8001608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 81b9 	bne.w	8001984 <cw_pack_unsigned+0x38a>
        return;
    
    if (i < 128)
 8001612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001616:	2a80      	cmp	r2, #128	; 0x80
 8001618:	f173 0300 	sbcs.w	r3, r3, #0
 800161c:	d224      	bcs.n	8001668 <cw_pack_unsigned+0x6e>
        tryMove0(i);
 800161e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	429a      	cmp	r2, r3
 8001628:	d115      	bne.n	8001656 <cw_pack_unsigned+0x5c>
 800162a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d104      	bne.n	800163c <cw_pack_unsigned+0x42>
 8001632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001634:	f06f 0201 	mvn.w	r2, #1
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	e1a4      	b.n	8001986 <cw_pack_unsigned+0x38c>
 800163c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2101      	movs	r1, #1
 8001642:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001644:	4798      	blx	r3
 8001646:	6578      	str	r0, [r7, #84]	; 0x54
 8001648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <cw_pack_unsigned+0x5c>
 800164e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	e197      	b.n	8001986 <cw_pack_unsigned+0x38c>
 8001656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800165e:	6011      	str	r1, [r2, #0]
 8001660:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e18e      	b.n	8001986 <cw_pack_unsigned+0x38c>

    if (i < 256)
 8001668:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800166c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001670:	f173 0300 	sbcs.w	r3, r3, #0
 8001674:	d23e      	bcs.n	80016f4 <cw_pack_unsigned+0xfa>
        tryMove1(0xcc, i);
 8001676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800167e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001682:	3302      	adds	r3, #2
 8001684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001690:	429a      	cmp	r2, r3
 8001692:	d91e      	bls.n	80016d2 <cw_pack_unsigned+0xd8>
 8001694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <cw_pack_unsigned+0xac>
 800169c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800169e:	f06f 0201 	mvn.w	r2, #1
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	e16f      	b.n	8001986 <cw_pack_unsigned+0x38c>
 80016a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2102      	movs	r1, #2
 80016ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80016ae:	4798      	blx	r3
 80016b0:	65b8      	str	r0, [r7, #88]	; 0x58
 80016b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <cw_pack_unsigned+0xc6>
 80016b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	e162      	b.n	8001986 <cw_pack_unsigned+0x38c>
 80016c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016cc:	3302      	adds	r3, #2
 80016ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80016e4:	22cc      	movs	r2, #204	; 0xcc
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80016ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e148      	b.n	8001986 <cw_pack_unsigned+0x38c>

    if (i < 0x10000L)
 80016f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80016fc:	f173 0300 	sbcs.w	r3, r3, #0
 8001700:	d244      	bcs.n	800178c <cw_pack_unsigned+0x192>
    {
        tryMove2(0xcd, i);
 8001702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800170a:	3303      	adds	r3, #3
 800170c:	67bb      	str	r3, [r7, #120]	; 0x78
 800170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001714:	429a      	cmp	r2, r3
 8001716:	d91b      	bls.n	8001750 <cw_pack_unsigned+0x156>
 8001718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d104      	bne.n	800172a <cw_pack_unsigned+0x130>
 8001720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001722:	f06f 0201 	mvn.w	r2, #1
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	e12d      	b.n	8001986 <cw_pack_unsigned+0x38c>
 800172a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2103      	movs	r1, #3
 8001730:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001732:	4798      	blx	r3
 8001734:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <cw_pack_unsigned+0x14a>
 800173c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	e120      	b.n	8001986 <cw_pack_unsigned+0x38c>
 8001744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	67fb      	str	r3, [r7, #124]	; 0x7c
 800174a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800174c:	3303      	adds	r3, #3
 800174e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001752:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800175c:	22cd      	movs	r2, #205	; 0xcd
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	0a02      	lsrs	r2, r0, #8
 800176e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001772:	0a0b      	lsrs	r3, r1, #8
 8001774:	b293      	uxth	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	b29a      	uxth	r2, r3
 800177a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b29b      	uxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b29a      	uxth	r2, r3
 8001786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	e0fc      	b.n	8001986 <cw_pack_unsigned+0x38c>
    }
    if (i < 0x100000000LL)
 800178c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001790:	2b01      	cmp	r3, #1
 8001792:	d240      	bcs.n	8001816 <cw_pack_unsigned+0x21c>
        tryMove4(0xce, i);
 8001794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	677b      	str	r3, [r7, #116]	; 0x74
 800179a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179c:	3305      	adds	r3, #5
 800179e:	673b      	str	r3, [r7, #112]	; 0x70
 80017a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d91b      	bls.n	80017e2 <cw_pack_unsigned+0x1e8>
 80017aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d104      	bne.n	80017bc <cw_pack_unsigned+0x1c2>
 80017b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b4:	f06f 0201 	mvn.w	r2, #1
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	e0e4      	b.n	8001986 <cw_pack_unsigned+0x38c>
 80017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2105      	movs	r1, #5
 80017c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017c4:	4798      	blx	r3
 80017c6:	6638      	str	r0, [r7, #96]	; 0x60
 80017c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <cw_pack_unsigned+0x1dc>
 80017ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	e0d7      	b.n	8001986 <cw_pack_unsigned+0x38c>
 80017d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	677b      	str	r3, [r7, #116]	; 0x74
 80017dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017de:	3305      	adds	r3, #5
 80017e0:	673b      	str	r3, [r7, #112]	; 0x70
 80017e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	677a      	str	r2, [r7, #116]	; 0x74
 80017ee:	22ce      	movs	r2, #206	; 0xce
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f4:	0e1a      	lsrs	r2, r3, #24
 80017f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017fe:	431a      	orrs	r2, r3
 8001800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001808:	431a      	orrs	r2, r3
 800180a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	431a      	orrs	r2, r3
 8001810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e0b7      	b.n	8001986 <cw_pack_unsigned+0x38c>

    tryMove8(0xcf,i);
 8001816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800181c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800181e:	3309      	adds	r3, #9
 8001820:	66bb      	str	r3, [r7, #104]	; 0x68
 8001822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001828:	4293      	cmp	r3, r2
 800182a:	d91b      	bls.n	8001864 <cw_pack_unsigned+0x26a>
 800182c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d104      	bne.n	800183e <cw_pack_unsigned+0x244>
 8001834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001836:	f06f 0201 	mvn.w	r2, #1
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	e0a3      	b.n	8001986 <cw_pack_unsigned+0x38c>
 800183e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2109      	movs	r1, #9
 8001844:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001846:	4798      	blx	r3
 8001848:	6678      	str	r0, [r7, #100]	; 0x64
 800184a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <cw_pack_unsigned+0x25e>
 8001850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001852:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	e096      	b.n	8001986 <cw_pack_unsigned+0x38c>
 8001858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800185e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001860:	3309      	adds	r3, #9
 8001862:	66bb      	str	r3, [r7, #104]	; 0x68
 8001864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800186c:	1c53      	adds	r3, r2, #1
 800186e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001870:	23cf      	movs	r3, #207	; 0xcf
 8001872:	7013      	strb	r3, [r2, #0]
 8001874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001876:	0a1a      	lsrs	r2, r3, #8
 8001878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187a:	061b      	lsls	r3, r3, #24
 800187c:	ea42 0503 	orr.w	r5, r2, r3
 8001880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001882:	0a1a      	lsrs	r2, r3, #8
 8001884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001886:	061b      	lsls	r3, r3, #24
 8001888:	ea42 0403 	orr.w	r4, r2, r3
 800188c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
 8001892:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189a:	021a      	lsls	r2, r3, #8
 800189c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800189e:	0e1b      	lsrs	r3, r3, #24
 80018a0:	ea42 0a03 	orr.w	sl, r2, r3
 80018a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a6:	021a      	lsls	r2, r3, #8
 80018a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018aa:	0e1b      	lsrs	r3, r3, #24
 80018ac:	ea42 0b03 	orr.w	fp, r2, r3
 80018b0:	f40a 087f 	and.w	r8, sl, #16711680	; 0xff0000
 80018b4:	f40b 097f 	and.w	r9, fp, #16711680	; 0xff0000
 80018b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80018bc:	460b      	mov	r3, r1
 80018be:	ea43 0308 	orr.w	r3, r3, r8
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
 80018c4:	4613      	mov	r3, r2
 80018c6:	ea43 0309 	orr.w	r3, r3, r9
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
 80018cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	0a10      	lsrs	r0, r2, #8
 80018da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018de:	0a19      	lsrs	r1, r3, #8
 80018e0:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ee:	4623      	mov	r3, r4
 80018f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018f4:	4602      	mov	r2, r0
 80018f6:	4313      	orrs	r3, r2
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	462b      	mov	r3, r5
 80018fc:	460a      	mov	r2, r1
 80018fe:	4313      	orrs	r3, r2
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	020b      	lsls	r3, r1, #8
 8001910:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001914:	0202      	lsls	r2, r0, #8
 8001916:	2100      	movs	r1, #0
 8001918:	61b9      	str	r1, [r7, #24]
 800191a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001924:	4623      	mov	r3, r4
 8001926:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800192a:	4602      	mov	r2, r0
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	462b      	mov	r3, r5
 8001932:	460a      	mov	r2, r1
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	0e0a      	lsrs	r2, r1, #24
 8001946:	2300      	movs	r3, #0
 8001948:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800194c:	4621      	mov	r1, r4
 800194e:	4311      	orrs	r1, r2
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	4629      	mov	r1, r5
 8001954:	4319      	orrs	r1, r3
 8001956:	60f9      	str	r1, [r7, #12]
 8001958:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	0603      	lsls	r3, r0, #24
 8001966:	2200      	movs	r2, #0
 8001968:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800196c:	4621      	mov	r1, r4
 800196e:	4311      	orrs	r1, r2
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	4629      	mov	r1, r5
 8001974:	4319      	orrs	r1, r3
 8001976:	6079      	str	r1, [r7, #4]
 8001978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800197e:	e9c3 1200 	strd	r1, r2, [r3]
 8001982:	e000      	b.n	8001986 <cw_pack_unsigned+0x38c>
        return;
 8001984:	bf00      	nop
}
 8001986:	3788      	adds	r7, #136	; 0x88
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800198e <cw_pack_float>:
    tryMove8(0xd3,i);
}


void cw_pack_float(cw_pack_context* pack_context, float f)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	ed87 0a00 	vstr	s0, [r7]
    if (pack_context->return_code)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d143      	bne.n	8001a2a <cw_pack_float+0x9c>
        return;
    
    uint32_t tmp = *((uint32_t*)&f);
 80019a2:	463b      	mov	r3, r7
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
    tryMove4(0xca,tmp);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3305      	adds	r3, #5
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d91b      	bls.n	80019f6 <cw_pack_float+0x68>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <cw_pack_float+0x42>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f06f 0201 	mvn.w	r2, #1
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	e02d      	b.n	8001a2c <cw_pack_float+0x9e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2105      	movs	r1, #5
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
 80019da:	60b8      	str	r0, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <cw_pack_float+0x5c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	e020      	b.n	8001a2c <cw_pack_float+0x9e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3305      	adds	r3, #5
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	617a      	str	r2, [r7, #20]
 8001a02:	22ca      	movs	r2, #202	; 0xca
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	0e1a      	lsrs	r2, r3, #24
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	431a      	orrs	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e000      	b.n	8001a2c <cw_pack_float+0x9e>
        return;
 8001a2a:	bf00      	nop
}
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <cw_pack_boolean>:
    tryMove0(0xc2);
}


void cw_pack_boolean(cw_pack_context* pack_context, bool b)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
    if (pack_context->return_code)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d129      	bne.n	8001a9a <cw_pack_boolean+0x68>
        return;
    
    tryMove0(b? 0xc3: 0xc2);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d115      	bne.n	8001a7e <cw_pack_boolean+0x4c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d104      	bne.n	8001a64 <cw_pack_boolean+0x32>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f06f 0201 	mvn.w	r2, #1
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	e01b      	b.n	8001a9c <cw_pack_boolean+0x6a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <cw_pack_boolean+0x4c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
 8001a7c:	e00e      	b.n	8001a9c <cw_pack_boolean+0x6a>
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <cw_pack_boolean+0x56>
 8001a84:	20c3      	movs	r0, #195	; 0xc3
 8001a86:	e000      	b.n	8001a8a <cw_pack_boolean+0x58>
 8001a88:	20c2      	movs	r0, #194	; 0xc2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6011      	str	r1, [r2, #0]
 8001a94:	4602      	mov	r2, r0
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e000      	b.n	8001a9c <cw_pack_boolean+0x6a>
        return;
 8001a9a:	bf00      	nop
}
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <cw_unpack_context_init>:

/*******************************   U N P A C K   **********************************/


int cw_unpack_context_init (cw_unpack_context* unpack_context, const void* data, unsigned long length, unpack_underflow_handler huu)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
    unpack_context->start = unpack_context->current = (uint8_t*)data;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	61da      	str	r2, [r3, #28]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	619a      	str	r2, [r3, #24]
    unpack_context->end = unpack_context->start + length;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	621a      	str	r2, [r3, #32]
    unpack_context->return_code = test_byte_order();
 8001aca:	f7ff fd53 	bl	8001574 <test_byte_order>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
    unpack_context->err_no = 0;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
    unpack_context->handle_unpack_underflow = huu;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
    return unpack_context->return_code;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <cw_unpack_next>:
/*  Unpacking routines  ----------------------------------------------------------  */



void cw_unpack_next (cw_unpack_context* unpack_context)
{
 8001aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af0:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001afa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001afe:	6018      	str	r0, [r3, #0]
    if (unpack_context->return_code)
 8001b00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f044 84bc 	bne.w	800648a <cw_unpack_next+0x499e>
    uint32_t    tmpu32;
    uint16_t    tmpu16;
    uint8_t*    p;
    
#define buffer_end_return_code  CWP_RC_END_OF_INPUT;
    cw_unpack_assert_space(1);
 8001b12:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b16:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001b22:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001b26:	3301      	adds	r3, #1
 8001b28:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8001b2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b30:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d962      	bls.n	8001c06 <cw_unpack_next+0x11a>
 8001b40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d111      	bne.n	8001b74 <cw_unpack_next+0x88>
 8001b50:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b54:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5e:	801a      	strh	r2, [r3, #0]
 8001b60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b64:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b70:	f004 bc94 	b.w	800649c <cw_unpack_next+0x49b0>
 8001b74:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b78:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b84:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b88:	2101      	movs	r1, #1
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	4790      	blx	r2
 8001b8e:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8001b92:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d028      	beq.n	8001bec <cw_unpack_next+0x100>
 8001b9a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d011      	beq.n	8001bc8 <cw_unpack_next+0xdc>
 8001ba4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ba8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bc4:	f004 bc6a 	b.w	800649c <cw_unpack_next+0x49b0>
 8001bc8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bcc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
 8001be8:	f004 bc58 	b.w	800649c <cw_unpack_next+0x49b0>
 8001bec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bf0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001bfc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c00:	3301      	adds	r3, #1
 8001c02:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8001c06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001c14:	61d3      	str	r3, [r2, #28]
    uint8_t c = *p;
 8001c16:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
#undef buffer_end_return_code
#define buffer_end_return_code  CWP_RC_BUFFER_UNDERFLOW;
    switch (c)
 8001c20:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8001c24:	2bff      	cmp	r3, #255	; 0xff
 8001c26:	f204 841f 	bhi.w	8006468 <cw_unpack_next+0x497c>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <cw_unpack_next+0x144>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08002031 	.word	0x08002031
 8001c34:	08002031 	.word	0x08002031
 8001c38:	08002031 	.word	0x08002031
 8001c3c:	08002031 	.word	0x08002031
 8001c40:	08002031 	.word	0x08002031
 8001c44:	08002031 	.word	0x08002031
 8001c48:	08002031 	.word	0x08002031
 8001c4c:	08002031 	.word	0x08002031
 8001c50:	08002031 	.word	0x08002031
 8001c54:	08002031 	.word	0x08002031
 8001c58:	08002031 	.word	0x08002031
 8001c5c:	08002031 	.word	0x08002031
 8001c60:	08002031 	.word	0x08002031
 8001c64:	08002031 	.word	0x08002031
 8001c68:	08002031 	.word	0x08002031
 8001c6c:	08002031 	.word	0x08002031
 8001c70:	08002031 	.word	0x08002031
 8001c74:	08002031 	.word	0x08002031
 8001c78:	08002031 	.word	0x08002031
 8001c7c:	08002031 	.word	0x08002031
 8001c80:	08002031 	.word	0x08002031
 8001c84:	08002031 	.word	0x08002031
 8001c88:	08002031 	.word	0x08002031
 8001c8c:	08002031 	.word	0x08002031
 8001c90:	08002031 	.word	0x08002031
 8001c94:	08002031 	.word	0x08002031
 8001c98:	08002031 	.word	0x08002031
 8001c9c:	08002031 	.word	0x08002031
 8001ca0:	08002031 	.word	0x08002031
 8001ca4:	08002031 	.word	0x08002031
 8001ca8:	08002031 	.word	0x08002031
 8001cac:	08002031 	.word	0x08002031
 8001cb0:	08002031 	.word	0x08002031
 8001cb4:	08002031 	.word	0x08002031
 8001cb8:	08002031 	.word	0x08002031
 8001cbc:	08002031 	.word	0x08002031
 8001cc0:	08002031 	.word	0x08002031
 8001cc4:	08002031 	.word	0x08002031
 8001cc8:	08002031 	.word	0x08002031
 8001ccc:	08002031 	.word	0x08002031
 8001cd0:	08002031 	.word	0x08002031
 8001cd4:	08002031 	.word	0x08002031
 8001cd8:	08002031 	.word	0x08002031
 8001cdc:	08002031 	.word	0x08002031
 8001ce0:	08002031 	.word	0x08002031
 8001ce4:	08002031 	.word	0x08002031
 8001ce8:	08002031 	.word	0x08002031
 8001cec:	08002031 	.word	0x08002031
 8001cf0:	08002031 	.word	0x08002031
 8001cf4:	08002031 	.word	0x08002031
 8001cf8:	08002031 	.word	0x08002031
 8001cfc:	08002031 	.word	0x08002031
 8001d00:	08002031 	.word	0x08002031
 8001d04:	08002031 	.word	0x08002031
 8001d08:	08002031 	.word	0x08002031
 8001d0c:	08002031 	.word	0x08002031
 8001d10:	08002031 	.word	0x08002031
 8001d14:	08002031 	.word	0x08002031
 8001d18:	08002031 	.word	0x08002031
 8001d1c:	08002031 	.word	0x08002031
 8001d20:	08002031 	.word	0x08002031
 8001d24:	08002031 	.word	0x08002031
 8001d28:	08002031 	.word	0x08002031
 8001d2c:	08002031 	.word	0x08002031
 8001d30:	08002031 	.word	0x08002031
 8001d34:	08002031 	.word	0x08002031
 8001d38:	08002031 	.word	0x08002031
 8001d3c:	08002031 	.word	0x08002031
 8001d40:	08002031 	.word	0x08002031
 8001d44:	08002031 	.word	0x08002031
 8001d48:	08002031 	.word	0x08002031
 8001d4c:	08002031 	.word	0x08002031
 8001d50:	08002031 	.word	0x08002031
 8001d54:	08002031 	.word	0x08002031
 8001d58:	08002031 	.word	0x08002031
 8001d5c:	08002031 	.word	0x08002031
 8001d60:	08002031 	.word	0x08002031
 8001d64:	08002031 	.word	0x08002031
 8001d68:	08002031 	.word	0x08002031
 8001d6c:	08002031 	.word	0x08002031
 8001d70:	08002031 	.word	0x08002031
 8001d74:	08002031 	.word	0x08002031
 8001d78:	08002031 	.word	0x08002031
 8001d7c:	08002031 	.word	0x08002031
 8001d80:	08002031 	.word	0x08002031
 8001d84:	08002031 	.word	0x08002031
 8001d88:	08002031 	.word	0x08002031
 8001d8c:	08002031 	.word	0x08002031
 8001d90:	08002031 	.word	0x08002031
 8001d94:	08002031 	.word	0x08002031
 8001d98:	08002031 	.word	0x08002031
 8001d9c:	08002031 	.word	0x08002031
 8001da0:	08002031 	.word	0x08002031
 8001da4:	08002031 	.word	0x08002031
 8001da8:	08002031 	.word	0x08002031
 8001dac:	08002031 	.word	0x08002031
 8001db0:	08002031 	.word	0x08002031
 8001db4:	08002031 	.word	0x08002031
 8001db8:	08002031 	.word	0x08002031
 8001dbc:	08002031 	.word	0x08002031
 8001dc0:	08002031 	.word	0x08002031
 8001dc4:	08002031 	.word	0x08002031
 8001dc8:	08002031 	.word	0x08002031
 8001dcc:	08002031 	.word	0x08002031
 8001dd0:	08002031 	.word	0x08002031
 8001dd4:	08002031 	.word	0x08002031
 8001dd8:	08002031 	.word	0x08002031
 8001ddc:	08002031 	.word	0x08002031
 8001de0:	08002031 	.word	0x08002031
 8001de4:	08002031 	.word	0x08002031
 8001de8:	08002031 	.word	0x08002031
 8001dec:	08002031 	.word	0x08002031
 8001df0:	08002031 	.word	0x08002031
 8001df4:	08002031 	.word	0x08002031
 8001df8:	08002031 	.word	0x08002031
 8001dfc:	08002031 	.word	0x08002031
 8001e00:	08002031 	.word	0x08002031
 8001e04:	08002031 	.word	0x08002031
 8001e08:	08002031 	.word	0x08002031
 8001e0c:	08002031 	.word	0x08002031
 8001e10:	08002031 	.word	0x08002031
 8001e14:	08002031 	.word	0x08002031
 8001e18:	08002031 	.word	0x08002031
 8001e1c:	08002031 	.word	0x08002031
 8001e20:	08002031 	.word	0x08002031
 8001e24:	08002031 	.word	0x08002031
 8001e28:	08002031 	.word	0x08002031
 8001e2c:	08002031 	.word	0x08002031
 8001e30:	08002065 	.word	0x08002065
 8001e34:	08002065 	.word	0x08002065
 8001e38:	08002065 	.word	0x08002065
 8001e3c:	08002065 	.word	0x08002065
 8001e40:	08002065 	.word	0x08002065
 8001e44:	08002065 	.word	0x08002065
 8001e48:	08002065 	.word	0x08002065
 8001e4c:	08002065 	.word	0x08002065
 8001e50:	08002065 	.word	0x08002065
 8001e54:	08002065 	.word	0x08002065
 8001e58:	08002065 	.word	0x08002065
 8001e5c:	08002065 	.word	0x08002065
 8001e60:	08002065 	.word	0x08002065
 8001e64:	08002065 	.word	0x08002065
 8001e68:	08002065 	.word	0x08002065
 8001e6c:	08002065 	.word	0x08002065
 8001e70:	0800208d 	.word	0x0800208d
 8001e74:	0800208d 	.word	0x0800208d
 8001e78:	0800208d 	.word	0x0800208d
 8001e7c:	0800208d 	.word	0x0800208d
 8001e80:	0800208d 	.word	0x0800208d
 8001e84:	0800208d 	.word	0x0800208d
 8001e88:	0800208d 	.word	0x0800208d
 8001e8c:	0800208d 	.word	0x0800208d
 8001e90:	0800208d 	.word	0x0800208d
 8001e94:	0800208d 	.word	0x0800208d
 8001e98:	0800208d 	.word	0x0800208d
 8001e9c:	0800208d 	.word	0x0800208d
 8001ea0:	0800208d 	.word	0x0800208d
 8001ea4:	0800208d 	.word	0x0800208d
 8001ea8:	0800208d 	.word	0x0800208d
 8001eac:	0800208d 	.word	0x0800208d
 8001eb0:	080020b5 	.word	0x080020b5
 8001eb4:	080020b5 	.word	0x080020b5
 8001eb8:	080020b5 	.word	0x080020b5
 8001ebc:	080020b5 	.word	0x080020b5
 8001ec0:	080020b5 	.word	0x080020b5
 8001ec4:	080020b5 	.word	0x080020b5
 8001ec8:	080020b5 	.word	0x080020b5
 8001ecc:	080020b5 	.word	0x080020b5
 8001ed0:	080020b5 	.word	0x080020b5
 8001ed4:	080020b5 	.word	0x080020b5
 8001ed8:	080020b5 	.word	0x080020b5
 8001edc:	080020b5 	.word	0x080020b5
 8001ee0:	080020b5 	.word	0x080020b5
 8001ee4:	080020b5 	.word	0x080020b5
 8001ee8:	080020b5 	.word	0x080020b5
 8001eec:	080020b5 	.word	0x080020b5
 8001ef0:	080020b5 	.word	0x080020b5
 8001ef4:	080020b5 	.word	0x080020b5
 8001ef8:	080020b5 	.word	0x080020b5
 8001efc:	080020b5 	.word	0x080020b5
 8001f00:	080020b5 	.word	0x080020b5
 8001f04:	080020b5 	.word	0x080020b5
 8001f08:	080020b5 	.word	0x080020b5
 8001f0c:	080020b5 	.word	0x080020b5
 8001f10:	080020b5 	.word	0x080020b5
 8001f14:	080020b5 	.word	0x080020b5
 8001f18:	080020b5 	.word	0x080020b5
 8001f1c:	080020b5 	.word	0x080020b5
 8001f20:	080020b5 	.word	0x080020b5
 8001f24:	080020b5 	.word	0x080020b5
 8001f28:	080020b5 	.word	0x080020b5
 8001f2c:	080020b5 	.word	0x080020b5
 8001f30:	0800222b 	.word	0x0800222b
 8001f34:	08006469 	.word	0x08006469
 8001f38:	0800223f 	.word	0x0800223f
 8001f3c:	08002261 	.word	0x08002261
 8001f40:	08002283 	.word	0x08002283
 8001f44:	08002515 	.word	0x08002515
 8001f48:	080027c7 	.word	0x080027c7
 8001f4c:	08002ab3 	.word	0x08002ab3
 8001f50:	080032e7 	.word	0x080032e7
 8001f54:	080036cb 	.word	0x080036cb
 8001f58:	08003ae9 	.word	0x08003ae9
 8001f5c:	08003c83 	.word	0x08003c83
 8001f60:	08003f1d 	.word	0x08003f1d
 8001f64:	08004071 	.word	0x08004071
 8001f68:	080041e5 	.word	0x080041e5
 8001f6c:	08004393 	.word	0x08004393
 8001f70:	0800462d 	.word	0x0800462d
 8001f74:	080047a7 	.word	0x080047a7
 8001f78:	08004941 	.word	0x08004941
 8001f7c:	08004b13 	.word	0x08004b13
 8001f80:	08004dc9 	.word	0x08004dc9
 8001f84:	08004f5b 	.word	0x08004f5b
 8001f88:	080050ed 	.word	0x080050ed
 8001f8c:	080052cf 	.word	0x080052cf
 8001f90:	080055a7 	.word	0x080055a7
 8001f94:	08005721 	.word	0x08005721
 8001f98:	08005983 	.word	0x08005983
 8001f9c:	08005c05 	.word	0x08005c05
 8001fa0:	08005eb5 	.word	0x08005eb5
 8001fa4:	08005ff9 	.word	0x08005ff9
 8001fa8:	08006177 	.word	0x08006177
 8001fac:	080062bb 	.word	0x080062bb
 8001fb0:	08006439 	.word	0x08006439
 8001fb4:	08006439 	.word	0x08006439
 8001fb8:	08006439 	.word	0x08006439
 8001fbc:	08006439 	.word	0x08006439
 8001fc0:	08006439 	.word	0x08006439
 8001fc4:	08006439 	.word	0x08006439
 8001fc8:	08006439 	.word	0x08006439
 8001fcc:	08006439 	.word	0x08006439
 8001fd0:	08006439 	.word	0x08006439
 8001fd4:	08006439 	.word	0x08006439
 8001fd8:	08006439 	.word	0x08006439
 8001fdc:	08006439 	.word	0x08006439
 8001fe0:	08006439 	.word	0x08006439
 8001fe4:	08006439 	.word	0x08006439
 8001fe8:	08006439 	.word	0x08006439
 8001fec:	08006439 	.word	0x08006439
 8001ff0:	08006439 	.word	0x08006439
 8001ff4:	08006439 	.word	0x08006439
 8001ff8:	08006439 	.word	0x08006439
 8001ffc:	08006439 	.word	0x08006439
 8002000:	08006439 	.word	0x08006439
 8002004:	08006439 	.word	0x08006439
 8002008:	08006439 	.word	0x08006439
 800200c:	08006439 	.word	0x08006439
 8002010:	08006439 	.word	0x08006439
 8002014:	08006439 	.word	0x08006439
 8002018:	08006439 	.word	0x08006439
 800201c:	08006439 	.word	0x08006439
 8002020:	08006439 	.word	0x08006439
 8002024:	08006439 	.word	0x08006439
 8002028:	08006439 	.word	0x08006439
 800202c:	08006439 	.word	0x08006439
        case 0x58: case 0x59: case 0x5a: case 0x5b: case 0x5c: case 0x5d: case 0x5e: case 0x5f:
        case 0x60: case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67:
        case 0x68: case 0x69: case 0x6a: case 0x6b: case 0x6c: case 0x6d: case 0x6e: case 0x6f:
        case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77:
        case 0x78: case 0x79: case 0x7a: case 0x7b: case 0x7c: case 0x7d: case 0x7e: case 0x7f:
                    getDDItem(CWP_ITEM_POSITIVE_INTEGER, i64, c);       return;  // positive fixnum
 8002030:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002034:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8002044:	2200      	movs	r2, #0
 8002046:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800204a:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800204e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002052:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 800205c:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8002060:	f004 ba1c 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87:
        case 0x88: case 0x89: case 0x8a: case 0x8b: case 0x8c: case 0x8d: case 0x8e: case 0x8f:
                    getDDItem(CWP_ITEM_MAP, map.size, c & 0x0f);        return;  // fixmap
 8002064:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002068:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f240 1235 	movw	r2, #309	; 0x135
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8002078:	f003 020f 	and.w	r2, r3, #15
 800207c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002080:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	f004 ba08 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97:
        case 0x98: case 0x99: case 0x9a: case 0x9b: case 0x9c: case 0x9d: case 0x9e: case 0x9f:
                    getDDItem(CWP_ITEM_ARRAY, array.size, c & 0x0f);    return;  // fixarray
 800208c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002090:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f44f 729a 	mov.w	r2, #308	; 0x134
 800209a:	801a      	strh	r2, [r3, #0]
 800209c:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	f004 b9f4 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xa0: case 0xa1: case 0xa2: case 0xa3: case 0xa4: case 0xa5: case 0xa6: case 0xa7:
        case 0xa8: case 0xa9: case 0xaa: case 0xab: case 0xac: case 0xad: case 0xae: case 0xaf:
        case 0xb0: case 0xb1: case 0xb2: case 0xb3: case 0xb4: case 0xb5: case 0xb6: case 0xb7:
        case 0xb8: case 0xb9: case 0xba: case 0xbb: case 0xbc: case 0xbd: case 0xbe: case 0xbf:
                    getDDItem(CWP_ITEM_STR, str.length, c & 0x1f);              // fixraw
 80020b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f44f 7299 	mov.w	r2, #306	; 0x132
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 80020d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80020e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80020f8:	4413      	add	r3, r2
 80020fa:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80020fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002102:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 800210e:	429a      	cmp	r2, r3
 8002110:	d979      	bls.n	8002206 <cw_unpack_next+0x71a>
 8002112:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002116:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d111      	bne.n	8002146 <cw_unpack_next+0x65a>
 8002122:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002126:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002136:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0202 	mvn.w	r2, #2
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
 8002142:	f004 b9ab 	b.w	800649c <cw_unpack_next+0x49b0>
 8002146:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800214a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002156:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	68d1      	ldr	r1, [r2, #12]
 800215e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002162:	f5a2 74ba 	sub.w	r4, r2, #372	; 0x174
 8002166:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800216a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800216e:	6810      	ldr	r0, [r2, #0]
 8002170:	4798      	blx	r3
 8002172:	6020      	str	r0, [r4, #0]
 8002174:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002178:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d02e      	beq.n	80021e0 <cw_unpack_next+0x6f4>
 8002182:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002186:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d014      	beq.n	80021bc <cw_unpack_next+0x6d0>
 8002192:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002196:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80021b0:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
 80021b8:	f004 b970 	b.w	800649c <cw_unpack_next+0x49b0>
 80021bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0202 	mvn.w	r2, #2
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
 80021dc:	f004 b95e 	b.w	800649c <cw_unpack_next+0x49b0>
 80021e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80021f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002200:	4413      	add	r3, r2
 8002202:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8002206:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800220a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8002214:	61da      	str	r2, [r3, #28]
 8002216:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800221a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	f004 b939 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc0:  unpack_context->item.type = CWP_ITEM_NIL;           return;  // nil
 800222a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800222e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	f004 b92f 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc2:  getDDItem(CWP_ITEM_BOOLEAN, boolean, false);        return;  // false
 800223e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002242:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f240 122d 	movw	r2, #301	; 0x12d
 800224c:	801a      	strh	r2, [r3, #0]
 800224e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002252:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	721a      	strb	r2, [r3, #8]
 800225c:	f004 b91e 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc3:  getDDItem(CWP_ITEM_BOOLEAN, boolean, true);         return;  // true
 8002260:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002264:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f240 122d 	movw	r2, #301	; 0x12d
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002274:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	721a      	strb	r2, [r3, #8]
 800227e:	f004 b90d 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc4:  getDDItem1(CWP_ITEM_BIN, bin.length, uint8_t);              // bin 8
 8002282:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002286:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f240 1233 	movw	r2, #307	; 0x133
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002296:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80022a2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80022a6:	3301      	adds	r3, #1
 80022a8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80022ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80022bc:	429a      	cmp	r2, r3
 80022be:	d96e      	bls.n	800239e <cw_unpack_next+0x8b2>
 80022c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d111      	bne.n	80022f4 <cw_unpack_next+0x808>
 80022d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0202 	mvn.w	r2, #2
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
 80022f0:	f004 b8d4 	b.w	800649c <cw_unpack_next+0x49b0>
 80022f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002304:	f5a2 74b6 	sub.w	r4, r2, #364	; 0x16c
 8002308:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800230c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002310:	2101      	movs	r1, #1
 8002312:	6810      	ldr	r0, [r2, #0]
 8002314:	4798      	blx	r3
 8002316:	6020      	str	r0, [r4, #0]
 8002318:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800231c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02e      	beq.n	8002384 <cw_unpack_next+0x898>
 8002326:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800232a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d014      	beq.n	8002360 <cw_unpack_next+0x874>
 8002336:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800233a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800234a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002354:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
 800235c:	f004 b89e 	b.w	800649c <cw_unpack_next+0x49b0>
 8002360:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002364:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002374:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f06f 0202 	mvn.w	r2, #2
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
 8002380:	f004 b88c 	b.w	800649c <cw_unpack_next+0x49b0>
 8002384:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002388:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002394:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002398:	3301      	adds	r3, #1
 800239a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800239e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80023ac:	61da      	str	r2, [r3, #28]
 80023ae:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 80023c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80023d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80023e2:	4413      	add	r3, r2
 80023e4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80023e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d979      	bls.n	80024f0 <cw_unpack_next+0xa04>
 80023fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002400:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d111      	bne.n	8002430 <cw_unpack_next+0x944>
 800240c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002410:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f240 32e7 	movw	r2, #999	; 0x3e7
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002420:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f06f 0202 	mvn.w	r2, #2
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
 800242c:	f004 b836 	b.w	800649c <cw_unpack_next+0x49b0>
 8002430:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002434:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002440:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	68d1      	ldr	r1, [r2, #12]
 8002448:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800244c:	f5a2 74b8 	sub.w	r4, r2, #368	; 0x170
 8002450:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002454:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002458:	6810      	ldr	r0, [r2, #0]
 800245a:	4798      	blx	r3
 800245c:	6020      	str	r0, [r4, #0]
 800245e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002462:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02e      	beq.n	80024ca <cw_unpack_next+0x9de>
 800246c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002470:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d014      	beq.n	80024a6 <cw_unpack_next+0x9ba>
 800247c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002480:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f240 32e7 	movw	r2, #999	; 0x3e7
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002490:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800249a:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
 80024a2:	f003 bffb 	b.w	800649c <cw_unpack_next+0x49b0>
 80024a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0202 	mvn.w	r2, #2
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
 80024c6:	f003 bfe9 	b.w	800649c <cw_unpack_next+0x49b0>
 80024ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80024da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80024ea:	4413      	add	r3, r2
 80024ec:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80024f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80024fe:	61da      	str	r2, [r3, #28]
 8002500:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002504:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	f003 bfc4 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc5:  getDDItem2(CWP_ITEM_BIN, bin.length, uint16_t);             // bin 16
 8002514:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002518:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f240 1233 	movw	r2, #307	; 0x133
 8002522:	801a      	strh	r2, [r3, #0]
 8002524:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002528:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002534:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002538:	3302      	adds	r3, #2
 800253a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 800253e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002542:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800254e:	429a      	cmp	r2, r3
 8002550:	d96e      	bls.n	8002630 <cw_unpack_next+0xb44>
 8002552:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002556:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d111      	bne.n	8002586 <cw_unpack_next+0xa9a>
 8002562:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002566:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002576:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0202 	mvn.w	r2, #2
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
 8002582:	f003 bf8b 	b.w	800649c <cw_unpack_next+0x49b0>
 8002586:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800258a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002596:	f5a2 74b2 	sub.w	r4, r2, #356	; 0x164
 800259a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800259e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025a2:	2102      	movs	r1, #2
 80025a4:	6810      	ldr	r0, [r2, #0]
 80025a6:	4798      	blx	r3
 80025a8:	6020      	str	r0, [r4, #0]
 80025aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025ae:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02e      	beq.n	8002616 <cw_unpack_next+0xb2a>
 80025b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d014      	beq.n	80025f2 <cw_unpack_next+0xb06>
 80025c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80025e6:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
 80025ee:	f003 bf55 	b.w	800649c <cw_unpack_next+0x49b0>
 80025f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002600:	801a      	strh	r2, [r3, #0]
 8002602:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002606:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0202 	mvn.w	r2, #2
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
 8002612:	f003 bf43 	b.w	800649c <cw_unpack_next+0x49b0>
 8002616:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800261a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002626:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800262a:	3302      	adds	r3, #2
 800262c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8002630:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002634:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800263e:	61da      	str	r2, [r3, #28]
 8002640:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 800264a:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	b21a      	sxth	r2, r3
 8002652:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	b29b      	uxth	r3, r3
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21b      	sxth	r3, r3
 8002660:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8002664:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8002668:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800266c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 8002674:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002678:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002684:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002688:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002694:	4413      	add	r3, r2
 8002696:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800269a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800269e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d979      	bls.n	80027a2 <cw_unpack_next+0xcb6>
 80026ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80026b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d111      	bne.n	80026e2 <cw_unpack_next+0xbf6>
 80026be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80026c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80026d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
 80026de:	f003 bedd 	b.w	800649c <cw_unpack_next+0x49b0>
 80026e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80026e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80026f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	68d1      	ldr	r1, [r2, #12]
 80026fa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80026fe:	f5a2 74b4 	sub.w	r4, r2, #360	; 0x168
 8002702:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002706:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800270a:	6810      	ldr	r0, [r2, #0]
 800270c:	4798      	blx	r3
 800270e:	6020      	str	r0, [r4, #0]
 8002710:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002714:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d02e      	beq.n	800277c <cw_unpack_next+0xc90>
 800271e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002722:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d014      	beq.n	8002758 <cw_unpack_next+0xc6c>
 800272e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002732:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f240 32e7 	movw	r2, #999	; 0x3e7
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002742:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800274c:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
 8002754:	f003 bea2 	b.w	800649c <cw_unpack_next+0x49b0>
 8002758:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800275c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002766:	801a      	strh	r2, [r3, #0]
 8002768:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800276c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f06f 0202 	mvn.w	r2, #2
 8002776:	625a      	str	r2, [r3, #36]	; 0x24
 8002778:	f003 be90 	b.w	800649c <cw_unpack_next+0x49b0>
 800277c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002780:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800278c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002790:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800279c:	4413      	add	r3, r2
 800279e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80027a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80027b0:	61da      	str	r2, [r3, #28]
 80027b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	f003 be6b 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc6:  getDDItem4(CWP_ITEM_BIN, bin.length, uint32_t);             // bin 32
 80027c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f240 1233 	movw	r2, #307	; 0x133
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80027e6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80027ea:	3304      	adds	r3, #4
 80027ec:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 80027f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002800:	429a      	cmp	r2, r3
 8002802:	d96e      	bls.n	80028e2 <cw_unpack_next+0xdf6>
 8002804:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <cw_unpack_next+0xd4c>
 8002814:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002818:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002828:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0202 	mvn.w	r2, #2
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
 8002834:	f003 be32 	b.w	800649c <cw_unpack_next+0x49b0>
 8002838:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800283c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002848:	f5a2 74ae 	sub.w	r4, r2, #348	; 0x15c
 800284c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002850:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002854:	2104      	movs	r1, #4
 8002856:	6810      	ldr	r0, [r2, #0]
 8002858:	4798      	blx	r3
 800285a:	6020      	str	r0, [r4, #0]
 800285c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002860:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d02e      	beq.n	80028c8 <cw_unpack_next+0xddc>
 800286a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800286e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d014      	beq.n	80028a4 <cw_unpack_next+0xdb8>
 800287a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800287e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800288e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002898:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
 80028a0:	f003 bdfc 	b.w	800649c <cw_unpack_next+0x49b0>
 80028a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0202 	mvn.w	r2, #2
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
 80028c4:	f003 bdea 	b.w	800649c <cw_unpack_next+0x49b0>
 80028c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80028d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80028dc:	3304      	adds	r3, #4
 80028de:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 80028e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80028f0:	61da      	str	r2, [r3, #28]
 80028f2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028fc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002906:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	061a      	lsls	r2, r3, #24
 800290e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002912:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800291e:	431a      	orrs	r2, r3
 8002920:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002924:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002930:	431a      	orrs	r2, r3
 8002932:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002936:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e1b      	lsrs	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002944:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800294e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002958:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 8002960:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002964:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002970:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002974:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002980:	4413      	add	r3, r2
 8002982:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002986:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800298a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8002996:	429a      	cmp	r2, r3
 8002998:	d979      	bls.n	8002a8e <cw_unpack_next+0xfa2>
 800299a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800299e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d111      	bne.n	80029ce <cw_unpack_next+0xee2>
 80029aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0202 	mvn.w	r2, #2
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
 80029ca:	f003 bd67 	b.w	800649c <cw_unpack_next+0x49b0>
 80029ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80029de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	68d1      	ldr	r1, [r2, #12]
 80029e6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80029ea:	f5a2 74b0 	sub.w	r4, r2, #352	; 0x160
 80029ee:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80029f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029f6:	6810      	ldr	r0, [r2, #0]
 80029f8:	4798      	blx	r3
 80029fa:	6020      	str	r0, [r4, #0]
 80029fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a00:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d02e      	beq.n	8002a68 <cw_unpack_next+0xf7c>
 8002a0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a0e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d014      	beq.n	8002a44 <cw_unpack_next+0xf58>
 8002a1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a28:	801a      	strh	r2, [r3, #0]
 8002a2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002a38:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8002a40:	f003 bd2c 	b.w	800649c <cw_unpack_next+0x49b0>
 8002a44:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a48:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f06f 0202 	mvn.w	r2, #2
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
 8002a64:	f003 bd1a 	b.w	800649c <cw_unpack_next+0x49b0>
 8002a68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002a78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a7c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002a88:	4413      	add	r3, r2
 8002a8a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002a8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8002a9c:	61da      	str	r2, [r3, #28]
 8002a9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002aa2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	f003 bcf5 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc7:  getDDItem1(CWP_ITEM_EXT, ext.length, uint8_t);              // ext 8
 8002ab2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ab6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002ac0:	8013      	strh	r3, [r2, #0]
 8002ac2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ac6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002ad2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8002adc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ae0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d96e      	bls.n	8002bce <cw_unpack_next+0x10e2>
 8002af0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002af4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <cw_unpack_next+0x1038>
 8002b00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b14:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0202 	mvn.w	r2, #2
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b20:	f003 bcbc 	b.w	800649c <cw_unpack_next+0x49b0>
 8002b24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b34:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 8002b38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b40:	2101      	movs	r1, #1
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	4790      	blx	r2
 8002b46:	6020      	str	r0, [r4, #0]
 8002b48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d02e      	beq.n	8002bb4 <cw_unpack_next+0x10c8>
 8002b56:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b5a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d014      	beq.n	8002b90 <cw_unpack_next+0x10a4>
 8002b66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b6a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002b84:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b8c:	f003 bc86 	b.w	800649c <cw_unpack_next+0x49b0>
 8002b90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ba4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0202 	mvn.w	r2, #2
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
 8002bb0:	f003 bc74 	b.w	800649c <cw_unpack_next+0x49b0>
 8002bb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002bc4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8002bce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bd2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8002bdc:	61d3      	str	r3, [r2, #28]
 8002bde:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002bf2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bf6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002c02:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002c06:	3301      	adds	r3, #1
 8002c08:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002c0c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c10:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d96e      	bls.n	8002cfe <cw_unpack_next+0x1212>
 8002c20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <cw_unpack_next+0x1168>
 8002c30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c34:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0202 	mvn.w	r2, #2
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c50:	f003 bc24 	b.w	800649c <cw_unpack_next+0x49b0>
 8002c54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c64:	f5a3 74a6 	sub.w	r4, r3, #332	; 0x14c
 8002c68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c70:	2101      	movs	r1, #1
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4790      	blx	r2
 8002c76:	6020      	str	r0, [r4, #0]
 8002c78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c7c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d02e      	beq.n	8002ce4 <cw_unpack_next+0x11f8>
 8002c86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d014      	beq.n	8002cc0 <cw_unpack_next+0x11d4>
 8002c96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002caa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002cb4:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
 8002cbc:	f003 bbee 	b.w	800649c <cw_unpack_next+0x49b0>
 8002cc0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cc4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cd4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0202 	mvn.w	r2, #2
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce0:	f003 bbdc 	b.w	800649c <cw_unpack_next+0x49b0>
 8002ce4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ce8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002cf4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002cfe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002d0c:	61d3      	str	r3, [r2, #28]
                    unpack_context->item.type = *(int8_t*)p;
 8002d0e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002d12:	f993 3000 	ldrsb.w	r3, [r3]
 8002d16:	b219      	sxth	r1, r3
 8002d18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d1c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	460b      	mov	r3, r1
 8002d24:	8013      	strh	r3, [r2, #0]
                    if (unpack_context->item.type == CWP_ITEM_TIMESTAMP)
 8002d26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d2a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	f040 822c 	bne.w	8003194 <cw_unpack_next+0x16a8>
                    {
                        if (unpack_context->item.as.ext.length == 12)
 8002d3c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d40:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	f040 8211 	bne.w	8003170 <cw_unpack_next+0x1684>
                        {
                            cw_unpack_assert_space(4);
 8002d4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d52:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002d5e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002d62:	3304      	adds	r3, #4
 8002d64:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8002d68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d96e      	bls.n	8002e5a <cw_unpack_next+0x136e>
 8002d7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d111      	bne.n	8002db0 <cw_unpack_next+0x12c4>
 8002d8c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d90:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002da0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0202 	mvn.w	r2, #2
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
 8002dac:	f003 bb76 	b.w	800649c <cw_unpack_next+0x49b0>
 8002db0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002db4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002dc0:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 8002dc4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002dc8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dcc:	2104      	movs	r1, #4
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	4790      	blx	r2
 8002dd2:	6020      	str	r0, [r4, #0]
 8002dd4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002dd8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02e      	beq.n	8002e40 <cw_unpack_next+0x1354>
 8002de2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002de6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d014      	beq.n	8002e1c <cw_unpack_next+0x1330>
 8002df2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002df6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e06:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002e10:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
 8002e18:	f003 bb40 	b.w	800649c <cw_unpack_next+0x49b0>
 8002e1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e20:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e30:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f06f 0202 	mvn.w	r2, #2
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3c:	f003 bb2e 	b.w	800649c <cw_unpack_next+0x49b0>
 8002e40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002e50:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e54:	3304      	adds	r3, #4
 8002e56:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8002e5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e5e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8002e68:	61d3      	str	r3, [r2, #28]
                            cw_load32(p);
 8002e6a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e74:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e7e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	061a      	lsls	r2, r3, #24
 8002e86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e8a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e96:	431a      	orrs	r2, r3
 8002e98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e9c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002eae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ebc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002ec0:	601a      	str	r2, [r3, #0]
                            unpack_context->item.as.time.tv_nsec = (long)tmpu32;
 8002ec2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ec6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ed2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]
                            cw_unpack_assert_space(8);
 8002eda:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ede:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002eea:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002eee:	3308      	adds	r3, #8
 8002ef0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002ef4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ef8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d96e      	bls.n	8002fe6 <cw_unpack_next+0x14fa>
 8002f08:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f0c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <cw_unpack_next+0x1450>
 8002f18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f1c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f06f 0202 	mvn.w	r2, #2
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
 8002f38:	f003 bab0 	b.w	800649c <cw_unpack_next+0x49b0>
 8002f3c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f40:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f4c:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8002f50:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f54:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f58:	2108      	movs	r1, #8
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	4790      	blx	r2
 8002f5e:	6020      	str	r0, [r4, #0]
 8002f60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f64:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02e      	beq.n	8002fcc <cw_unpack_next+0x14e0>
 8002f6e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f72:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d014      	beq.n	8002fa8 <cw_unpack_next+0x14bc>
 8002f7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f82:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f8c:	801a      	strh	r2, [r3, #0]
 8002f8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002f9c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fa4:	f003 ba7a 	b.w	800649c <cw_unpack_next+0x49b0>
 8002fa8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fbc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f06f 0202 	mvn.w	r2, #2
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc8:	f003 ba68 	b.w	800649c <cw_unpack_next+0x49b0>
 8002fcc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002fdc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002fe6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002ff4:	61d3      	str	r3, [r2, #28]
                            cw_load64(p,unpack_context->item.as.time.tv_sec);
 8002ff6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8003002:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003006:	0a1a      	lsrs	r2, r3, #8
 8003008:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003014:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003018:	0a1a      	lsrs	r2, r3, #8
 800301a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003026:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800302a:	460b      	mov	r3, r1
 800302c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003030:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003034:	4613      	mov	r3, r2
 8003036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800303a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800303e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003048:	0e1b      	lsrs	r3, r3, #24
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003050:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800305a:	0e1b      	lsrs	r3, r3, #24
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8003062:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 8003066:	460b      	mov	r3, r1
 8003068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800306c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003070:	4613      	mov	r3, r2
 8003072:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003076:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800307a:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800307e:	4623      	mov	r3, r4
 8003080:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8003084:	4602      	mov	r2, r0
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800308c:	462b      	mov	r3, r5
 800308e:	460a      	mov	r2, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003096:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0a10      	lsrs	r0, r2, #8
 80030a4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80030a8:	0a19      	lsrs	r1, r3, #8
 80030aa:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80030ae:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030b8:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80030bc:	4623      	mov	r3, r4
 80030be:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80030c2:	4602      	mov	r2, r0
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80030ca:	462b      	mov	r3, r5
 80030cc:	460a      	mov	r2, r1
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80030d4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	020b      	lsls	r3, r1, #8
 80030e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030e6:	0202      	lsls	r2, r0, #8
 80030e8:	2100      	movs	r1, #0
 80030ea:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 80030ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80030f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80030f6:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 80030fa:	4623      	mov	r3, r4
 80030fc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8003100:	4602      	mov	r2, r0
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003108:	462b      	mov	r3, r5
 800310a:	460a      	mov	r2, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003112:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	0e0a      	lsrs	r2, r1, #24
 8003120:	2300      	movs	r3, #0
 8003122:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8003126:	4621      	mov	r1, r4
 8003128:	4311      	orrs	r1, r2
 800312a:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800312e:	4629      	mov	r1, r5
 8003130:	4319      	orrs	r1, r3
 8003132:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8003136:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	0603      	lsls	r3, r0, #24
 8003144:	2200      	movs	r2, #0
 8003146:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800314a:	4621      	mov	r1, r4
 800314c:	4311      	orrs	r1, r2
 800314e:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8003152:	4629      	mov	r1, r5
 8003154:	4319      	orrs	r1, r3
 8003156:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800315a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800315e:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8003162:	f5a1 71be 	sub.w	r1, r1, #380	; 0x17c
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	e9c1 2302 	strd	r2, r3, [r1, #8]
                            return;
 800316c:	f003 b996 	b.w	800649c <cw_unpack_next+0x49b0>
                        }
                        UNPACK_ERROR(CWP_RC_WRONG_TIMESTAMP_LENGTH)
 8003170:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003174:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800317e:	801a      	strh	r2, [r3, #0]
 8003180:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003184:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 020b 	mvn.w	r2, #11
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
 8003190:	f003 b984 	b.w	800649c <cw_unpack_next+0x49b0>
                    }
                    cw_unpack_assert_blob(ext);
 8003194:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003198:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80031a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80031b4:	4413      	add	r3, r2
 80031b6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80031ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d979      	bls.n	80032c2 <cw_unpack_next+0x17d6>
 80031ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d111      	bne.n	8003202 <cw_unpack_next+0x1716>
 80031de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0202 	mvn.w	r2, #2
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24
 80031fe:	f003 b94d 	b.w	800649c <cw_unpack_next+0x49b0>
 8003202:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003206:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003212:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	68d1      	ldr	r1, [r2, #12]
 800321a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800321e:	f5a2 74a8 	sub.w	r4, r2, #336	; 0x150
 8003222:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003226:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800322a:	6810      	ldr	r0, [r2, #0]
 800322c:	4798      	blx	r3
 800322e:	6020      	str	r0, [r4, #0]
 8003230:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003234:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02e      	beq.n	800329c <cw_unpack_next+0x17b0>
 800323e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003242:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d014      	beq.n	8003278 <cw_unpack_next+0x178c>
 800324e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003252:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f240 32e7 	movw	r2, #999	; 0x3e7
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003262:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800326c:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
 8003274:	f003 b912 	b.w	800649c <cw_unpack_next+0x49b0>
 8003278:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800327c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800328c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f06f 0202 	mvn.w	r2, #2
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
 8003298:	f003 b900 	b.w	800649c <cw_unpack_next+0x49b0>
 800329c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032a0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80032ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80032bc:	4413      	add	r3, r2
 80032be:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80032c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80032d0:	61da      	str	r2, [r3, #28]
 80032d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	f003 b8db 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc8:  getDDItem2(CWP_ITEM_EXT, ext.length, uint16_t);             // ext 16
 80032e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 729b 	mov.w	r2, #310	; 0x136
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003306:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800330a:	3302      	adds	r3, #2
 800330c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8003310:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003314:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8003320:	429a      	cmp	r2, r3
 8003322:	d96e      	bls.n	8003402 <cw_unpack_next+0x1916>
 8003324:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003328:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <cw_unpack_next+0x186c>
 8003334:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003338:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003348:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0202 	mvn.w	r2, #2
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
 8003354:	f003 b8a2 	b.w	800649c <cw_unpack_next+0x49b0>
 8003358:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800335c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003368:	f5a2 749e 	sub.w	r4, r2, #316	; 0x13c
 800336c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003370:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003374:	2102      	movs	r1, #2
 8003376:	6810      	ldr	r0, [r2, #0]
 8003378:	4798      	blx	r3
 800337a:	6020      	str	r0, [r4, #0]
 800337c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003380:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02e      	beq.n	80033e8 <cw_unpack_next+0x18fc>
 800338a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800338e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d014      	beq.n	80033c4 <cw_unpack_next+0x18d8>
 800339a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800339e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80033b8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
 80033c0:	f003 b86c 	b.w	800649c <cw_unpack_next+0x49b0>
 80033c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0202 	mvn.w	r2, #2
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
 80033e4:	f003 b85a 	b.w	800649c <cw_unpack_next+0x49b0>
 80033e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80033f8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80033fc:	3302      	adds	r3, #2
 80033fe:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8003402:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003406:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8003410:	61da      	str	r2, [r3, #28]
 8003412:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 800341c:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	b21a      	sxth	r2, r3
 8003424:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	b29b      	uxth	r3, r3
 800342c:	b21b      	sxth	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	b21b      	sxth	r3, r3
 8003432:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8003436:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 800343a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800343e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8003446:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800344a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003456:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800345a:	3301      	adds	r3, #1
 800345c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8003460:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003464:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8003470:	429a      	cmp	r2, r3
 8003472:	d96e      	bls.n	8003552 <cw_unpack_next+0x1a66>
 8003474:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003478:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d111      	bne.n	80034a8 <cw_unpack_next+0x19bc>
 8003484:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003488:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003498:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f06f 0202 	mvn.w	r2, #2
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
 80034a4:	f002 bffa 	b.w	800649c <cw_unpack_next+0x49b0>
 80034a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80034ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80034b8:	f5a2 74a0 	sub.w	r4, r2, #320	; 0x140
 80034bc:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80034c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034c4:	2101      	movs	r1, #1
 80034c6:	6810      	ldr	r0, [r2, #0]
 80034c8:	4798      	blx	r3
 80034ca:	6020      	str	r0, [r4, #0]
 80034cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80034d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02e      	beq.n	8003538 <cw_unpack_next+0x1a4c>
 80034da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80034de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d014      	beq.n	8003514 <cw_unpack_next+0x1a28>
 80034ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80034ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80034fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003508:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
 8003510:	f002 bfc4 	b.w	800649c <cw_unpack_next+0x49b0>
 8003514:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003518:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003528:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0202 	mvn.w	r2, #2
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
 8003534:	f002 bfb2 	b.w	800649c <cw_unpack_next+0x49b0>
 8003538:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800353c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003548:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800354c:	3301      	adds	r3, #1
 800354e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8003552:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003556:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8003560:	61da      	str	r2, [r3, #28]
                    unpack_context->item.type = *(int8_t*)p;
 8003562:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003566:	f993 3000 	ldrsb.w	r3, [r3]
 800356a:	b21a      	sxth	r2, r3
 800356c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003570:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_blob(ext);
 8003578:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800357c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003588:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800358c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003598:	4413      	add	r3, r2
 800359a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800359e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d979      	bls.n	80036a6 <cw_unpack_next+0x1bba>
 80035b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d111      	bne.n	80035e6 <cw_unpack_next+0x1afa>
 80035c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
 80035e2:	f002 bf5b 	b.w	800649c <cw_unpack_next+0x49b0>
 80035e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80035f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	68d1      	ldr	r1, [r2, #12]
 80035fe:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003602:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
 8003606:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800360a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800360e:	6810      	ldr	r0, [r2, #0]
 8003610:	4798      	blx	r3
 8003612:	6020      	str	r0, [r4, #0]
 8003614:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003618:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02e      	beq.n	8003680 <cw_unpack_next+0x1b94>
 8003622:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003626:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d014      	beq.n	800365c <cw_unpack_next+0x1b70>
 8003632:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003636:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003646:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003650:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
 8003658:	f002 bf20 	b.w	800649c <cw_unpack_next+0x49b0>
 800365c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003660:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f240 32e7 	movw	r2, #999	; 0x3e7
 800366a:	801a      	strh	r2, [r3, #0]
 800366c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003670:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0202 	mvn.w	r2, #2
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
 800367c:	f002 bf0e 	b.w	800649c <cw_unpack_next+0x49b0>
 8003680:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003684:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003690:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003694:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80036a0:	4413      	add	r3, r2
 80036a2:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80036a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 80036b4:	61da      	str	r2, [r3, #28]
 80036b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	f002 bee9 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xc9:  getDDItem4(CWP_ITEM_EXT, ext.length, uint32_t);             // ext 32
 80036ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f44f 729b 	mov.w	r2, #310	; 0x136
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80036ea:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80036ee:	3304      	adds	r3, #4
 80036f0:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 80036f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8003704:	429a      	cmp	r2, r3
 8003706:	d96e      	bls.n	80037e6 <cw_unpack_next+0x1cfa>
 8003708:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800370c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d111      	bne.n	800373c <cw_unpack_next+0x1c50>
 8003718:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800371c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800372c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0202 	mvn.w	r2, #2
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
 8003738:	f002 beb0 	b.w	800649c <cw_unpack_next+0x49b0>
 800373c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003740:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800374c:	f5a2 7498 	sub.w	r4, r2, #304	; 0x130
 8003750:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003754:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003758:	2104      	movs	r1, #4
 800375a:	6810      	ldr	r0, [r2, #0]
 800375c:	4798      	blx	r3
 800375e:	6020      	str	r0, [r4, #0]
 8003760:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02e      	beq.n	80037cc <cw_unpack_next+0x1ce0>
 800376e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d014      	beq.n	80037a8 <cw_unpack_next+0x1cbc>
 800377e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003782:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003792:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800379c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
 80037a4:	f002 be7a 	b.w	800649c <cw_unpack_next+0x49b0>
 80037a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0202 	mvn.w	r2, #2
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24
 80037c8:	f002 be68 	b.w	800649c <cw_unpack_next+0x49b0>
 80037cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80037dc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80037e0:	3304      	adds	r3, #4
 80037e2:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 80037e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80037f4:	61da      	str	r2, [r3, #28]
 80037f6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003800:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800380a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	061a      	lsls	r2, r3, #24
 8003812:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003816:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003822:	431a      	orrs	r2, r3
 8003824:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003828:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003834:	431a      	orrs	r2, r3
 8003836:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800383a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e1b      	lsrs	r3, r3, #24
 8003842:	431a      	orrs	r2, r3
 8003844:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003848:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003852:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800385c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8003864:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003868:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003874:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003878:	3301      	adds	r3, #1
 800387a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800387e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003882:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 800388e:	429a      	cmp	r2, r3
 8003890:	d96e      	bls.n	8003970 <cw_unpack_next+0x1e84>
 8003892:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003896:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d111      	bne.n	80038c6 <cw_unpack_next+0x1dda>
 80038a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0202 	mvn.w	r2, #2
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
 80038c2:	f002 bdeb 	b.w	800649c <cw_unpack_next+0x49b0>
 80038c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80038d6:	f5a2 749a 	sub.w	r4, r2, #308	; 0x134
 80038da:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80038de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038e2:	2101      	movs	r1, #1
 80038e4:	6810      	ldr	r0, [r2, #0]
 80038e6:	4798      	blx	r3
 80038e8:	6020      	str	r0, [r4, #0]
 80038ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02e      	beq.n	8003956 <cw_unpack_next+0x1e6a>
 80038f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d014      	beq.n	8003932 <cw_unpack_next+0x1e46>
 8003908:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800390c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800391c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003926:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
 800392e:	f002 bdb5 	b.w	800649c <cw_unpack_next+0x49b0>
 8003932:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003936:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003946:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0202 	mvn.w	r2, #2
 8003950:	625a      	str	r2, [r3, #36]	; 0x24
 8003952:	f002 bda3 	b.w	800649c <cw_unpack_next+0x49b0>
 8003956:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800395a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003966:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800396a:	3301      	adds	r3, #1
 800396c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8003970:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003974:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 800397e:	61da      	str	r2, [r3, #28]
                    unpack_context->item.type = *(int8_t*)p;
 8003980:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003984:	f993 3000 	ldrsb.w	r3, [r3]
 8003988:	b21a      	sxth	r2, r3
 800398a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800398e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_blob(ext);
 8003996:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800399a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80039a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80039b6:	4413      	add	r3, r2
 80039b8:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 80039bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d979      	bls.n	8003ac4 <cw_unpack_next+0x1fd8>
 80039d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d111      	bne.n	8003a04 <cw_unpack_next+0x1f18>
 80039e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0202 	mvn.w	r2, #2
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003a00:	f002 bd4c 	b.w	800649c <cw_unpack_next+0x49b0>
 8003a04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003a14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	68d1      	ldr	r1, [r2, #12]
 8003a1c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003a20:	f5a2 749c 	sub.w	r4, r2, #312	; 0x138
 8003a24:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003a28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a2c:	6810      	ldr	r0, [r2, #0]
 8003a2e:	4798      	blx	r3
 8003a30:	6020      	str	r0, [r4, #0]
 8003a32:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02e      	beq.n	8003a9e <cw_unpack_next+0x1fb2>
 8003a40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a44:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d014      	beq.n	8003a7a <cw_unpack_next+0x1f8e>
 8003a50:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a54:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a64:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003a6e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
 8003a76:	f002 bd11 	b.w	800649c <cw_unpack_next+0x49b0>
 8003a7a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a7e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a8e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0202 	mvn.w	r2, #2
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
 8003a9a:	f002 bcff 	b.w	800649c <cw_unpack_next+0x49b0>
 8003a9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003aa2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003aae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ab2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003abe:	4413      	add	r3, r2
 8003ac0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8003ac4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ac8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8003ad2:	61da      	str	r2, [r3, #28]
 8003ad4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ad8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	f002 bcda 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xca:  unpack_context->item.type = CWP_ITEM_FLOAT;                 // float
 8003ae8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003aec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 7298 	mov.w	r2, #304	; 0x130
 8003af6:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_space(4);
 8003af8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003afc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003b08:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8003b12:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b16:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d96e      	bls.n	8003c04 <cw_unpack_next+0x2118>
 8003b26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b2a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d111      	bne.n	8003b5a <cw_unpack_next+0x206e>
 8003b36:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b3a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b4a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0202 	mvn.w	r2, #2
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
 8003b56:	f002 bca1 	b.w	800649c <cw_unpack_next+0x49b0>
 8003b5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b5e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003b6a:	f5a2 7496 	sub.w	r4, r2, #300	; 0x12c
 8003b6e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003b72:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b76:	2104      	movs	r1, #4
 8003b78:	6810      	ldr	r0, [r2, #0]
 8003b7a:	4798      	blx	r3
 8003b7c:	6020      	str	r0, [r4, #0]
 8003b7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02e      	beq.n	8003bea <cw_unpack_next+0x20fe>
 8003b8c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d014      	beq.n	8003bc6 <cw_unpack_next+0x20da>
 8003b9c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ba0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003bb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003bba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8003bc2:	f002 bc6b 	b.w	800649c <cw_unpack_next+0x49b0>
 8003bc6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003bca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003bda:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
 8003be6:	f002 bc59 	b.w	800649c <cw_unpack_next+0x49b0>
 8003bea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003bee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003bfa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003bfe:	3304      	adds	r3, #4
 8003c00:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8003c04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8003c12:	61da      	str	r2, [r3, #28]
                    cw_load32(p);
 8003c14:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c28:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	061a      	lsls	r2, r3, #24
 8003c30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c34:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c40:	431a      	orrs	r2, r3
 8003c42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c46:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c52:	431a      	orrs	r2, r3
 8003c54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c58:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	0e1b      	lsrs	r3, r3, #24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c66:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c6a:	601a      	str	r2, [r3, #0]
                    unpack_context->item.as.real = *(float*)&tmpu32;     return;
 8003c6c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	f002 bc0d 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xcb:  getDDItem8(CWP_ITEM_DOUBLE);                         return;  // double
 8003c82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f240 1331 	movw	r3, #305	; 0x131
 8003c90:	8013      	strh	r3, [r2, #0]
 8003c92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003ca2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8003cac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d96e      	bls.n	8003d9e <cw_unpack_next+0x22b2>
 8003cc0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cc4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <cw_unpack_next+0x2208>
 8003cd0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cd4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ce4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f06f 0202 	mvn.w	r2, #2
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24
 8003cf0:	f002 bbd4 	b.w	800649c <cw_unpack_next+0x49b0>
 8003cf4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cf8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d04:	f5a3 7494 	sub.w	r4, r3, #296	; 0x128
 8003d08:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d0c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d10:	2108      	movs	r1, #8
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	4790      	blx	r2
 8003d16:	6020      	str	r0, [r4, #0]
 8003d18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02e      	beq.n	8003d84 <cw_unpack_next+0x2298>
 8003d26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d014      	beq.n	8003d60 <cw_unpack_next+0x2274>
 8003d36:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d3a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d4a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003d54:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d5c:	f002 bb9e 	b.w	800649c <cw_unpack_next+0x49b0>
 8003d60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d64:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d74:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0202 	mvn.w	r2, #2
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d80:	f002 bb8c 	b.w	800649c <cw_unpack_next+0x49b0>
 8003d84:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d88:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003d94:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003d98:	3308      	adds	r3, #8
 8003d9a:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8003d9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003da2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8003dac:	61d3      	str	r3, [r2, #28]
 8003dae:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8003dba:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003dbe:	0a1a      	lsrs	r2, r3, #8
 8003dc0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	ea42 0603 	orr.w	r6, r2, r3
 8003dca:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003dce:	0a1a      	lsrs	r2, r3, #8
 8003dd0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	ea42 0503 	orr.w	r5, r2, r3
 8003dda:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 8003dde:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003de2:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8003de6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003dea:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003dee:	021a      	lsls	r2, r3, #8
 8003df0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dfc:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003e00:	021a      	lsls	r2, r3, #8
 8003e02:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003e06:	0e1b      	lsrs	r3, r3, #24
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e0e:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003e12:	460b      	mov	r3, r1
 8003e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e18:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e26:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003e30:	4602      	mov	r2, r0
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003e38:	462b      	mov	r3, r5
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003e42:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8003e46:	f04f 0000 	mov.w	r0, #0
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	0a10      	lsrs	r0, r2, #8
 8003e50:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003e54:	0a19      	lsrs	r1, r3, #8
 8003e56:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8003e5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003e64:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8003e68:	4623      	mov	r3, r4
 8003e6a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003e76:	462b      	mov	r3, r5
 8003e78:	460a      	mov	r2, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003e80:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	020b      	lsls	r3, r1, #8
 8003e8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e92:	0202      	lsls	r2, r0, #8
 8003e94:	2100      	movs	r1, #0
 8003e96:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8003e9a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003e9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003ea2:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003eac:	4602      	mov	r2, r0
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ebe:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	0e0a      	lsrs	r2, r1, #24
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8003eda:	4629      	mov	r1, r5
 8003edc:	4319      	orrs	r1, r3
 8003ede:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8003ee2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	0603      	lsls	r3, r0, #24
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8003efe:	4629      	mov	r1, r5
 8003f00:	4319      	orrs	r1, r3
 8003f02:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8003f06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8003f14:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8003f18:	f002 bac0 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xcc:  getDDItem1(CWP_ITEM_POSITIVE_INTEGER, u64, uint8_t); return;  // unsigned int  8
 8003f1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f20:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f30:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003f3c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8003f46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f4a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d96e      	bls.n	8004038 <cw_unpack_next+0x254c>
 8003f5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f5e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d111      	bne.n	8003f8e <cw_unpack_next+0x24a2>
 8003f6a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f6e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f7e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
 8003f8a:	f002 ba87 	b.w	800649c <cw_unpack_next+0x49b0>
 8003f8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003f9e:	f5a2 7492 	sub.w	r4, r2, #292	; 0x124
 8003fa2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003fa6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003faa:	2101      	movs	r1, #1
 8003fac:	6810      	ldr	r0, [r2, #0]
 8003fae:	4798      	blx	r3
 8003fb0:	6020      	str	r0, [r4, #0]
 8003fb2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fb6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d02e      	beq.n	800401e <cw_unpack_next+0x2532>
 8003fc0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d014      	beq.n	8003ffa <cw_unpack_next+0x250e>
 8003fd0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fd4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fe4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003fee:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ff6:	f002 ba51 	b.w	800649c <cw_unpack_next+0x49b0>
 8003ffa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ffe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800400e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0202 	mvn.w	r2, #2
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
 800401a:	f002 ba3f 	b.w	800649c <cw_unpack_next+0x49b0>
 800401e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004022:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800402e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004032:	3301      	adds	r3, #1
 8004034:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8004038:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800403c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8004046:	61da      	str	r2, [r3, #28]
 8004048:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004056:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800405a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800405e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8004068:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800406c:	f002 ba16 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xcd:  getDDItem2(CWP_ITEM_POSITIVE_INTEGER, u64, uint16_t); return; // unsigned int 16
 8004070:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004074:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004084:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004090:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004094:	3302      	adds	r3, #2
 8004096:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800409a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800409e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d96e      	bls.n	800418c <cw_unpack_next+0x26a0>
 80040ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d111      	bne.n	80040e2 <cw_unpack_next+0x25f6>
 80040be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0202 	mvn.w	r2, #2
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
 80040de:	f002 b9dd 	b.w	800649c <cw_unpack_next+0x49b0>
 80040e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80040f2:	f5a2 7490 	sub.w	r4, r2, #288	; 0x120
 80040f6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80040fa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80040fe:	2102      	movs	r1, #2
 8004100:	6810      	ldr	r0, [r2, #0]
 8004102:	4798      	blx	r3
 8004104:	6020      	str	r0, [r4, #0]
 8004106:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800410a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02e      	beq.n	8004172 <cw_unpack_next+0x2686>
 8004114:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004118:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d014      	beq.n	800414e <cw_unpack_next+0x2662>
 8004124:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004128:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004138:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004142:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
 800414a:	f002 b9a7 	b.w	800649c <cw_unpack_next+0x49b0>
 800414e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004152:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f240 32e7 	movw	r2, #999	; 0x3e7
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004162:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0202 	mvn.w	r2, #2
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
 800416e:	f002 b995 	b.w	800649c <cw_unpack_next+0x49b0>
 8004172:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004176:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004182:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004186:	3302      	adds	r3, #2
 8004188:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800418c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004190:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800419a:	61da      	str	r2, [r3, #28]
 800419c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80041a6:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b21a      	sxth	r2, r3
 80041ae:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b21b      	sxth	r3, r3
 80041bc:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80041c0:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80041ca:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80041ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80041dc:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80041e0:	f002 b95c 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xce:  getDDItem4(CWP_ITEM_POSITIVE_INTEGER, u64, uint32_t); return; // unsigned int 32
 80041e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004204:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004208:	3304      	adds	r3, #4
 800420a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800420e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004212:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800421e:	429a      	cmp	r2, r3
 8004220:	d96e      	bls.n	8004300 <cw_unpack_next+0x2814>
 8004222:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004226:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d111      	bne.n	8004256 <cw_unpack_next+0x276a>
 8004232:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004236:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004246:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0202 	mvn.w	r2, #2
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
 8004252:	f002 b923 	b.w	800649c <cw_unpack_next+0x49b0>
 8004256:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800425a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004266:	f5a2 748e 	sub.w	r4, r2, #284	; 0x11c
 800426a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800426e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004272:	2104      	movs	r1, #4
 8004274:	6810      	ldr	r0, [r2, #0]
 8004276:	4798      	blx	r3
 8004278:	6020      	str	r0, [r4, #0]
 800427a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800427e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d02e      	beq.n	80042e6 <cw_unpack_next+0x27fa>
 8004288:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800428c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d014      	beq.n	80042c2 <cw_unpack_next+0x27d6>
 8004298:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800429c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80042ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80042b6:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
 80042be:	f002 b8ed 	b.w	800649c <cw_unpack_next+0x49b0>
 80042c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80042c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80042d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
 80042e2:	f002 b8db 	b.w	800649c <cw_unpack_next+0x49b0>
 80042e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80042ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80042f6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80042fa:	3304      	adds	r3, #4
 80042fc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004300:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004304:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800430e:	61da      	str	r2, [r3, #28]
 8004310:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800431a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004324:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	061a      	lsls	r2, r3, #24
 800432c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004330:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800433c:	431a      	orrs	r2, r3
 800433e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004342:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800434e:	431a      	orrs	r2, r3
 8004350:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004354:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	431a      	orrs	r2, r3
 800435e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004362:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800436c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004378:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800437c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004380:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800438a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800438e:	f002 b885 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xcf:  getDDItem8(CWP_ITEM_POSITIVE_INTEGER);               return;  // unsigned int 64
 8004392:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004396:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80043a0:	8013      	strh	r3, [r2, #0]
 80043a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80043b2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80043b6:	3308      	adds	r3, #8
 80043b8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80043bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d96e      	bls.n	80044ae <cw_unpack_next+0x29c2>
 80043d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d111      	bne.n	8004404 <cw_unpack_next+0x2918>
 80043e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0202 	mvn.w	r2, #2
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004400:	f002 b84c 	b.w	800649c <cw_unpack_next+0x49b0>
 8004404:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004408:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004414:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8004418:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800441c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004420:	2108      	movs	r1, #8
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	4790      	blx	r2
 8004426:	6020      	str	r0, [r4, #0]
 8004428:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800442c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02e      	beq.n	8004494 <cw_unpack_next+0x29a8>
 8004436:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800443a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d014      	beq.n	8004470 <cw_unpack_next+0x2984>
 8004446:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800444a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800445a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004464:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
 800446c:	f002 b816 	b.w	800649c <cw_unpack_next+0x49b0>
 8004470:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004474:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004484:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0202 	mvn.w	r2, #2
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
 8004490:	f002 b804 	b.w	800649c <cw_unpack_next+0x49b0>
 8004494:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004498:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80044a4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80044a8:	3308      	adds	r3, #8
 80044aa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80044ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80044bc:	61d3      	str	r3, [r2, #28]
 80044be:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 80044ca:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80044ce:	0a1a      	lsrs	r2, r3, #8
 80044d0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	ea42 0b03 	orr.w	fp, r2, r3
 80044da:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80044de:	0a1a      	lsrs	r2, r3, #8
 80044e0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	ea42 0a03 	orr.w	sl, r2, r3
 80044ea:	f40a 437f 	and.w	r3, sl, #65280	; 0xff00
 80044ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044f2:	f40b 437f 	and.w	r3, fp, #65280	; 0xff00
 80044f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044fa:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004504:	0e1b      	lsrs	r3, r3, #24
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800450c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004516:	0e1b      	lsrs	r3, r3, #24
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800451e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004522:	460b      	mov	r3, r1
 8004524:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004528:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800452c:	4613      	mov	r3, r2
 800452e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004536:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800453a:	4623      	mov	r3, r4
 800453c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004540:	4602      	mov	r2, r0
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004548:	462b      	mov	r3, r5
 800454a:	460a      	mov	r2, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004552:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004556:	f04f 0000 	mov.w	r0, #0
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	0a10      	lsrs	r0, r2, #8
 8004560:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004564:	0a19      	lsrs	r1, r3, #8
 8004566:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 800456a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004574:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004578:	4623      	mov	r3, r4
 800457a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800457e:	4602      	mov	r2, r0
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004586:	462b      	mov	r3, r5
 8004588:	460a      	mov	r2, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004590:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	020b      	lsls	r3, r1, #8
 800459e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045a2:	0202      	lsls	r2, r0, #8
 80045a4:	2100      	movs	r1, #0
 80045a6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80045aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80045ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045b2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80045b6:	4623      	mov	r3, r4
 80045b8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80045bc:	4602      	mov	r2, r0
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045c4:	462b      	mov	r3, r5
 80045c6:	460a      	mov	r2, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045ce:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	0e0a      	lsrs	r2, r1, #24
 80045dc:	2300      	movs	r3, #0
 80045de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045e2:	4621      	mov	r1, r4
 80045e4:	4311      	orrs	r1, r2
 80045e6:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80045ea:	4629      	mov	r1, r5
 80045ec:	4319      	orrs	r1, r3
 80045ee:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80045f2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	0603      	lsls	r3, r0, #24
 8004600:	2200      	movs	r2, #0
 8004602:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004606:	4621      	mov	r1, r4
 8004608:	4311      	orrs	r1, r2
 800460a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800460e:	4629      	mov	r1, r5
 8004610:	4319      	orrs	r1, r3
 8004612:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004616:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800461a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004624:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004628:	f001 bf38 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xd0:  getDDItem1(CWP_ITEM_NEGATIVE_INTEGER, i64, int8_t);          // signed int  8
 800462c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004630:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f240 122f 	movw	r2, #303	; 0x12f
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004640:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800464c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004650:	3301      	adds	r3, #1
 8004652:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8004656:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800465a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8004666:	429a      	cmp	r2, r3
 8004668:	d96e      	bls.n	8004748 <cw_unpack_next+0x2c5c>
 800466a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800466e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d111      	bne.n	800469e <cw_unpack_next+0x2bb2>
 800467a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800467e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800468e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0202 	mvn.w	r2, #2
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
 800469a:	f001 beff 	b.w	800649c <cw_unpack_next+0x49b0>
 800469e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80046ae:	f5a2 748a 	sub.w	r4, r2, #276	; 0x114
 80046b2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80046b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80046ba:	2101      	movs	r1, #1
 80046bc:	6810      	ldr	r0, [r2, #0]
 80046be:	4798      	blx	r3
 80046c0:	6020      	str	r0, [r4, #0]
 80046c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02e      	beq.n	800472e <cw_unpack_next+0x2c42>
 80046d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d014      	beq.n	800470a <cw_unpack_next+0x2c1e>
 80046e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80046fe:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
 8004706:	f001 bec9 	b.w	800649c <cw_unpack_next+0x49b0>
 800470a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800470e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800471e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0202 	mvn.w	r2, #2
 8004728:	625a      	str	r2, [r3, #36]	; 0x24
 800472a:	f001 beb7 	b.w	800649c <cw_unpack_next+0x49b0>
 800472e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004732:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800473e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004742:	3301      	adds	r3, #1
 8004744:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8004748:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800474c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8004756:	61da      	str	r2, [r3, #28]
 8004758:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b25b      	sxtb	r3, r3
 8004760:	b25b      	sxtb	r3, r3
 8004762:	17da      	asrs	r2, r3, #31
 8004764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004768:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800476c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004770:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800477a:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 800477e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004782:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f2c1 867e 	blt.w	800648e <cw_unpack_next+0x49a2>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8004792:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004796:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80047a0:	801a      	strh	r2, [r3, #0]
                    return;
 80047a2:	f001 be74 	b.w	800648e <cw_unpack_next+0x49a2>
        case 0xd1:  getDDItem2(CWP_ITEM_NEGATIVE_INTEGER, i64, int16_t);        // signed int 16
 80047a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f240 122f 	movw	r2, #303	; 0x12f
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80047c6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80047ca:	3302      	adds	r3, #2
 80047cc:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80047d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d96e      	bls.n	80048c2 <cw_unpack_next+0x2dd6>
 80047e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d111      	bne.n	8004818 <cw_unpack_next+0x2d2c>
 80047f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f06f 0202 	mvn.w	r2, #2
 8004812:	625a      	str	r2, [r3, #36]	; 0x24
 8004814:	f001 be42 	b.w	800649c <cw_unpack_next+0x49b0>
 8004818:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800481c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004828:	f5a2 7488 	sub.w	r4, r2, #272	; 0x110
 800482c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004830:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004834:	2102      	movs	r1, #2
 8004836:	6810      	ldr	r0, [r2, #0]
 8004838:	4798      	blx	r3
 800483a:	6020      	str	r0, [r4, #0]
 800483c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004840:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02e      	beq.n	80048a8 <cw_unpack_next+0x2dbc>
 800484a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800484e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d014      	beq.n	8004884 <cw_unpack_next+0x2d98>
 800485a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800485e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800486e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004878:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
 8004880:	f001 be0c 	b.w	800649c <cw_unpack_next+0x49b0>
 8004884:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004888:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004898:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f06f 0202 	mvn.w	r2, #2
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
 80048a4:	f001 bdfa 	b.w	800649c <cw_unpack_next+0x49b0>
 80048a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80048b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80048bc:	3302      	adds	r3, #2
 80048be:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80048c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 80048d0:	61da      	str	r2, [r3, #28]
 80048d2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80048dc:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	b21a      	sxth	r2, r3
 80048e4:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	b21b      	sxth	r3, r3
 80048ee:	4313      	orrs	r3, r2
 80048f0:	b21b      	sxth	r3, r3
 80048f2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80048f6:	f9b7 32aa 	ldrsh.w	r3, [r7, #682]	; 0x2aa
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	17da      	asrs	r2, r3, #31
 80048fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004902:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004906:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800490a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004914:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8004918:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800491c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f2c1 85b3 	blt.w	8006492 <cw_unpack_next+0x49a6>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 800492c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004930:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800493a:	801a      	strh	r2, [r3, #0]
                    return;
 800493c:	f001 bda9 	b.w	8006492 <cw_unpack_next+0x49a6>
        case 0xd2:  getDDItem4(CWP_ITEM_NEGATIVE_INTEGER, i64, int32_t);        // signed int 32
 8004940:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004944:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f240 122f 	movw	r2, #303	; 0x12f
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004954:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004960:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004964:	3304      	adds	r3, #4
 8004966:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800496a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800496e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800497a:	429a      	cmp	r2, r3
 800497c:	d96e      	bls.n	8004a5c <cw_unpack_next+0x2f70>
 800497e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004982:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d111      	bne.n	80049b2 <cw_unpack_next+0x2ec6>
 800498e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004992:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
 80049ae:	f001 bd75 	b.w	800649c <cw_unpack_next+0x49b0>
 80049b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80049c2:	f5a2 7486 	sub.w	r4, r2, #268	; 0x10c
 80049c6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80049ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049ce:	2104      	movs	r1, #4
 80049d0:	6810      	ldr	r0, [r2, #0]
 80049d2:	4798      	blx	r3
 80049d4:	6020      	str	r0, [r4, #0]
 80049d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02e      	beq.n	8004a42 <cw_unpack_next+0x2f56>
 80049e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d014      	beq.n	8004a1e <cw_unpack_next+0x2f32>
 80049f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004a12:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
 8004a1a:	f001 bd3f 	b.w	800649c <cw_unpack_next+0x49b0>
 8004a1e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a22:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a3e:	f001 bd2d 	b.w	800649c <cw_unpack_next+0x49b0>
 8004a42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a46:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004a52:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004a56:	3304      	adds	r3, #4
 8004a58:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8004a5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a60:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8004a6a:	61da      	str	r2, [r3, #28]
 8004a6c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a80:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	061a      	lsls	r2, r3, #24
 8004a88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a8c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a9e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ab0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0e1b      	lsrs	r3, r3, #24
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004abe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ac8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	17da      	asrs	r2, r3, #31
 8004ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004adc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ae6:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8004aea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004aee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f2c1 84cc 	blt.w	8006496 <cw_unpack_next+0x49aa>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8004afe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004b0c:	801a      	strh	r2, [r3, #0]
                    return;
 8004b0e:	f001 bcc2 	b.w	8006496 <cw_unpack_next+0x49aa>
        case 0xd3:  getDDItem8(CWP_ITEM_NEGATIVE_INTEGER);                      // signed int 64
 8004b12:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b16:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f240 132f 	movw	r3, #303	; 0x12f
 8004b20:	8013      	strh	r3, [r2, #0]
 8004b22:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b26:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004b32:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004b36:	3308      	adds	r3, #8
 8004b38:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004b3c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b40:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d96e      	bls.n	8004c2e <cw_unpack_next+0x3142>
 8004b50:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b54:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <cw_unpack_next+0x3098>
 8004b60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b64:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b74:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0202 	mvn.w	r2, #2
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b80:	f001 bc8c 	b.w	800649c <cw_unpack_next+0x49b0>
 8004b84:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b88:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b94:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 8004b98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ba0:	2108      	movs	r1, #8
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4790      	blx	r2
 8004ba6:	6020      	str	r0, [r4, #0]
 8004ba8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02e      	beq.n	8004c14 <cw_unpack_next+0x3128>
 8004bb6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d014      	beq.n	8004bf0 <cw_unpack_next+0x3104>
 8004bc6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bda:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004be4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
 8004bec:	f001 bc56 	b.w	800649c <cw_unpack_next+0x49b0>
 8004bf0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bf4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0202 	mvn.w	r2, #2
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8004c10:	f001 bc44 	b.w	800649c <cw_unpack_next+0x49b0>
 8004c14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004c24:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004c28:	3308      	adds	r3, #8
 8004c2a:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004c2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004c3c:	61d3      	str	r3, [r2, #28]
 8004c3e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8004c4a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004c4e:	0a1a      	lsrs	r2, r3, #8
 8004c50:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	ea42 0903 	orr.w	r9, r2, r3
 8004c5a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004c5e:	0a1a      	lsrs	r2, r3, #8
 8004c60:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	ea42 0803 	orr.w	r8, r2, r3
 8004c6a:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 8004c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c72:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8004c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c7a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c8c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004c90:	021a      	lsls	r2, r3, #8
 8004c92:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004c96:	0e1b      	lsrs	r3, r3, #24
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cac:	4613      	mov	r3, r2
 8004cae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cb6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8004cba:	4623      	mov	r3, r4
 8004cbc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cc8:	462b      	mov	r3, r5
 8004cca:	460a      	mov	r2, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cd2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004cd6:	f04f 0000 	mov.w	r0, #0
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	0a10      	lsrs	r0, r2, #8
 8004ce0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004ce4:	0a19      	lsrs	r1, r3, #8
 8004ce6:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8004cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cf4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cfe:	4602      	mov	r2, r0
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d06:	462b      	mov	r3, r5
 8004d08:	460a      	mov	r2, r1
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d10:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	020b      	lsls	r3, r1, #8
 8004d1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d22:	0202      	lsls	r2, r0, #8
 8004d24:	2100      	movs	r1, #0
 8004d26:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004d2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d36:	4623      	mov	r3, r4
 8004d38:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d44:	462b      	mov	r3, r5
 8004d46:	460a      	mov	r2, r1
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d4e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	0e0a      	lsrs	r2, r1, #24
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004d62:	4621      	mov	r1, r4
 8004d64:	4311      	orrs	r1, r2
 8004d66:	67b9      	str	r1, [r7, #120]	; 0x78
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4319      	orrs	r1, r3
 8004d6c:	67f9      	str	r1, [r7, #124]	; 0x7c
 8004d6e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	0603      	lsls	r3, r0, #24
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d82:	4621      	mov	r1, r4
 8004d84:	4311      	orrs	r1, r2
 8004d86:	6739      	str	r1, [r7, #112]	; 0x70
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4319      	orrs	r1, r3
 8004d8c:	6779      	str	r1, [r7, #116]	; 0x74
 8004d8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d9c:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8004da0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004da4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f2c1 8373 	blt.w	800649a <cw_unpack_next+0x49ae>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8004db4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004db8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004dc2:	801a      	strh	r2, [r3, #0]
                    return;
 8004dc4:	f001 bb69 	b.w	800649a <cw_unpack_next+0x49ae>
        case 0xd4:  getDDItemFix(1);                                            // fixext 1
 8004dc8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004dcc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004dd8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004ddc:	3302      	adds	r3, #2
 8004dde:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8004de2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004de6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d96e      	bls.n	8004ed4 <cw_unpack_next+0x33e8>
 8004df6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004dfa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d111      	bne.n	8004e2a <cw_unpack_next+0x333e>
 8004e06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0202 	mvn.w	r2, #2
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
 8004e26:	f001 bb39 	b.w	800649c <cw_unpack_next+0x49b0>
 8004e2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004e3a:	f5a2 7482 	sub.w	r4, r2, #260	; 0x104
 8004e3e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004e42:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e46:	2102      	movs	r1, #2
 8004e48:	6810      	ldr	r0, [r2, #0]
 8004e4a:	4798      	blx	r3
 8004e4c:	6020      	str	r0, [r4, #0]
 8004e4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02e      	beq.n	8004eba <cw_unpack_next+0x33ce>
 8004e5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d014      	beq.n	8004e96 <cw_unpack_next+0x33aa>
 8004e6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004e8a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24
 8004e92:	f001 bb03 	b.w	800649c <cw_unpack_next+0x49b0>
 8004e96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004eaa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0202 	mvn.w	r2, #2
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb6:	f001 baf1 	b.w	800649c <cw_unpack_next+0x49b0>
 8004eba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ebe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004eca:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004ece:	3302      	adds	r3, #2
 8004ed0:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8004ed4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ed8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8004ee2:	61da      	str	r2, [r3, #28]
 8004ee4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004eee:	f993 3000 	ldrsb.w	r3, [r3]
 8004ef2:	b21a      	sxth	r2, r3
 8004ef4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ef8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d111      	bne.n	8004f38 <cw_unpack_next+0x344c>
 8004f14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f06f 020b 	mvn.w	r2, #11
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
 8004f34:	f001 bab2 	b.w	800649c <cw_unpack_next+0x49b0>
 8004f38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2201      	movs	r2, #1
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f4a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004f54:	609a      	str	r2, [r3, #8]
 8004f56:	f001 baa1 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xd5:  getDDItemFix(2);                                            // fixext 2
 8004f5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f5e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004f6a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004f6e:	3303      	adds	r3, #3
 8004f70:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004f74:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f78:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d96e      	bls.n	8005066 <cw_unpack_next+0x357a>
 8004f88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <cw_unpack_next+0x34d0>
 8004f98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0202 	mvn.w	r2, #2
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8004fb8:	f001 ba70 	b.w	800649c <cw_unpack_next+0x49b0>
 8004fbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004fcc:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 8004fd0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004fd4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fd8:	2103      	movs	r1, #3
 8004fda:	6810      	ldr	r0, [r2, #0]
 8004fdc:	4798      	blx	r3
 8004fde:	6020      	str	r0, [r4, #0]
 8004fe0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fe4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02e      	beq.n	800504c <cw_unpack_next+0x3560>
 8004fee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ff2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d014      	beq.n	8005028 <cw_unpack_next+0x353c>
 8004ffe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005002:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005012:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800501c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
 8005024:	f001 ba3a 	b.w	800649c <cw_unpack_next+0x49b0>
 8005028:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800502c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800503c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0202 	mvn.w	r2, #2
 8005046:	625a      	str	r2, [r3, #36]	; 0x24
 8005048:	f001 ba28 	b.w	800649c <cw_unpack_next+0x49b0>
 800504c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005050:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800505c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005060:	3303      	adds	r3, #3
 8005062:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8005066:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800506a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8005074:	61da      	str	r2, [r3, #28]
 8005076:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8005080:	f993 3000 	ldrsb.w	r3, [r3]
 8005084:	b21a      	sxth	r2, r3
 8005086:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800508a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005096:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d111      	bne.n	80050ca <cw_unpack_next+0x35de>
 80050a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 020b 	mvn.w	r2, #11
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
 80050c6:	f001 b9e9 	b.w	800649c <cw_unpack_next+0x49b0>
 80050ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2202      	movs	r2, #2
 80050d6:	60da      	str	r2, [r3, #12]
 80050d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	f001 b9d8 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xd6:  getDDItemFix(4);                                            // fixext 4
 80050ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80050fc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005100:	3305      	adds	r3, #5
 8005102:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005106:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800510a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8005116:	429a      	cmp	r2, r3
 8005118:	d962      	bls.n	80051e0 <cw_unpack_next+0x36f4>
 800511a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800511e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d111      	bne.n	800514e <cw_unpack_next+0x3662>
 800512a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800512e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800513e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0202 	mvn.w	r2, #2
 8005148:	625a      	str	r2, [r3, #36]	; 0x24
 800514a:	f001 b9a7 	b.w	800649c <cw_unpack_next+0x49b0>
 800514e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005152:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800515e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005162:	2105      	movs	r1, #5
 8005164:	6810      	ldr	r0, [r2, #0]
 8005166:	4798      	blx	r3
 8005168:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
 800516c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005170:	2b00      	cmp	r3, #0
 8005172:	d028      	beq.n	80051c6 <cw_unpack_next+0x36da>
 8005174:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d011      	beq.n	80051a2 <cw_unpack_next+0x36b6>
 800517e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005182:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005192:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
 800519e:	f001 b97d 	b.w	800649c <cw_unpack_next+0x49b0>
 80051a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0202 	mvn.w	r2, #2
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24
 80051c2:	f001 b96b 	b.w	800649c <cw_unpack_next+0x49b0>
 80051c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80051d6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80051da:	3305      	adds	r3, #5
 80051dc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80051e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 80051ee:	61da      	str	r2, [r3, #28]
 80051f0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80051fa:	f993 3000 	ldrsb.w	r3, [r3]
 80051fe:	b21a      	sxth	r2, r3
 8005200:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005204:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005210:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d145      	bne.n	80052ac <cw_unpack_next+0x37c0>
 8005220:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800522a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005234:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	061a      	lsls	r2, r3, #24
 800523c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005240:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800524c:	431a      	orrs	r2, r3
 800524e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005252:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800525e:	431a      	orrs	r2, r3
 8005260:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005264:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	0e1b      	lsrs	r3, r3, #24
 800526c:	431a      	orrs	r2, r3
 800526e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005272:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800527c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	17da      	asrs	r2, r3, #31
 8005284:	66bb      	str	r3, [r7, #104]	; 0x68
 8005286:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005288:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800528c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005296:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800529a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800529e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
 80052a8:	f001 b8f8 	b.w	800649c <cw_unpack_next+0x49b0>
 80052ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2204      	movs	r2, #4
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	f001 b8e7 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xd7:  getDDItemFix(8);                                            // fixext 8
 80052ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80052de:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80052e2:	3309      	adds	r3, #9
 80052e4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80052e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d962      	bls.n	80053c2 <cw_unpack_next+0x38d6>
 80052fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005300:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d111      	bne.n	8005330 <cw_unpack_next+0x3844>
 800530c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005310:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f240 32e7 	movw	r2, #999	; 0x3e7
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005320:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0202 	mvn.w	r2, #2
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
 800532c:	f001 b8b6 	b.w	800649c <cw_unpack_next+0x49b0>
 8005330:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005334:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005340:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005344:	2109      	movs	r1, #9
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	4790      	blx	r2
 800534a:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
 800534e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8005352:	2b00      	cmp	r3, #0
 8005354:	d028      	beq.n	80053a8 <cw_unpack_next+0x38bc>
 8005356:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d011      	beq.n	8005384 <cw_unpack_next+0x3898>
 8005360:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005364:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005374:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
 8005380:	f001 b88c 	b.w	800649c <cw_unpack_next+0x49b0>
 8005384:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005388:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005398:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0202 	mvn.w	r2, #2
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
 80053a4:	f001 b87a 	b.w	800649c <cw_unpack_next+0x49b0>
 80053a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80053b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80053bc:	3309      	adds	r3, #9
 80053be:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80053c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80053d0:	61d3      	str	r3, [r2, #28]
 80053d2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80053d6:	1c53      	adds	r3, r2, #1
 80053d8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80053dc:	f992 3000 	ldrsb.w	r3, [r2]
 80053e0:	b219      	sxth	r1, r3
 80053e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	460b      	mov	r3, r1
 80053ee:	8013      	strh	r3, [r2, #0]
 80053f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	f040 80bf 	bne.w	8005584 <cw_unpack_next+0x3a98>
 8005406:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8005412:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8005416:	0a1a      	lsrs	r2, r3, #8
 8005418:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	4313      	orrs	r3, r2
 8005420:	667b      	str	r3, [r7, #100]	; 0x64
 8005422:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8005426:	0a1a      	lsrs	r2, r3, #8
 8005428:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	4313      	orrs	r3, r2
 8005430:	663b      	str	r3, [r7, #96]	; 0x60
 8005432:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005436:	460b      	mov	r3, r1
 8005438:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800543c:	65bb      	str	r3, [r7, #88]	; 0x58
 800543e:	4613      	mov	r3, r2
 8005440:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005446:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8005450:	0e1b      	lsrs	r3, r3, #24
 8005452:	4313      	orrs	r3, r2
 8005454:	653b      	str	r3, [r7, #80]	; 0x50
 8005456:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8005460:	0e1b      	lsrs	r3, r3, #24
 8005462:	4313      	orrs	r3, r2
 8005464:	657b      	str	r3, [r7, #84]	; 0x54
 8005466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800546a:	460b      	mov	r3, r1
 800546c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005470:	64bb      	str	r3, [r7, #72]	; 0x48
 8005472:	4613      	mov	r3, r2
 8005474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800547a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800547e:	4623      	mov	r3, r4
 8005480:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005484:	4602      	mov	r2, r0
 8005486:	4313      	orrs	r3, r2
 8005488:	643b      	str	r3, [r7, #64]	; 0x40
 800548a:	462b      	mov	r3, r5
 800548c:	460a      	mov	r2, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
 8005492:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	f04f 0100 	mov.w	r1, #0
 800549e:	0a10      	lsrs	r0, r2, #8
 80054a0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80054a4:	0a19      	lsrs	r1, r3, #8
 80054a6:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80054b4:	4623      	mov	r3, r4
 80054b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80054ba:	4602      	mov	r2, r0
 80054bc:	4313      	orrs	r3, r2
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
 80054c0:	462b      	mov	r3, r5
 80054c2:	460a      	mov	r2, r1
 80054c4:	4313      	orrs	r3, r2
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
 80054c8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80054cc:	f04f 0000 	mov.w	r0, #0
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	0219      	lsls	r1, r3, #8
 80054d6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80054da:	0210      	lsls	r0, r2, #8
 80054dc:	2300      	movs	r3, #0
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e0:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054ea:	4623      	mov	r3, r4
 80054ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054f0:	4602      	mov	r2, r0
 80054f2:	4313      	orrs	r3, r2
 80054f4:	623b      	str	r3, [r7, #32]
 80054f6:	462b      	mov	r3, r5
 80054f8:	460a      	mov	r2, r1
 80054fa:	4313      	orrs	r3, r2
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
 80054fe:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	0e0a      	lsrs	r2, r1, #24
 800550c:	2300      	movs	r3, #0
 800550e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005512:	4621      	mov	r1, r4
 8005514:	4311      	orrs	r1, r2
 8005516:	61b9      	str	r1, [r7, #24]
 8005518:	4629      	mov	r1, r5
 800551a:	4319      	orrs	r1, r3
 800551c:	61f9      	str	r1, [r7, #28]
 800551e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	0603      	lsls	r3, r0, #24
 800552c:	2200      	movs	r2, #0
 800552e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005532:	4621      	mov	r1, r4
 8005534:	4311      	orrs	r1, r2
 8005536:	6039      	str	r1, [r7, #0]
 8005538:	4629      	mov	r1, r5
 800553a:	4319      	orrs	r1, r3
 800553c:	6079      	str	r1, [r7, #4]
 800553e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005542:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8005546:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800554a:	613a      	str	r2, [r7, #16]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005556:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005560:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8005564:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	088a      	lsrs	r2, r1, #2
 8005572:	2300      	movs	r3, #0
 8005574:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005578:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	f000 bf8c 	b.w	800649c <cw_unpack_next+0x49b0>
 8005584:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005588:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2208      	movs	r2, #8
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005596:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	f000 bf7b 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xd8:  getDDItemFix(16);                                           // fixext 16
 80055a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80055b6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80055ba:	3311      	adds	r3, #17
 80055bc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80055c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d962      	bls.n	800569a <cw_unpack_next+0x3bae>
 80055d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d111      	bne.n	8005608 <cw_unpack_next+0x3b1c>
 80055e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0202 	mvn.w	r2, #2
 8005602:	625a      	str	r2, [r3, #36]	; 0x24
 8005604:	f000 bf4a 	b.w	800649c <cw_unpack_next+0x49b0>
 8005608:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800560c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005618:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800561c:	2111      	movs	r1, #17
 800561e:	6810      	ldr	r0, [r2, #0]
 8005620:	4798      	blx	r3
 8005622:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
 8005626:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800562a:	2b00      	cmp	r3, #0
 800562c:	d028      	beq.n	8005680 <cw_unpack_next+0x3b94>
 800562e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d011      	beq.n	800565c <cw_unpack_next+0x3b70>
 8005638:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800563c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800564c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
 8005658:	f000 bf20 	b.w	800649c <cw_unpack_next+0x49b0>
 800565c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005660:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f240 32e7 	movw	r2, #999	; 0x3e7
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005670:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0202 	mvn.w	r2, #2
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
 800567c:	f000 bf0e 	b.w	800649c <cw_unpack_next+0x49b0>
 8005680:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005684:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005690:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005694:	3311      	adds	r3, #17
 8005696:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800569a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800569e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 80056a8:	61da      	str	r2, [r3, #28]
 80056aa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80056b4:	f993 3000 	ldrsb.w	r3, [r3]
 80056b8:	b21a      	sxth	r2, r3
 80056ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d111      	bne.n	80056fe <cw_unpack_next+0x3c12>
 80056da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 020b 	mvn.w	r2, #11
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
 80056fa:	f000 becf 	b.w	800649c <cw_unpack_next+0x49b0>
 80056fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005702:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2210      	movs	r2, #16
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005710:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800571a:	609a      	str	r2, [r3, #8]
 800571c:	f000 bebe 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xd9:  getDDItem1(CWP_ITEM_STR, str.length, uint8_t);              // str 8
 8005720:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005724:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005734:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005740:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005744:	3301      	adds	r3, #1
 8005746:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800574a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800574e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 800575a:	429a      	cmp	r2, r3
 800575c:	d962      	bls.n	8005824 <cw_unpack_next+0x3d38>
 800575e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005762:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d111      	bne.n	8005792 <cw_unpack_next+0x3ca6>
 800576e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005772:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005782:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0202 	mvn.w	r2, #2
 800578c:	625a      	str	r2, [r3, #36]	; 0x24
 800578e:	f000 be85 	b.w	800649c <cw_unpack_next+0x49b0>
 8005792:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005796:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80057a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80057a6:	2101      	movs	r1, #1
 80057a8:	6810      	ldr	r0, [r2, #0]
 80057aa:	4798      	blx	r3
 80057ac:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
 80057b0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d028      	beq.n	800580a <cw_unpack_next+0x3d1e>
 80057b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d011      	beq.n	80057e6 <cw_unpack_next+0x3cfa>
 80057c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
 80057e2:	f000 be5b 	b.w	800649c <cw_unpack_next+0x49b0>
 80057e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0202 	mvn.w	r2, #2
 8005804:	625a      	str	r2, [r3, #36]	; 0x24
 8005806:	f000 be49 	b.w	800649c <cw_unpack_next+0x49b0>
 800580a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800580e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800581a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800581e:	3301      	adds	r3, #1
 8005820:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8005824:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005828:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8005832:	61da      	str	r2, [r3, #28]
 8005834:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005840:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 8005848:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800584c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005858:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800585c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005868:	4413      	add	r3, r2
 800586a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800586e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005872:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800587e:	429a      	cmp	r2, r3
 8005880:	d96d      	bls.n	800595e <cw_unpack_next+0x3e72>
 8005882:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005886:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d111      	bne.n	80058b6 <cw_unpack_next+0x3dca>
 8005892:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005896:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0202 	mvn.w	r2, #2
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24
 80058b2:	f000 bdf3 	b.w	800649c <cw_unpack_next+0x49b0>
 80058b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80058c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	68d1      	ldr	r1, [r2, #12]
 80058ce:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80058d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80058d6:	6810      	ldr	r0, [r2, #0]
 80058d8:	4798      	blx	r3
 80058da:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 80058de:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d028      	beq.n	8005938 <cw_unpack_next+0x3e4c>
 80058e6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d011      	beq.n	8005914 <cw_unpack_next+0x3e28>
 80058f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005904:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
 8005910:	f000 bdc4 	b.w	800649c <cw_unpack_next+0x49b0>
 8005914:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005918:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005928:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0202 	mvn.w	r2, #2
 8005932:	625a      	str	r2, [r3, #36]	; 0x24
 8005934:	f000 bdb2 	b.w	800649c <cw_unpack_next+0x49b0>
 8005938:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800593c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005948:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800594c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005958:	4413      	add	r3, r2
 800595a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800595e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005962:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005972:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	f000 bd8d 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xda:  getDDItem2(CWP_ITEM_STR, str.length, uint16_t);             // str 16
 8005982:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005986:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f44f 7299 	mov.w	r2, #306	; 0x132
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005996:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80059a2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80059a6:	3302      	adds	r3, #2
 80059a8:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80059ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 80059bc:	429a      	cmp	r2, r3
 80059be:	d962      	bls.n	8005a86 <cw_unpack_next+0x3f9a>
 80059c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d111      	bne.n	80059f4 <cw_unpack_next+0x3f08>
 80059d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0202 	mvn.w	r2, #2
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
 80059f0:	f000 bd54 	b.w	800649c <cw_unpack_next+0x49b0>
 80059f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005a04:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005a08:	2102      	movs	r1, #2
 8005a0a:	6810      	ldr	r0, [r2, #0]
 8005a0c:	4798      	blx	r3
 8005a0e:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
 8005a12:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d028      	beq.n	8005a6c <cw_unpack_next+0x3f80>
 8005a1a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d011      	beq.n	8005a48 <cw_unpack_next+0x3f5c>
 8005a24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a38:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24
 8005a44:	f000 bd2a 	b.w	800649c <cw_unpack_next+0x49b0>
 8005a48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a4c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a5c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f06f 0202 	mvn.w	r2, #2
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
 8005a68:	f000 bd18 	b.w	800649c <cw_unpack_next+0x49b0>
 8005a6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005a7c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005a80:	3302      	adds	r3, #2
 8005a82:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8005a86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8005a94:	61da      	str	r2, [r3, #28]
 8005a96:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8005aa0:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	b21a      	sxth	r2, r3
 8005aa8:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b21b      	sxth	r3, r3
 8005ab6:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8005aba:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8005abe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ac2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 8005aca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ace:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005ada:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ade:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005aea:	4413      	add	r3, r2
 8005aec:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8005af0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005af4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d96d      	bls.n	8005be0 <cw_unpack_next+0x40f4>
 8005b04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d111      	bne.n	8005b38 <cw_unpack_next+0x404c>
 8005b14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0202 	mvn.w	r2, #2
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
 8005b34:	f000 bcb2 	b.w	800649c <cw_unpack_next+0x49b0>
 8005b38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005b48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	68d1      	ldr	r1, [r2, #12]
 8005b50:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005b54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005b58:	6810      	ldr	r0, [r2, #0]
 8005b5a:	4798      	blx	r3
 8005b5c:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
 8005b60:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d028      	beq.n	8005bba <cw_unpack_next+0x40ce>
 8005b68:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d011      	beq.n	8005b96 <cw_unpack_next+0x40aa>
 8005b72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
 8005b92:	f000 bc83 	b.w	800649c <cw_unpack_next+0x49b0>
 8005b96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005b9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005baa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0202 	mvn.w	r2, #2
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8005bb6:	f000 bc71 	b.w	800649c <cw_unpack_next+0x49b0>
 8005bba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005bbe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005bca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005bce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005bda:	4413      	add	r3, r2
 8005bdc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8005be0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005be4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005bee:	61da      	str	r2, [r3, #28]
 8005bf0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005bf4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	f000 bc4c 	b.w	800649c <cw_unpack_next+0x49b0>
        case 0xdb:  getDDItem4(CWP_ITEM_STR, str.length, uint32_t);             // str 32
 8005c04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005c24:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005c28:	3304      	adds	r3, #4
 8005c2a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8005c2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d960      	bls.n	8005d04 <cw_unpack_next+0x4218>
 8005c42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c46:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d111      	bne.n	8005c76 <cw_unpack_next+0x418a>
 8005c52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0202 	mvn.w	r2, #2
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24
 8005c72:	f000 bc13 	b.w	800649c <cw_unpack_next+0x49b0>
 8005c76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005c7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005c86:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	6810      	ldr	r0, [r2, #0]
 8005c8e:	4798      	blx	r3
 8005c90:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
 8005c94:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d026      	beq.n	8005cea <cw_unpack_next+0x41fe>
 8005c9c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d010      	beq.n	8005cc8 <cw_unpack_next+0x41dc>
 8005ca6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005caa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005cba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc6:	e3e9      	b.n	800649c <cw_unpack_next+0x49b0>
 8005cc8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ccc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005cdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0202 	mvn.w	r2, #2
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ce8:	e3d8      	b.n	800649c <cw_unpack_next+0x49b0>
 8005cea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005cee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005cfa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005cfe:	3304      	adds	r3, #4
 8005d00:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8005d04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005d12:	61da      	str	r2, [r3, #28]
 8005d14:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d28:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	061a      	lsls	r2, r3, #24
 8005d30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d34:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d40:	431a      	orrs	r2, r3
 8005d42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d46:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d52:	431a      	orrs	r2, r3
 8005d54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d58:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	0e1b      	lsrs	r3, r3, #24
 8005d60:	431a      	orrs	r2, r3
 8005d62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d66:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d70:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 8005d82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005d92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005d96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005da2:	4413      	add	r3, r2
 8005da4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8005da8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005dac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d96a      	bls.n	8005e92 <cw_unpack_next+0x43a6>
 8005dbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005dc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d110      	bne.n	8005dee <cw_unpack_next+0x4302>
 8005dcc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005dd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005de0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0202 	mvn.w	r2, #2
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24
 8005dec:	e356      	b.n	800649c <cw_unpack_next+0x49b0>
 8005dee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005df2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005dfe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	68d1      	ldr	r1, [r2, #12]
 8005e06:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005e0a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005e0e:	6810      	ldr	r0, [r2, #0]
 8005e10:	4798      	blx	r3
 8005e12:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
 8005e16:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d026      	beq.n	8005e6c <cw_unpack_next+0x4380>
 8005e1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d010      	beq.n	8005e4a <cw_unpack_next+0x435e>
 8005e28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
 8005e48:	e328      	b.n	800649c <cw_unpack_next+0x49b0>
 8005e4a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e4e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e5e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0202 	mvn.w	r2, #2
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24
 8005e6a:	e317      	b.n	800649c <cw_unpack_next+0x49b0>
 8005e6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005e7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8005e92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005e96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005ea0:	61da      	str	r2, [r3, #28]
 8005ea2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ea6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005eb0:	609a      	str	r2, [r3, #8]
 8005eb2:	e2f3      	b.n	800649c <cw_unpack_next+0x49b0>
        case 0xdc:  getDDItem2(CWP_ITEM_ARRAY, array.size, uint16_t);   return;  // array 16
 8005eb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005eb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ec8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005ed4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005ed8:	3302      	adds	r3, #2
 8005eda:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8005ede:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ee2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d95f      	bls.n	8005fb2 <cw_unpack_next+0x44c6>
 8005ef2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ef6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d110      	bne.n	8005f24 <cw_unpack_next+0x4438>
 8005f02:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f06:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f16:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0202 	mvn.w	r2, #2
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24
 8005f22:	e2bb      	b.n	800649c <cw_unpack_next+0x49b0>
 8005f24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005f34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005f38:	2102      	movs	r1, #2
 8005f3a:	6810      	ldr	r0, [r2, #0]
 8005f3c:	4798      	blx	r3
 8005f3e:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8005f42:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d026      	beq.n	8005f98 <cw_unpack_next+0x44ac>
 8005f4a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f52:	d010      	beq.n	8005f76 <cw_unpack_next+0x448a>
 8005f54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f68:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24
 8005f74:	e292      	b.n	800649c <cw_unpack_next+0x49b0>
 8005f76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0202 	mvn.w	r2, #2
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
 8005f96:	e281      	b.n	800649c <cw_unpack_next+0x49b0>
 8005f98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005f9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005fa8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005fac:	3302      	adds	r3, #2
 8005fae:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8005fb2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005fb6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005fc0:	61da      	str	r2, [r3, #28]
 8005fc2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8005fcc:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	b21a      	sxth	r2, r3
 8005fd4:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b21b      	sxth	r3, r3
 8005fe2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8005fe6:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8005fea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005fee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	609a      	str	r2, [r3, #8]
 8005ff6:	e251      	b.n	800649c <cw_unpack_next+0x49b0>
        case 0xdd:  getDDItem4(CWP_ITEM_ARRAY, array.size, uint32_t);   return;  // array 32
 8005ff8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005ffc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 729a 	mov.w	r2, #308	; 0x134
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800600c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8006018:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800601c:	3304      	adds	r3, #4
 800601e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8006022:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006026:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8006032:	429a      	cmp	r2, r3
 8006034:	d95f      	bls.n	80060f6 <cw_unpack_next+0x460a>
 8006036:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800603a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d110      	bne.n	8006068 <cw_unpack_next+0x457c>
 8006046:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800604a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800605a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0202 	mvn.w	r2, #2
 8006064:	625a      	str	r2, [r3, #36]	; 0x24
 8006066:	e219      	b.n	800649c <cw_unpack_next+0x49b0>
 8006068:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800606c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8006078:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800607c:	2104      	movs	r1, #4
 800607e:	6810      	ldr	r0, [r2, #0]
 8006080:	4798      	blx	r3
 8006082:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
 8006086:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d026      	beq.n	80060dc <cw_unpack_next+0x45f0>
 800608e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d010      	beq.n	80060ba <cw_unpack_next+0x45ce>
 8006098:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800609c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80060ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80060b6:	625a      	str	r2, [r3, #36]	; 0x24
 80060b8:	e1f0      	b.n	800649c <cw_unpack_next+0x49b0>
 80060ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80060be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80060ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0202 	mvn.w	r2, #2
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24
 80060da:	e1df      	b.n	800649c <cw_unpack_next+0x49b0>
 80060dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80060e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80060ec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80060f0:	3304      	adds	r3, #4
 80060f2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80060f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80060fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8006104:	61da      	str	r2, [r3, #28]
 8006106:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006110:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800611a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	061a      	lsls	r2, r3, #24
 8006122:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006126:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006132:	431a      	orrs	r2, r3
 8006134:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006138:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006144:	431a      	orrs	r2, r3
 8006146:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800614a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	431a      	orrs	r2, r3
 8006154:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006158:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006162:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800616c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	e192      	b.n	800649c <cw_unpack_next+0x49b0>
        case 0xde:  getDDItem2(CWP_ITEM_MAP, map.size, uint16_t);       return;  // map 16
 8006176:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800617a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f240 1235 	movw	r2, #309	; 0x135
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800618a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8006196:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800619a:	3302      	adds	r3, #2
 800619c:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80061a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80061a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d95f      	bls.n	8006274 <cw_unpack_next+0x4788>
 80061b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80061b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d110      	bne.n	80061e6 <cw_unpack_next+0x46fa>
 80061c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80061c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80061d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f06f 0202 	mvn.w	r2, #2
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
 80061e4:	e15a      	b.n	800649c <cw_unpack_next+0x49b0>
 80061e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80061ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80061f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80061fa:	2102      	movs	r1, #2
 80061fc:	6810      	ldr	r0, [r2, #0]
 80061fe:	4798      	blx	r3
 8006200:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
 8006204:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8006208:	2b00      	cmp	r3, #0
 800620a:	d026      	beq.n	800625a <cw_unpack_next+0x476e>
 800620c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d010      	beq.n	8006238 <cw_unpack_next+0x474c>
 8006216:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800621a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800622a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8006234:	625a      	str	r2, [r3, #36]	; 0x24
 8006236:	e131      	b.n	800649c <cw_unpack_next+0x49b0>
 8006238:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800623c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800624c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f06f 0202 	mvn.w	r2, #2
 8006256:	625a      	str	r2, [r3, #36]	; 0x24
 8006258:	e120      	b.n	800649c <cw_unpack_next+0x49b0>
 800625a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800625e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800626a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800626e:	3302      	adds	r3, #2
 8006270:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8006274:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006278:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 8006282:	61da      	str	r2, [r3, #28]
 8006284:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 800628e:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	b21a      	sxth	r2, r3
 8006296:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	b21b      	sxth	r3, r3
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b21b      	sxth	r3, r3
 80062a4:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80062a8:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 80062ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80062b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	e0f0      	b.n	800649c <cw_unpack_next+0x49b0>
        case 0xdf:  getDDItem4(CWP_ITEM_MAP, map.size, uint32_t);       return;  // map 32
 80062ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80062be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f240 1235 	movw	r2, #309	; 0x135
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80062ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80062da:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80062de:	3304      	adds	r3, #4
 80062e0:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80062e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80062e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d95f      	bls.n	80063b8 <cw_unpack_next+0x48cc>
 80062f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80062fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d110      	bne.n	800632a <cw_unpack_next+0x483e>
 8006308:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800630c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800631c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f06f 0202 	mvn.w	r2, #2
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
 8006328:	e0b8      	b.n	800649c <cw_unpack_next+0x49b0>
 800632a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800632e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800633a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800633e:	2104      	movs	r1, #4
 8006340:	6810      	ldr	r0, [r2, #0]
 8006342:	4798      	blx	r3
 8006344:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
 8006348:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d026      	beq.n	800639e <cw_unpack_next+0x48b2>
 8006350:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d010      	beq.n	800637c <cw_unpack_next+0x4890>
 800635a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800635e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800636e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8006378:	625a      	str	r2, [r3, #36]	; 0x24
 800637a:	e08f      	b.n	800649c <cw_unpack_next+0x49b0>
 800637c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006380:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006390:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f06f 0202 	mvn.w	r2, #2
 800639a:	625a      	str	r2, [r3, #36]	; 0x24
 800639c:	e07e      	b.n	800649c <cw_unpack_next+0x49b0>
 800639e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80063a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80063ae:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80063b2:	3304      	adds	r3, #4
 80063b4:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80063b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80063bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80063c6:	61da      	str	r2, [r3, #28]
 80063c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80063d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80063dc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	061a      	lsls	r2, r3, #24
 80063e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80063e8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063f4:	431a      	orrs	r2, r3
 80063f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80063fa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006406:	431a      	orrs	r2, r3
 8006408:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800640c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	0e1b      	lsrs	r3, r3, #24
 8006414:	431a      	orrs	r2, r3
 8006416:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800641a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006424:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800642e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	609a      	str	r2, [r3, #8]
 8006436:	e031      	b.n	800649c <cw_unpack_next+0x49b0>
        case 0xe0: case 0xe1: case 0xe2: case 0xe3: case 0xe4: case 0xe5: case 0xe6: case 0xe7:
        case 0xe8: case 0xe9: case 0xea: case 0xeb: case 0xec: case 0xed: case 0xee: case 0xef:
        case 0xf0: case 0xf1: case 0xf2: case 0xf3: case 0xf4: case 0xf5: case 0xf6: case 0xf7:
        case 0xf8: case 0xf9: case 0xfa: case 0xfb: case 0xfc: case 0xfd: case 0xfe: case 0xff:
                    getDDItem(CWP_ITEM_NEGATIVE_INTEGER, i64, (int8_t)c); return;    // negative fixnum
 8006438:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800643c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f240 122f 	movw	r2, #303	; 0x12f
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	f997 32b7 	ldrsb.w	r3, [r7, #695]	; 0x2b7
 800644c:	b25b      	sxtb	r3, r3
 800644e:	17da      	asrs	r2, r3, #31
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	60fa      	str	r2, [r7, #12]
 8006454:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006458:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006462:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8006466:	e019      	b.n	800649c <cw_unpack_next+0x49b0>
        default:
                    UNPACK_ERROR(CWP_RC_MALFORMED_INPUT)
 8006468:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800646c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800647c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f06f 0203 	mvn.w	r2, #3
 8006486:	625a      	str	r2, [r3, #36]	; 0x24
 8006488:	e008      	b.n	800649c <cw_unpack_next+0x49b0>
        return;
 800648a:	bf00      	nop
 800648c:	e006      	b.n	800649c <cw_unpack_next+0x49b0>
                    return;
 800648e:	bf00      	nop
 8006490:	e004      	b.n	800649c <cw_unpack_next+0x49b0>
                    return;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <cw_unpack_next+0x49b0>
                    return;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <cw_unpack_next+0x49b0>
                    return;
 800649a:	bf00      	nop
    }
    
    return;
}
 800649c:	f507 775d 	add.w	r7, r7, #884	; 0x374
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop

080064a8 <cw_unpack_next_boolean>:
bool cw_unpack_next_false (cw_unpack_context* unpack_context){
	CW_EXPECT(CWP_ITEM_BOOLEAN);
	return unpack_context->item.as.boolean == false;
}

bool cw_unpack_next_boolean (cw_unpack_context* unpack_context, bool *b){
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	CW_EXPECT(CWP_ITEM_BOOLEAN);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fb1a 	bl	8001aec <cw_unpack_next>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <cw_unpack_next_boolean+0x1c>
 80064c0:	2300      	movs	r3, #0
 80064c2:	e00d      	b.n	80064e0 <cw_unpack_next_boolean+0x38>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ca:	f240 122d 	movw	r2, #301	; 0x12d
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d001      	beq.n	80064d6 <cw_unpack_next_boolean+0x2e>
 80064d2:	2300      	movs	r3, #0
 80064d4:	e004      	b.n	80064e0 <cw_unpack_next_boolean+0x38>
	*b = unpack_context->item.as.boolean;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	7a1a      	ldrb	r2, [r3, #8]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
	return true;
 80064de:	2301      	movs	r3, #1
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <cw_unpack_next_unsigned>:
		return false;
	*i = unpack_context->item.as.i64;
	return true;
}

bool cw_unpack_next_unsigned (cw_unpack_context* unpack_context, uint64_t *ui){
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	CW_EXPECT(CWP_ITEM_POSITIVE_INTEGER)
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fb fafa 	bl	8001aec <cw_unpack_next>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <cw_unpack_next_unsigned+0x1c>
 8006500:	2300      	movs	r3, #0
 8006502:	e00e      	b.n	8006522 <cw_unpack_next_unsigned+0x3a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800650a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800650e:	d001      	beq.n	8006514 <cw_unpack_next_unsigned+0x2c>
 8006510:	2300      	movs	r3, #0
 8006512:	e006      	b.n	8006522 <cw_unpack_next_unsigned+0x3a>
	*ui = unpack_context->item.as.u64;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	e9c1 2300 	strd	r2, r3, [r1]
	return true;
 8006520:	2301      	movs	r3, #1
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <cw_unpack_next_float>:

bool cw_unpack_next_float (cw_unpack_context* unpack_context, float *f){
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
	CW_EXPECT(CWP_ITEM_FLOAT)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fb fad9 	bl	8001aec <cw_unpack_next>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <cw_unpack_next_float+0x1c>
 8006542:	2300      	movs	r3, #0
 8006544:	e00c      	b.n	8006560 <cw_unpack_next_float+0x36>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006550:	d001      	beq.n	8006556 <cw_unpack_next_float+0x2c>
 8006552:	2300      	movs	r3, #0
 8006554:	e004      	b.n	8006560 <cw_unpack_next_float+0x36>
	*f = unpack_context->item.as.real;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
	return true;
 800655e:	2301      	movs	r3, #1
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_UART_RxCpltCallback>:
struct Measurements pm_measurements[2];
struct pm_status_flags pm_current_status_flags[2];
static volatile struct pm_rx_error_counters_s pm_rx_error_stats[2] = {0};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a79      	ldr	r2, [pc, #484]	; (800675c <HAL_UART_RxCpltCallback+0x1f4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d139      	bne.n	80065ee <HAL_UART_RxCpltCallback+0x86>
	{
		if(M_UART_Data1.getPacket == false)
 800657a:	4b79      	ldr	r3, [pc, #484]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 800657c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8006580:	2b00      	cmp	r3, #0
 8006582:	d12b      	bne.n	80065dc <HAL_UART_RxCpltCallback+0x74>
		{
			if(M_UART_Data1.rxCntBuff == 0)
 8006584:	4b76      	ldr	r3, [pc, #472]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 8006586:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800658a:	2b00      	cmp	r3, #0
 800658c:	d115      	bne.n	80065ba <HAL_UART_RxCpltCallback+0x52>
			{
				if(rxByteM1 == 'C')
 800658e:	4b75      	ldr	r3, [pc, #468]	; (8006764 <HAL_UART_RxCpltCallback+0x1fc>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b43      	cmp	r3, #67	; 0x43
 8006594:	d122      	bne.n	80065dc <HAL_UART_RxCpltCallback+0x74>
				{
					M_UART_Data1.rxBuff[M_UART_Data1.rxCntBuff] = rxByteM1;
 8006596:	4b72      	ldr	r3, [pc, #456]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 8006598:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800659c:	4619      	mov	r1, r3
 800659e:	4b71      	ldr	r3, [pc, #452]	; (8006764 <HAL_UART_RxCpltCallback+0x1fc>)
 80065a0:	781a      	ldrb	r2, [r3, #0]
 80065a2:	4b6f      	ldr	r3, [pc, #444]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065a4:	440b      	add	r3, r1
 80065a6:	705a      	strb	r2, [r3, #1]
					M_UART_Data1.rxCntBuff ++;
 80065a8:	4b6d      	ldr	r3, [pc, #436]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065aa:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80065ae:	3301      	adds	r3, #1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b6b      	ldr	r3, [pc, #428]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065b4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 80065b8:	e010      	b.n	80065dc <HAL_UART_RxCpltCallback+0x74>
				}
			}
			else
			{
				M_UART_Data1.rxBuff[M_UART_Data1.rxCntBuff] = rxByteM1;
 80065ba:	4b69      	ldr	r3, [pc, #420]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065bc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80065c0:	4619      	mov	r1, r3
 80065c2:	4b68      	ldr	r3, [pc, #416]	; (8006764 <HAL_UART_RxCpltCallback+0x1fc>)
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	4b66      	ldr	r3, [pc, #408]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065c8:	440b      	add	r3, r1
 80065ca:	705a      	strb	r2, [r3, #1]
				M_UART_Data1.rxCntBuff ++;
 80065cc:	4b64      	ldr	r3, [pc, #400]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065ce:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80065d2:	3301      	adds	r3, #1
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	4b62      	ldr	r3, [pc, #392]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065d8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			}
		}
		M_UART_Data1.timeoutCnt =0;
 80065dc:	4b60      	ldr	r3, [pc, #384]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		HAL_UART_Receive_IT(&huart1,  &rxByteM1, 1);
 80065e4:	2201      	movs	r2, #1
 80065e6:	495f      	ldr	r1, [pc, #380]	; (8006764 <HAL_UART_RxCpltCallback+0x1fc>)
 80065e8:	485f      	ldr	r0, [pc, #380]	; (8006768 <HAL_UART_RxCpltCallback+0x200>)
 80065ea:	f005 fe89 	bl	800c300 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a5e      	ldr	r2, [pc, #376]	; (800676c <HAL_UART_RxCpltCallback+0x204>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d139      	bne.n	800666c <HAL_UART_RxCpltCallback+0x104>
	{
		if(M_UART_Data2.getPacket == false)
 80065f8:	4b5d      	ldr	r3, [pc, #372]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 80065fa:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d12b      	bne.n	800665a <HAL_UART_RxCpltCallback+0xf2>
		{
			if(M_UART_Data2.rxCntBuff == 0)
 8006602:	4b5b      	ldr	r3, [pc, #364]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 8006604:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006608:	2b00      	cmp	r3, #0
 800660a:	d115      	bne.n	8006638 <HAL_UART_RxCpltCallback+0xd0>
			{
				if(rxByteM2 == 'C')
 800660c:	4b59      	ldr	r3, [pc, #356]	; (8006774 <HAL_UART_RxCpltCallback+0x20c>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b43      	cmp	r3, #67	; 0x43
 8006612:	d122      	bne.n	800665a <HAL_UART_RxCpltCallback+0xf2>
				{
					M_UART_Data2.rxBuff[M_UART_Data2.rxCntBuff] = rxByteM2;
 8006614:	4b56      	ldr	r3, [pc, #344]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 8006616:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800661a:	4619      	mov	r1, r3
 800661c:	4b55      	ldr	r3, [pc, #340]	; (8006774 <HAL_UART_RxCpltCallback+0x20c>)
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	4b53      	ldr	r3, [pc, #332]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 8006622:	440b      	add	r3, r1
 8006624:	705a      	strb	r2, [r3, #1]
					M_UART_Data2.rxCntBuff ++;
 8006626:	4b52      	ldr	r3, [pc, #328]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 8006628:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800662c:	3301      	adds	r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	4b4f      	ldr	r3, [pc, #316]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 8006632:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8006636:	e010      	b.n	800665a <HAL_UART_RxCpltCallback+0xf2>
				}
			}
			else
			{
				M_UART_Data1.rxBuff[M_UART_Data2.rxCntBuff] = rxByteM2;
 8006638:	4b4d      	ldr	r3, [pc, #308]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 800663a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800663e:	4619      	mov	r1, r3
 8006640:	4b4c      	ldr	r3, [pc, #304]	; (8006774 <HAL_UART_RxCpltCallback+0x20c>)
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	4b46      	ldr	r3, [pc, #280]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 8006646:	440b      	add	r3, r1
 8006648:	705a      	strb	r2, [r3, #1]
				M_UART_Data1.rxCntBuff ++;
 800664a:	4b45      	ldr	r3, [pc, #276]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 800664c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006650:	3301      	adds	r3, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b42      	ldr	r3, [pc, #264]	; (8006760 <HAL_UART_RxCpltCallback+0x1f8>)
 8006656:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			}
		}
		M_UART_Data2.timeoutCnt =0;
 800665a:	4b45      	ldr	r3, [pc, #276]	; (8006770 <HAL_UART_RxCpltCallback+0x208>)
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		HAL_UART_Receive_IT(&huart2,  &rxByteM2, 1);
 8006662:	2201      	movs	r2, #1
 8006664:	4943      	ldr	r1, [pc, #268]	; (8006774 <HAL_UART_RxCpltCallback+0x20c>)
 8006666:	4844      	ldr	r0, [pc, #272]	; (8006778 <HAL_UART_RxCpltCallback+0x210>)
 8006668:	f005 fe4a 	bl	800c300 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART3)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a42      	ldr	r2, [pc, #264]	; (800677c <HAL_UART_RxCpltCallback+0x214>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d16d      	bne.n	8006752 <HAL_UART_RxCpltCallback+0x1ea>
	{
		if (rxByte == '\n')
 8006676:	4b42      	ldr	r3, [pc, #264]	; (8006780 <HAL_UART_RxCpltCallback+0x218>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b0a      	cmp	r3, #10
 800667c:	d153      	bne.n	8006726 <HAL_UART_RxCpltCallback+0x1be>
		{
			numCMD = 0;
 800667e:	4b41      	ldr	r3, [pc, #260]	; (8006784 <HAL_UART_RxCpltCallback+0x21c>)
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < NUM_CMD; i++)
 8006684:	4b40      	ldr	r3, [pc, #256]	; (8006788 <HAL_UART_RxCpltCallback+0x220>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e03a      	b.n	8006702 <HAL_UART_RxCpltCallback+0x19a>
			{
				if (strstr((char*)&UART_Data.rxBuff[0], (char*) &listCMD[i][0])!= 0)
 800668c:	4b3e      	ldr	r3, [pc, #248]	; (8006788 <HAL_UART_RxCpltCallback+0x220>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4a3c      	ldr	r2, [pc, #240]	; (800678c <HAL_UART_RxCpltCallback+0x224>)
 800669a:	4413      	add	r3, r2
 800669c:	4619      	mov	r1, r3
 800669e:	483c      	ldr	r0, [pc, #240]	; (8006790 <HAL_UART_RxCpltCallback+0x228>)
 80066a0:	f009 f88f 	bl	800f7c2 <strstr>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d026      	beq.n	80066f8 <HAL_UART_RxCpltCallback+0x190>
				{
					numCMD = i + 1;
 80066aa:	4b37      	ldr	r3, [pc, #220]	; (8006788 <HAL_UART_RxCpltCallback+0x220>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	3301      	adds	r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	4b33      	ldr	r3, [pc, #204]	; (8006784 <HAL_UART_RxCpltCallback+0x21c>)
 80066b6:	701a      	strb	r2, [r3, #0]

				    for(uint8_t pos_val = 0; pos_val < MAX_LEN; pos_val++)
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e018      	b.n	80066f0 <HAL_UART_RxCpltCallback+0x188>
				    {
				      if(UART_Data.rxBuff[pos_val] == 0x20)
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	4a34      	ldr	r2, [pc, #208]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 80066c2:	4413      	add	r3, r2
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d10f      	bne.n	80066ea <HAL_UART_RxCpltCallback+0x182>
				      {
				    	  pos_val++;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	3301      	adds	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
				    	  getVal = atoi((uint8_t*)&UART_Data.rxBuff[pos_val]);
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	4a30      	ldr	r2, [pc, #192]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 80066d4:	4413      	add	r3, r2
 80066d6:	3301      	adds	r3, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f008 f83d 	bl	800e758 <atoi>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b2d      	ldr	r3, [pc, #180]	; (8006798 <HAL_UART_RxCpltCallback+0x230>)
 80066e4:	601a      	str	r2, [r3, #0]
				    	  break;
 80066e6:	bf00      	nop
				      }
				    }
					break;
 80066e8:	e00f      	b.n	800670a <HAL_UART_RxCpltCallback+0x1a2>
				    for(uint8_t pos_val = 0; pos_val < MAX_LEN; pos_val++)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	3301      	adds	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b09      	cmp	r3, #9
 80066f4:	d9e3      	bls.n	80066be <HAL_UART_RxCpltCallback+0x156>
					break;
 80066f6:	e008      	b.n	800670a <HAL_UART_RxCpltCallback+0x1a2>
			for (i = 0; i < NUM_CMD; i++)
 80066f8:	4b23      	ldr	r3, [pc, #140]	; (8006788 <HAL_UART_RxCpltCallback+0x220>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	4a22      	ldr	r2, [pc, #136]	; (8006788 <HAL_UART_RxCpltCallback+0x220>)
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	4b21      	ldr	r3, [pc, #132]	; (8006788 <HAL_UART_RxCpltCallback+0x220>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b27      	cmp	r3, #39	; 0x27
 8006708:	ddc0      	ble.n	800668c <HAL_UART_RxCpltCallback+0x124>
				}
			}
			if(numCMD == 0)
 800670a:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <HAL_UART_RxCpltCallback+0x21c>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <HAL_UART_RxCpltCallback+0x1b0>
			{
				numCMD = 0xFF;
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <HAL_UART_RxCpltCallback+0x21c>)
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	701a      	strb	r2, [r3, #0]
			}
			memset((char*) &UART_Data, 0x00, sizeof(UART_Data));
 8006718:	f44f 7281 	mov.w	r2, #258	; 0x102
 800671c:	2100      	movs	r1, #0
 800671e:	481d      	ldr	r0, [pc, #116]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 8006720:	f009 f847 	bl	800f7b2 <memset>
 8006724:	e010      	b.n	8006748 <HAL_UART_RxCpltCallback+0x1e0>
		}
		else
		{
			//if(rxByte != '\r')
			{
			  UART_Data.rxBuff[UART_Data.rxCntBuff] = rxByte;
 8006726:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 8006728:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800672c:	4619      	mov	r1, r3
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <HAL_UART_RxCpltCallback+0x218>)
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	4b18      	ldr	r3, [pc, #96]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 8006734:	440b      	add	r3, r1
 8006736:	705a      	strb	r2, [r3, #1]
			  UART_Data.rxCntBuff++;
 8006738:	4b16      	ldr	r3, [pc, #88]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 800673a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800673e:	3301      	adds	r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	4b14      	ldr	r3, [pc, #80]	; (8006794 <HAL_UART_RxCpltCallback+0x22c>)
 8006744:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			}
		}
		HAL_UART_Receive_IT(&huart3,  &rxByte, 1);
 8006748:	2201      	movs	r2, #1
 800674a:	490d      	ldr	r1, [pc, #52]	; (8006780 <HAL_UART_RxCpltCallback+0x218>)
 800674c:	4813      	ldr	r0, [pc, #76]	; (800679c <HAL_UART_RxCpltCallback+0x234>)
 800674e:	f005 fdd7 	bl	800c300 <HAL_UART_Receive_IT>
	}
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40013800 	.word	0x40013800
 8006760:	20000ae4 	.word	0x20000ae4
 8006764:	20000ae0 	.word	0x20000ae0
 8006768:	20000764 	.word	0x20000764
 800676c:	40004400 	.word	0x40004400
 8006770:	20000be8 	.word	0x20000be8
 8006774:	20000ae1 	.word	0x20000ae1
 8006778:	200007f4 	.word	0x200007f4
 800677c:	40004800 	.word	0x40004800
 8006780:	20000ad6 	.word	0x20000ad6
 8006784:	20000ad7 	.word	0x20000ad7
 8006788:	20000ad8 	.word	0x20000ad8
 800678c:	080132f4 	.word	0x080132f4
 8006790:	200009d5 	.word	0x200009d5
 8006794:	200009d4 	.word	0x200009d4
 8006798:	20000adc 	.word	0x20000adc
 800679c:	20000884 	.word	0x20000884

080067a0 <CountersHandler>:

uint8_t  startCntUART1 = 0, startCntUART2 =0;
uint32_t timeOutUART1 = 0, timeOutUART2 = 0;

void CountersHandler (void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
	M_UART_Data1.timeoutCnt++;
 80067a4:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <CountersHandler+0x54>)
 80067a6:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80067aa:	3301      	adds	r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <CountersHandler+0x54>)
 80067b0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	M_UART_Data2.timeoutCnt++;
 80067b4:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <CountersHandler+0x58>)
 80067b6:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80067ba:	3301      	adds	r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <CountersHandler+0x58>)
 80067c0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

	if(startCntUART1)
 80067c4:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <CountersHandler+0x5c>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <CountersHandler+0x36>
	{
		timeOutUART1++;
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <CountersHandler+0x60>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <CountersHandler+0x60>)
 80067d4:	6013      	str	r3, [r2, #0]
	}

	if(startCntUART2)
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <CountersHandler+0x64>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <CountersHandler+0x48>
	{
		timeOutUART2++;
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <CountersHandler+0x68>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a08      	ldr	r2, [pc, #32]	; (8006808 <CountersHandler+0x68>)
 80067e6:	6013      	str	r3, [r2, #0]
	}
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000ae4 	.word	0x20000ae4
 80067f8:	20000be8 	.word	0x20000be8
 80067fc:	200011a8 	.word	0x200011a8
 8006800:	200011ac 	.word	0x200011ac
 8006804:	200011a9 	.word	0x200011a9
 8006808:	200011b0 	.word	0x200011b0

0800680c <ReceiveHandler>:
bool fuse_state[2] = {false, false};
bool save_param[2] = {false, false};


void ReceiveHandler (void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
     int cnt =0;
 8006812:	2300      	movs	r3, #0
 8006814:	607b      	str	r3, [r7, #4]

     if(hdma_usart1_rx.Instance->CNDTR != 0)
 8006816:	4b97      	ldr	r3, [pc, #604]	; (8006a74 <ReceiveHandler+0x268>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01c      	beq.n	800685a <ReceiveHandler+0x4e>
     {
    	 if(startCntUART1 == 0)
 8006820:	4b95      	ldr	r3, [pc, #596]	; (8006a78 <ReceiveHandler+0x26c>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <ReceiveHandler+0x2a>
    	 {
    		 timeOutUART1 =0;
 8006828:	4b94      	ldr	r3, [pc, #592]	; (8006a7c <ReceiveHandler+0x270>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
    		 startCntUART1 = 1;
 800682e:	4b92      	ldr	r3, [pc, #584]	; (8006a78 <ReceiveHandler+0x26c>)
 8006830:	2201      	movs	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	e011      	b.n	800685a <ReceiveHandler+0x4e>
    	 }
    	 else if(timeOutUART1 > 100)
 8006836:	4b91      	ldr	r3, [pc, #580]	; (8006a7c <ReceiveHandler+0x270>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b64      	cmp	r3, #100	; 0x64
 800683c:	d90d      	bls.n	800685a <ReceiveHandler+0x4e>
         {
    		 HAL_UART_DMAStop(&huart1);
 800683e:	4890      	ldr	r0, [pc, #576]	; (8006a80 <ReceiveHandler+0x274>)
 8006840:	f005 fe0a 	bl	800c458 <HAL_UART_DMAStop>
    		 HAL_UART_Receive_DMA (&huart1, (uint8_t*)&rxDataBuf[0], 217);
 8006844:	22d9      	movs	r2, #217	; 0xd9
 8006846:	498f      	ldr	r1, [pc, #572]	; (8006a84 <ReceiveHandler+0x278>)
 8006848:	488d      	ldr	r0, [pc, #564]	; (8006a80 <ReceiveHandler+0x274>)
 800684a:	f005 fdaf 	bl	800c3ac <HAL_UART_Receive_DMA>
    		 timeOutUART1 =0;
 800684e:	4b8b      	ldr	r3, [pc, #556]	; (8006a7c <ReceiveHandler+0x270>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
    	     startCntUART1 = 0;
 8006854:	4b88      	ldr	r3, [pc, #544]	; (8006a78 <ReceiveHandler+0x26c>)
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
         }
     }

     if(hdma_usart2_rx.Instance->CNDTR != 0)
 800685a:	4b8b      	ldr	r3, [pc, #556]	; (8006a88 <ReceiveHandler+0x27c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01c      	beq.n	800689e <ReceiveHandler+0x92>
     {
    	 if(startCntUART2 == 0)
 8006864:	4b89      	ldr	r3, [pc, #548]	; (8006a8c <ReceiveHandler+0x280>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d106      	bne.n	800687a <ReceiveHandler+0x6e>
    	 {
    		 timeOutUART2 =0;
 800686c:	4b88      	ldr	r3, [pc, #544]	; (8006a90 <ReceiveHandler+0x284>)
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
    	     startCntUART2 = 1;
 8006872:	4b86      	ldr	r3, [pc, #536]	; (8006a8c <ReceiveHandler+0x280>)
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e011      	b.n	800689e <ReceiveHandler+0x92>
    	 }
    	 else if(timeOutUART2 > 100)
 800687a:	4b85      	ldr	r3, [pc, #532]	; (8006a90 <ReceiveHandler+0x284>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b64      	cmp	r3, #100	; 0x64
 8006880:	d90d      	bls.n	800689e <ReceiveHandler+0x92>
    	 {
    		 HAL_UART_DMAStop(&huart2);
 8006882:	4884      	ldr	r0, [pc, #528]	; (8006a94 <ReceiveHandler+0x288>)
 8006884:	f005 fde8 	bl	800c458 <HAL_UART_DMAStop>
    		 HAL_UART_Receive_DMA (&huart2, (uint8_t*)&rxDataBuf2[0], 217);
 8006888:	22d9      	movs	r2, #217	; 0xd9
 800688a:	4983      	ldr	r1, [pc, #524]	; (8006a98 <ReceiveHandler+0x28c>)
 800688c:	4881      	ldr	r0, [pc, #516]	; (8006a94 <ReceiveHandler+0x288>)
 800688e:	f005 fd8d 	bl	800c3ac <HAL_UART_Receive_DMA>
    		 timeOutUART2 =0;
 8006892:	4b7f      	ldr	r3, [pc, #508]	; (8006a90 <ReceiveHandler+0x284>)
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
    		 startCntUART2 = 0;
 8006898:	4b7c      	ldr	r3, [pc, #496]	; (8006a8c <ReceiveHandler+0x280>)
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
    	 }
     }


	 if(getPk1 == true)// if(M_UART_Data1.timeoutCnt > TIMEOUT_PKT)
 800689e:	4b7f      	ldr	r3, [pc, #508]	; (8006a9c <ReceiveHandler+0x290>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d173      	bne.n	800698e <ReceiveHandler+0x182>
	 {
		  //M_UART_Data1.getPacket = true;
		  for(; cnt < 250; cnt++ )
 80068a6:	e008      	b.n	80068ba <ReceiveHandler+0xae>
		  {
		     if(rxDataBufRd[cnt] == UART_ESCAPE_SOT)
 80068a8:	4a7d      	ldr	r2, [pc, #500]	; (8006aa0 <ReceiveHandler+0x294>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b43      	cmp	r3, #67	; 0x43
 80068b2:	d006      	beq.n	80068c2 <ReceiveHandler+0xb6>
		  for(; cnt < 250; cnt++ )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3301      	adds	r3, #1
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2bf9      	cmp	r3, #249	; 0xf9
 80068be:	ddf3      	ble.n	80068a8 <ReceiveHandler+0x9c>
 80068c0:	e000      	b.n	80068c4 <ReceiveHandler+0xb8>
		     {
		    	break;
 80068c2:	bf00      	nop
		     }
		     //cnt++;
		  }
		  while(1)
		  {
				 rxCount = 0;
 80068c4:	4b77      	ldr	r3, [pc, #476]	; (8006aa4 <ReceiveHandler+0x298>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
				 uint8_t packetReady = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	70fb      	strb	r3, [r7, #3]

				 memset((uint8_t*)&rxBuff[0], 0x00, sizeof(rxBuff));
 80068ce:	2280      	movs	r2, #128	; 0x80
 80068d0:	2100      	movs	r1, #0
 80068d2:	4875      	ldr	r0, [pc, #468]	; (8006aa8 <ReceiveHandler+0x29c>)
 80068d4:	f008 ff6d 	bl	800f7b2 <memset>
				 for(; cnt < 250; cnt ++ )
 80068d8:	e043      	b.n	8006962 <ReceiveHandler+0x156>
				 {
					 switch(rxDataBufRd[cnt])
 80068da:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <ReceiveHandler+0x294>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b44      	cmp	r3, #68	; 0x44
 80068e4:	d01a      	beq.n	800691c <ReceiveHandler+0x110>
 80068e6:	2b44      	cmp	r3, #68	; 0x44
 80068e8:	dc1b      	bgt.n	8006922 <ReceiveHandler+0x116>
 80068ea:	2b42      	cmp	r3, #66	; 0x42
 80068ec:	d002      	beq.n	80068f4 <ReceiveHandler+0xe8>
 80068ee:	2b43      	cmp	r3, #67	; 0x43
 80068f0:	d117      	bne.n	8006922 <ReceiveHandler+0x116>
					 {
					   case UART_ESCAPE_SOT: break;
 80068f2:	e026      	b.n	8006942 <ReceiveHandler+0x136>
					   case UART_ESCAPE_CHAR:
							{
								cnt++;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
								rxBuff[rxCount] = INVERT(rxDataBufRd[cnt]);
 80068fa:	4a69      	ldr	r2, [pc, #420]	; (8006aa0 <ReceiveHandler+0x294>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4a68      	ldr	r2, [pc, #416]	; (8006aa4 <ReceiveHandler+0x298>)
 8006904:	7812      	ldrb	r2, [r2, #0]
 8006906:	43db      	mvns	r3, r3
 8006908:	b2d9      	uxtb	r1, r3
 800690a:	4b67      	ldr	r3, [pc, #412]	; (8006aa8 <ReceiveHandler+0x29c>)
 800690c:	5499      	strb	r1, [r3, r2]
								rxCount++;
 800690e:	4b65      	ldr	r3, [pc, #404]	; (8006aa4 <ReceiveHandler+0x298>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	b2da      	uxtb	r2, r3
 8006916:	4b63      	ldr	r3, [pc, #396]	; (8006aa4 <ReceiveHandler+0x298>)
 8006918:	701a      	strb	r2, [r3, #0]
							}
					   break;
 800691a:	e012      	b.n	8006942 <ReceiveHandler+0x136>
					   case UART_ESCAPE_EOT:  packetReady= 1; break;
 800691c:	2301      	movs	r3, #1
 800691e:	70fb      	strb	r3, [r7, #3]
 8006920:	e00f      	b.n	8006942 <ReceiveHandler+0x136>
					   default:
						   rxBuff[rxCount] = rxDataBufRd[cnt];
 8006922:	4b60      	ldr	r3, [pc, #384]	; (8006aa4 <ReceiveHandler+0x298>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	4619      	mov	r1, r3
 8006928:	4a5d      	ldr	r2, [pc, #372]	; (8006aa0 <ReceiveHandler+0x294>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	4b5d      	ldr	r3, [pc, #372]	; (8006aa8 <ReceiveHandler+0x29c>)
 8006932:	545a      	strb	r2, [r3, r1]
						   rxCount++;
 8006934:	4b5b      	ldr	r3, [pc, #364]	; (8006aa4 <ReceiveHandler+0x298>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	4b59      	ldr	r3, [pc, #356]	; (8006aa4 <ReceiveHandler+0x298>)
 800693e:	701a      	strb	r2, [r3, #0]
					   break;
 8006940:	bf00      	nop
					 }

					 if(packetReady)
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <ReceiveHandler+0x150>
					 {
						 pm_process_rx_message(0, (uint8_t*)&rxBuff[0], rxCount, 0xFFFFFFFF);
 8006948:	4b56      	ldr	r3, [pc, #344]	; (8006aa4 <ReceiveHandler+0x298>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	f04f 33ff 	mov.w	r3, #4294967295
 8006952:	4955      	ldr	r1, [pc, #340]	; (8006aa8 <ReceiveHandler+0x29c>)
 8006954:	2000      	movs	r0, #0
 8006956:	f000 ff01 	bl	800775c <pm_process_rx_message>
						 break;
 800695a:	e005      	b.n	8006968 <ReceiveHandler+0x15c>
				 for(; cnt < 250; cnt ++ )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3301      	adds	r3, #1
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2bf9      	cmp	r3, #249	; 0xf9
 8006966:	ddb8      	ble.n	80068da <ReceiveHandler+0xce>
					 }
				 }
				 cnt++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3301      	adds	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
				 if(rxDataBufRd[cnt] != UART_ESCAPE_SOT)
 800696e:	4a4c      	ldr	r2, [pc, #304]	; (8006aa0 <ReceiveHandler+0x294>)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b43      	cmp	r3, #67	; 0x43
 8006978:	d100      	bne.n	800697c <ReceiveHandler+0x170>
		  {
 800697a:	e7a3      	b.n	80068c4 <ReceiveHandler+0xb8>
				 {
					   break;
 800697c:	bf00      	nop
				 }

			}

		    memset((uint8_t*)&rxDataBufRd[0], 0x00, sizeof(rxDataBufRd));
 800697e:	22fa      	movs	r2, #250	; 0xfa
 8006980:	2100      	movs	r1, #0
 8006982:	4847      	ldr	r0, [pc, #284]	; (8006aa0 <ReceiveHandler+0x294>)
 8006984:	f008 ff15 	bl	800f7b2 <memset>
		    //M_UART_Data1.rxCntBuff = 0;
		    //M_UART_Data1.getPacket = 0;
		    getPk1 = false;
 8006988:	4b44      	ldr	r3, [pc, #272]	; (8006a9c <ReceiveHandler+0x290>)
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
	 }

	 cnt =0;
 800698e:	2300      	movs	r3, #0
 8006990:	607b      	str	r3, [r7, #4]

	 if(getPk2 == true)// if(M_UART_Data1.timeoutCnt > TIMEOUT_PKT)
 8006992:	4b46      	ldr	r3, [pc, #280]	; (8006aac <ReceiveHandler+0x2a0>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b01      	cmp	r3, #1
 8006998:	f040 8095 	bne.w	8006ac6 <ReceiveHandler+0x2ba>
	 {
		  //M_UART_Data1.getPacket = true;
		  for(; cnt < 250; cnt++ )
 800699c:	e008      	b.n	80069b0 <ReceiveHandler+0x1a4>
		  {
		     if(rxDataBufRd2[cnt] == UART_ESCAPE_SOT)
 800699e:	4a44      	ldr	r2, [pc, #272]	; (8006ab0 <ReceiveHandler+0x2a4>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b43      	cmp	r3, #67	; 0x43
 80069a8:	d006      	beq.n	80069b8 <ReceiveHandler+0x1ac>
		  for(; cnt < 250; cnt++ )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3301      	adds	r3, #1
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2bf9      	cmp	r3, #249	; 0xf9
 80069b4:	ddf3      	ble.n	800699e <ReceiveHandler+0x192>
 80069b6:	e000      	b.n	80069ba <ReceiveHandler+0x1ae>
		     {
		    	break;
 80069b8:	bf00      	nop
		     }
		     //cnt++;
		  }
		  while(1)
		  {
				 rxCount = 0;
 80069ba:	4b3a      	ldr	r3, [pc, #232]	; (8006aa4 <ReceiveHandler+0x298>)
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
				 uint8_t packetReady = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	70bb      	strb	r3, [r7, #2]

				 memset((uint8_t*)&rxBuff[0], 0x00, sizeof(rxBuff));
 80069c4:	2280      	movs	r2, #128	; 0x80
 80069c6:	2100      	movs	r1, #0
 80069c8:	4837      	ldr	r0, [pc, #220]	; (8006aa8 <ReceiveHandler+0x29c>)
 80069ca:	f008 fef2 	bl	800f7b2 <memset>
				 for(; cnt < 250; cnt ++ )
 80069ce:	e043      	b.n	8006a58 <ReceiveHandler+0x24c>
				 {
					 switch(rxDataBufRd2[cnt])
 80069d0:	4a37      	ldr	r2, [pc, #220]	; (8006ab0 <ReceiveHandler+0x2a4>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b44      	cmp	r3, #68	; 0x44
 80069da:	d01a      	beq.n	8006a12 <ReceiveHandler+0x206>
 80069dc:	2b44      	cmp	r3, #68	; 0x44
 80069de:	dc1b      	bgt.n	8006a18 <ReceiveHandler+0x20c>
 80069e0:	2b42      	cmp	r3, #66	; 0x42
 80069e2:	d002      	beq.n	80069ea <ReceiveHandler+0x1de>
 80069e4:	2b43      	cmp	r3, #67	; 0x43
 80069e6:	d117      	bne.n	8006a18 <ReceiveHandler+0x20c>
					 {
					   case UART_ESCAPE_SOT: break;
 80069e8:	e026      	b.n	8006a38 <ReceiveHandler+0x22c>
					   case UART_ESCAPE_CHAR:
							{
								cnt++;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3301      	adds	r3, #1
 80069ee:	607b      	str	r3, [r7, #4]
								rxBuff[rxCount] = INVERT(rxDataBufRd2[cnt]);
 80069f0:	4a2f      	ldr	r2, [pc, #188]	; (8006ab0 <ReceiveHandler+0x2a4>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	4a2a      	ldr	r2, [pc, #168]	; (8006aa4 <ReceiveHandler+0x298>)
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	b2d9      	uxtb	r1, r3
 8006a00:	4b29      	ldr	r3, [pc, #164]	; (8006aa8 <ReceiveHandler+0x29c>)
 8006a02:	5499      	strb	r1, [r3, r2]
								rxCount++;
 8006a04:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <ReceiveHandler+0x298>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <ReceiveHandler+0x298>)
 8006a0e:	701a      	strb	r2, [r3, #0]
							}
					   break;
 8006a10:	e012      	b.n	8006a38 <ReceiveHandler+0x22c>
					   case UART_ESCAPE_EOT:  packetReady= 1; break;
 8006a12:	2301      	movs	r3, #1
 8006a14:	70bb      	strb	r3, [r7, #2]
 8006a16:	e00f      	b.n	8006a38 <ReceiveHandler+0x22c>
					   default:
						   rxBuff[rxCount] = rxDataBufRd2[cnt];
 8006a18:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <ReceiveHandler+0x298>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <ReceiveHandler+0x2a4>)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <ReceiveHandler+0x29c>)
 8006a28:	545a      	strb	r2, [r3, r1]
						   rxCount++;
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <ReceiveHandler+0x298>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <ReceiveHandler+0x298>)
 8006a34:	701a      	strb	r2, [r3, #0]
					   break;
 8006a36:	bf00      	nop
					 }

					 if(packetReady)
 8006a38:	78bb      	ldrb	r3, [r7, #2]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <ReceiveHandler+0x246>
					 {
						 pm_process_rx_message(1, (uint8_t*)&rxBuff[0], rxCount, 0xFFFFFFFF);
 8006a3e:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <ReceiveHandler+0x298>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f04f 33ff 	mov.w	r3, #4294967295
 8006a48:	4917      	ldr	r1, [pc, #92]	; (8006aa8 <ReceiveHandler+0x29c>)
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f000 fe86 	bl	800775c <pm_process_rx_message>
						 break;
 8006a50:	e005      	b.n	8006a5e <ReceiveHandler+0x252>
				 for(; cnt < 250; cnt ++ )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3301      	adds	r3, #1
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2bf9      	cmp	r3, #249	; 0xf9
 8006a5c:	ddb8      	ble.n	80069d0 <ReceiveHandler+0x1c4>
					 }
				 }
				 cnt++;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3301      	adds	r3, #1
 8006a62:	607b      	str	r3, [r7, #4]
				 if(rxDataBufRd2[cnt] != UART_ESCAPE_SOT)
 8006a64:	4a12      	ldr	r2, [pc, #72]	; (8006ab0 <ReceiveHandler+0x2a4>)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b43      	cmp	r3, #67	; 0x43
 8006a6e:	d121      	bne.n	8006ab4 <ReceiveHandler+0x2a8>
		  {
 8006a70:	e7a3      	b.n	80069ba <ReceiveHandler+0x1ae>
 8006a72:	bf00      	nop
 8006a74:	20000914 	.word	0x20000914
 8006a78:	200011a8 	.word	0x200011a8
 8006a7c:	200011ac 	.word	0x200011ac
 8006a80:	20000764 	.word	0x20000764
 8006a84:	20000cec 	.word	0x20000cec
 8006a88:	20000974 	.word	0x20000974
 8006a8c:	200011a9 	.word	0x200011a9
 8006a90:	200011b0 	.word	0x200011b0
 8006a94:	200007f4 	.word	0x200007f4
 8006a98:	20000ee4 	.word	0x20000ee4
 8006a9c:	20000ee2 	.word	0x20000ee2
 8006aa0:	20000de8 	.word	0x20000de8
 8006aa4:	20001234 	.word	0x20001234
 8006aa8:	200011b4 	.word	0x200011b4
 8006aac:	200010da 	.word	0x200010da
 8006ab0:	20000fe0 	.word	0x20000fe0
				 {
					   break;
 8006ab4:	bf00      	nop
				 }

			}

		    memset((uint8_t*)&rxDataBufRd2[0], 0x00, sizeof(rxDataBufRd2));
 8006ab6:	22fa      	movs	r2, #250	; 0xfa
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <ReceiveHandler+0x2c4>)
 8006abc:	f008 fe79 	bl	800f7b2 <memset>
		    //M_UART_Data1.rxCntBuff = 0;
		    //M_UART_Data1.getPacket = 0;
		    getPk2 = false;
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <ReceiveHandler+0x2c8>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
	 }


}
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000fe0 	.word	0x20000fe0
 8006ad4:	200010da 	.word	0x200010da

08006ad8 <SendRsp>:

void SendRsp( char *str)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen((char*)str), 100);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7f9 fbed 	bl	80002c0 <strlen>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	2364      	movs	r3, #100	; 0x64
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4806      	ldr	r0, [pc, #24]	; (8006b08 <SendRsp+0x30>)
 8006af0:	f005 fb70 	bl	800c1d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n", 2, 100);
 8006af4:	2364      	movs	r3, #100	; 0x64
 8006af6:	2202      	movs	r2, #2
 8006af8:	4904      	ldr	r1, [pc, #16]	; (8006b0c <SendRsp+0x34>)
 8006afa:	4803      	ldr	r0, [pc, #12]	; (8006b08 <SendRsp+0x30>)
 8006afc:	f005 fb6a 	bl	800c1d4 <HAL_UART_Transmit>
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000884 	.word	0x20000884
 8006b0c:	08012f80 	.word	0x08012f80

08006b10 <PrintParam>:

void PrintParam (uint8_t ind)
{
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	b0e5      	sub	sp, #404	; 0x194
 8006b16:	af16      	add	r7, sp, #88	; 0x58
 8006b18:	4602      	mov	r2, r0
 8006b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b1e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006b22:	701a      	strb	r2, [r3, #0]
	char tempStr[250] = {0x00};
 8006b24:	2300      	movs	r3, #0
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b2c:	22f6      	movs	r2, #246	; 0xf6
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f008 fe3e 	bl	800f7b2 <memset>

	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006b36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b3a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30
			ind +1,
			pm_measurements[ind].V_HB_1,
 8006b44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b48:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	4a78      	ldr	r2, [pc, #480]	; (8006d30 <PrintParam+0x220>)
 8006b50:	212c      	movs	r1, #44	; 0x2c
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 fd1c 	bl	8000598 <__aeabi_f2d>
 8006b60:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			pm_measurements[ind].V_OUT_A,
 8006b64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b68:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4a70      	ldr	r2, [pc, #448]	; (8006d30 <PrintParam+0x220>)
 8006b70:	212c      	movs	r1, #44	; 0x2c
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	3304      	adds	r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7f9 fd0b 	bl	8000598 <__aeabi_f2d>
 8006b82:	e9c7 0108 	strd	r0, r1, [r7, #32]
	        pm_measurements[ind].V_OUT_B,
 8006b86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b8a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4a67      	ldr	r2, [pc, #412]	; (8006d30 <PrintParam+0x220>)
 8006b92:	212c      	movs	r1, #44	; 0x2c
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7f9 fcfa 	bl	8000598 <__aeabi_f2d>
 8006ba4:	e9c7 0106 	strd	r0, r1, [r7, #24]
	        pm_measurements[ind].T_NTC_A,
 8006ba8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bac:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	4a5f      	ldr	r2, [pc, #380]	; (8006d30 <PrintParam+0x220>)
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7f9 fce9 	bl	8000598 <__aeabi_f2d>
 8006bc6:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        pm_measurements[ind].T_NTC_B,
 8006bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bce:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4a56      	ldr	r2, [pc, #344]	; (8006d30 <PrintParam+0x220>)
 8006bd6:	212c      	movs	r1, #44	; 0x2c
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	3310      	adds	r3, #16
 8006be0:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7f9 fcd8 	bl	8000598 <__aeabi_f2d>
 8006be8:	e9c7 0102 	strd	r0, r1, [r7, #8]
		    pm_measurements[ind].T_UC,
 8006bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bf0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	4a4e      	ldr	r2, [pc, #312]	; (8006d30 <PrintParam+0x220>)
 8006bf8:	212c      	movs	r1, #44	; 0x2c
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	4413      	add	r3, r2
 8006c00:	3314      	adds	r3, #20
 8006c02:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7f9 fcc7 	bl	8000598 <__aeabi_f2d>
 8006c0a:	4682      	mov	sl, r0
 8006c0c:	468b      	mov	fp, r1
            pm_measurements[ind].fuseON_OFF_State,
 8006c0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c12:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006c16:	781a      	ldrb	r2, [r3, #0]
 8006c18:	4945      	ldr	r1, [pc, #276]	; (8006d30 <PrintParam+0x220>)
 8006c1a:	232c      	movs	r3, #44	; 0x2c
 8006c1c:	fb02 f303 	mul.w	r3, r2, r3
 8006c20:	440b      	add	r3, r1
 8006c22:	3318      	adds	r3, #24
 8006c24:	781b      	ldrb	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006c26:	607b      	str	r3, [r7, #4]
	        pm_measurements[ind].fuseON_ProtectionState,
 8006c28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c2c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006c30:	781a      	ldrb	r2, [r3, #0]
 8006c32:	493f      	ldr	r1, [pc, #252]	; (8006d30 <PrintParam+0x220>)
 8006c34:	232c      	movs	r3, #44	; 0x2c
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3319      	adds	r3, #25
 8006c3e:	781b      	ldrb	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006c40:	603b      	str	r3, [r7, #0]
	        pm_measurements[ind].fuseEnabled,
 8006c42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c46:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	4938      	ldr	r1, [pc, #224]	; (8006d30 <PrintParam+0x220>)
 8006c4e:	232c      	movs	r3, #44	; 0x2c
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	440b      	add	r3, r1
 8006c56:	331a      	adds	r3, #26
 8006c58:	781b      	ldrb	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006c5a:	461e      	mov	r6, r3
	        pm_measurements[ind].fuseProtectionCurrent,
 8006c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c60:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	4932      	ldr	r1, [pc, #200]	; (8006d30 <PrintParam+0x220>)
 8006c68:	232c      	movs	r3, #44	; 0x2c
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	440b      	add	r3, r1
 8006c70:	331c      	adds	r3, #28
 8006c72:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7f9 fc8f 	bl	8000598 <__aeabi_f2d>
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	4689      	mov	r9, r1
	        pm_measurements[ind].fuseProtectionTime,
 8006c7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c82:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006c86:	781a      	ldrb	r2, [r3, #0]
 8006c88:	4929      	ldr	r1, [pc, #164]	; (8006d30 <PrintParam+0x220>)
 8006c8a:	232c      	movs	r3, #44	; 0x2c
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	440b      	add	r3, r1
 8006c92:	3320      	adds	r3, #32
 8006c94:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7f9 fc7e 	bl	8000598 <__aeabi_f2d>
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	460d      	mov	r5, r1
        	pm_measurements[ind].moduleCurrent);
 8006ca0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ca4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8006ca8:	781a      	ldrb	r2, [r3, #0]
 8006caa:	4921      	ldr	r1, [pc, #132]	; (8006d30 <PrintParam+0x220>)
 8006cac:	232c      	movs	r3, #44	; 0x2c
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3324      	adds	r3, #36	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
	sprintf(tempStr, " Param%d\n V_HB1 %.2f\n V_OUTA %.2f\n V_OUTB %.2f\n NTC_A %.2f\n NTC_B %.2f\n T_UC %.2f\n fON_OFF_State %d\n ON_PrState %d\n fEnabled: %d\n fProtectionCurrent: %.0f\n fProtectionTime: %.0f\n moduleCurrent: %.2f\n",
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7f9 fc6d 	bl	8000598 <__aeabi_f2d>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8006cc6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006cca:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8006cce:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006cd2:	960e      	str	r6, [sp, #56]	; 0x38
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	910d      	str	r1, [sp, #52]	; 0x34
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	910c      	str	r1, [sp, #48]	; 0x30
 8006cdc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006ce0:	ed97 7b02 	vldr	d7, [r7, #8]
 8006ce4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006ce8:	ed97 7b04 	vldr	d7, [r7, #16]
 8006cec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006cf0:	ed97 7b06 	vldr	d7, [r7, #24]
 8006cf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cf8:	ed97 7b08 	vldr	d7, [r7, #32]
 8006cfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d00:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006d04:	ed8d 7b00 	vstr	d7, [sp]
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <PrintParam+0x224>)
 8006d0c:	f008 fcee 	bl	800f6ec <siprintf>
	SendRsp(tempStr);
 8006d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fedf 	bl	8006ad8 <SendRsp>
	memset((char*)&pm_measurements,0x00, sizeof(pm_measurements));
 8006d1a:	2258      	movs	r2, #88	; 0x58
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4804      	ldr	r0, [pc, #16]	; (8006d30 <PrintParam+0x220>)
 8006d20:	f008 fd47 	bl	800f7b2 <memset>

}
 8006d24:	bf00      	nop
 8006d26:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	2000110c 	.word	0x2000110c
 8006d34:	08012f84 	.word	0x08012f84

08006d38 <getPWM_Val>:

uint8_t getPWM_Val( uint32_t *getPWM_Val)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  if(getVal > 100)
 8006d40:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <getPWM_Val+0x2c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b64      	cmp	r3, #100	; 0x64
 8006d46:	d904      	bls.n	8006d52 <getPWM_Val+0x1a>
  {
	  SendRsp("Value must be 0..100 ");
 8006d48:	4807      	ldr	r0, [pc, #28]	; (8006d68 <getPWM_Val+0x30>)
 8006d4a:	f7ff fec5 	bl	8006ad8 <SendRsp>
	  return 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e004      	b.n	8006d5c <getPWM_Val+0x24>
  }

   *getPWM_Val = getVal;
 8006d52:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <getPWM_Val+0x2c>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
   return 1;
 8006d5a:	2301      	movs	r3, #1
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000adc 	.word	0x20000adc
 8006d68:	0801304c 	.word	0x0801304c

08006d6c <getFuse_I>:

uint8_t getFuse_I( uint32_t *getFuseI_Val)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  if(getVal > 50)
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <getFuse_I+0x2c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b32      	cmp	r3, #50	; 0x32
 8006d7a:	d904      	bls.n	8006d86 <getFuse_I+0x1a>
  {
	  SendRsp("Value must be 0..50 ");
 8006d7c:	4807      	ldr	r0, [pc, #28]	; (8006d9c <getFuse_I+0x30>)
 8006d7e:	f7ff feab 	bl	8006ad8 <SendRsp>
	  return 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e004      	b.n	8006d90 <getFuse_I+0x24>
  }

   *getFuseI_Val = getVal;
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <getFuse_I+0x2c>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
   return 1;
 8006d8e:	2301      	movs	r3, #1
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000adc 	.word	0x20000adc
 8006d9c:	08013064 	.word	0x08013064

08006da0 <getFuse_T>:

uint8_t getFuse_T( uint32_t *getFuseI_Val)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

  if(getVal > 1000)
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <getFuse_T+0x30>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db0:	d904      	bls.n	8006dbc <getFuse_T+0x1c>
  {
	  SendRsp("Value must be 0..1000 ");
 8006db2:	4808      	ldr	r0, [pc, #32]	; (8006dd4 <getFuse_T+0x34>)
 8006db4:	f7ff fe90 	bl	8006ad8 <SendRsp>
	  return 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e004      	b.n	8006dc6 <getFuse_T+0x26>
  }

   *getFuseI_Val = getVal;
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <getFuse_T+0x30>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
   return 1;
 8006dc4:	2301      	movs	r3, #1
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000adc 	.word	0x20000adc
 8006dd4:	0801307c 	.word	0x0801307c

08006dd8 <CMD_Handler>:
float protetionCurr [2] = {0};
float protectionTime[2] = {0};
uint8_t protectionEn[2] = {0};

void CMD_Handler(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b0a0      	sub	sp, #128	; 0x80
 8006ddc:	af00      	add	r7, sp, #0
	if(numCMD == 0)
 8006dde:	4bd8      	ldr	r3, [pc, #864]	; (8007140 <CMD_Handler+0x368>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 831b 	beq.w	800741e <CMD_Handler+0x646>
	{
		return;
	}
    char tempStr[128]= {0};
 8006de8:	2300      	movs	r3, #0
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	227c      	movs	r2, #124	; 0x7c
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f008 fcdd 	bl	800f7b2 <memset>
	switch(numCMD)
 8006df8:	4bd1      	ldr	r3, [pc, #836]	; (8007140 <CMD_Handler+0x368>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	2b27      	cmp	r3, #39	; 0x27
 8006e00:	f200 82f2 	bhi.w	80073e8 <CMD_Handler+0x610>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <CMD_Handler+0x34>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006ead 	.word	0x08006ead
 8006e10:	08006f13 	.word	0x08006f13
 8006e14:	08006f79 	.word	0x08006f79
 8006e18:	08006fdf 	.word	0x08006fdf
 8006e1c:	08007045 	.word	0x08007045
 8006e20:	080070ab 	.word	0x080070ab
 8006e24:	08007111 	.word	0x08007111
 8006e28:	0800711d 	.word	0x0800711d
 8006e2c:	08007129 	.word	0x08007129
 8006e30:	08007135 	.word	0x08007135
 8006e34:	08007171 	.word	0x08007171
 8006e38:	0800717d 	.word	0x0800717d
 8006e3c:	08007189 	.word	0x08007189
 8006e40:	08007195 	.word	0x08007195
 8006e44:	080071a1 	.word	0x080071a1
 8006e48:	080071ad 	.word	0x080071ad
 8006e4c:	080071b9 	.word	0x080071b9
 8006e50:	080071c5 	.word	0x080071c5
 8006e54:	080071d1 	.word	0x080071d1
 8006e58:	080071dd 	.word	0x080071dd
 8006e5c:	080071e9 	.word	0x080071e9
 8006e60:	080071f5 	.word	0x080071f5
 8006e64:	08007201 	.word	0x08007201
 8006e68:	08007209 	.word	0x08007209
 8006e6c:	08007211 	.word	0x08007211
 8006e70:	0800721f 	.word	0x0800721f
 8006e74:	0800722d 	.word	0x0800722d
 8006e78:	0800723b 	.word	0x0800723b
 8006e7c:	08007249 	.word	0x08007249
 8006e80:	0800725d 	.word	0x0800725d
 8006e84:	08007271 	.word	0x08007271
 8006e88:	08007285 	.word	0x08007285
 8006e8c:	08007299 	.word	0x08007299
 8006e90:	080072d7 	.word	0x080072d7
 8006e94:	08007315 	.word	0x08007315
 8006e98:	08007351 	.word	0x08007351
 8006e9c:	080073cd 	.word	0x080073cd
 8006ea0:	080073db 	.word	0x080073db
 8006ea4:	0800738d 	.word	0x0800738d
 8006ea8:	080073ad 	.word	0x080073ad
	{
	   case SET_A1:
		   if( getPWM_Val(&setVal))
 8006eac:	48a5      	ldr	r0, [pc, #660]	; (8007144 <CMD_Handler+0x36c>)
 8006eae:	f7ff ff43 	bl	8006d38 <getPWM_Val>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 829b 	beq.w	80073f0 <CMD_Handler+0x618>
		   {
			   Dis_M1();
 8006eba:	f7fa f999 	bl	80011f0 <Dis_M1>
			   Dis_M2();
 8006ebe:	f7fa f9a2 	bl	8001206 <Dis_M2>
			   HAL_Delay(1);
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	f001 ff9a 	bl	8008dfc <HAL_Delay>
			   Off_A2 ();
 8006ec8:	f7fa f960 	bl	800118c <Off_A2>
			   Off_A3 ();
 8006ecc:	f7fa f968 	bl	80011a0 <Off_A3>
			   Set_A3_PWM(0);
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	f7fa f8d5 	bl	8001080 <Set_A3_PWM>
			   Set_A2_PWM(0);
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	f7fa f8c2 	bl	8001060 <Set_A2_PWM>
			   Set_A1_PWM(setVal);
 8006edc:	4b99      	ldr	r3, [pc, #612]	; (8007144 <CMD_Handler+0x36c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fa f8ac 	bl	8001040 <Set_A1_PWM>
			   sprintf(tempStr,"Set PWM A1 to %d \n", setVal );
 8006ee8:	4b96      	ldr	r3, [pc, #600]	; (8007144 <CMD_Handler+0x36c>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	463b      	mov	r3, r7
 8006eee:	4996      	ldr	r1, [pc, #600]	; (8007148 <CMD_Handler+0x370>)
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f008 fbfb 	bl	800f6ec <siprintf>
			   SendRsp(tempStr);
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fded 	bl	8006ad8 <SendRsp>
			   On_A1 ();
 8006efe:	f7fa f8ff 	bl	8001100 <On_A1>
			   HAL_Delay(1);
 8006f02:	2001      	movs	r0, #1
 8006f04:	f001 ff7a 	bl	8008dfc <HAL_Delay>
			   En_M1();
 8006f08:	f7fa f988 	bl	800121c <En_M1>
			   En_M2();
 8006f0c:	f7fa f991 	bl	8001232 <En_M2>
		   }
	   break;
 8006f10:	e26e      	b.n	80073f0 <CMD_Handler+0x618>

	   case	SET_A2:
		   if( getPWM_Val(&setVal))
 8006f12:	488c      	ldr	r0, [pc, #560]	; (8007144 <CMD_Handler+0x36c>)
 8006f14:	f7ff ff10 	bl	8006d38 <getPWM_Val>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 826a 	beq.w	80073f4 <CMD_Handler+0x61c>
		   {
			   Dis_M1();
 8006f20:	f7fa f966 	bl	80011f0 <Dis_M1>
			   Dis_M2();
 8006f24:	f7fa f96f 	bl	8001206 <Dis_M2>
			   HAL_Delay(1);
 8006f28:	2001      	movs	r0, #1
 8006f2a:	f001 ff67 	bl	8008dfc <HAL_Delay>
			   Off_A1 ();
 8006f2e:	f7fa f923 	bl	8001178 <Off_A1>
			   Off_A3 ();
 8006f32:	f7fa f935 	bl	80011a0 <Off_A3>
			   Set_A3_PWM(0);
 8006f36:	2000      	movs	r0, #0
 8006f38:	f7fa f8a2 	bl	8001080 <Set_A3_PWM>
			   Set_A1_PWM(0);
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7fa f87f 	bl	8001040 <Set_A1_PWM>
		  	   Set_A2_PWM(setVal);
 8006f42:	4b80      	ldr	r3, [pc, #512]	; (8007144 <CMD_Handler+0x36c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fa f889 	bl	8001060 <Set_A2_PWM>
		  	   sprintf(tempStr, "Set PWM A2 to %d \n", setVal );
 8006f4e:	4b7d      	ldr	r3, [pc, #500]	; (8007144 <CMD_Handler+0x36c>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	463b      	mov	r3, r7
 8006f54:	497d      	ldr	r1, [pc, #500]	; (800714c <CMD_Handler+0x374>)
 8006f56:	4618      	mov	r0, r3
 8006f58:	f008 fbc8 	bl	800f6ec <siprintf>
		  	   SendRsp(tempStr);
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff fdba 	bl	8006ad8 <SendRsp>
		  	   On_A2 ();
 8006f64:	f7fa f8d6 	bl	8001114 <On_A2>
		  	   HAL_Delay(1);
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f001 ff47 	bl	8008dfc <HAL_Delay>
		  	   En_M1();
 8006f6e:	f7fa f955 	bl	800121c <En_M1>
		  	   En_M2();
 8006f72:	f7fa f95e 	bl	8001232 <En_M2>

		   }
	   break;
 8006f76:	e23d      	b.n	80073f4 <CMD_Handler+0x61c>

	   case SET_A3:
		   if( getPWM_Val(&setVal))
 8006f78:	4872      	ldr	r0, [pc, #456]	; (8007144 <CMD_Handler+0x36c>)
 8006f7a:	f7ff fedd 	bl	8006d38 <getPWM_Val>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8239 	beq.w	80073f8 <CMD_Handler+0x620>
		   {
			    Dis_M1();
 8006f86:	f7fa f933 	bl	80011f0 <Dis_M1>
			    Dis_M2();
 8006f8a:	f7fa f93c 	bl	8001206 <Dis_M2>
			  	HAL_Delay(1);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f001 ff34 	bl	8008dfc <HAL_Delay>
			    Off_A1 ();
 8006f94:	f7fa f8f0 	bl	8001178 <Off_A1>
			    Off_A2 ();
 8006f98:	f7fa f8f8 	bl	800118c <Off_A2>
			    Set_A1_PWM(0);
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f7fa f84f 	bl	8001040 <Set_A1_PWM>
			    Set_A2_PWM(0);
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f7fa f85c 	bl	8001060 <Set_A2_PWM>
		     	Set_A3_PWM(setVal);
 8006fa8:	4b66      	ldr	r3, [pc, #408]	; (8007144 <CMD_Handler+0x36c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fa f866 	bl	8001080 <Set_A3_PWM>
		   		sprintf(tempStr, "Set PWM A3 to %d \n", setVal );
 8006fb4:	4b63      	ldr	r3, [pc, #396]	; (8007144 <CMD_Handler+0x36c>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	463b      	mov	r3, r7
 8006fba:	4965      	ldr	r1, [pc, #404]	; (8007150 <CMD_Handler+0x378>)
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f008 fb95 	bl	800f6ec <siprintf>
		   		SendRsp(tempStr);
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fd87 	bl	8006ad8 <SendRsp>
		   		On_A3 ();
 8006fca:	f7fa f8ad 	bl	8001128 <On_A3>
		   		HAL_Delay(1);
 8006fce:	2001      	movs	r0, #1
 8006fd0:	f001 ff14 	bl	8008dfc <HAL_Delay>
                En_M1();
 8006fd4:	f7fa f922 	bl	800121c <En_M1>
		   		En_M2();
 8006fd8:	f7fa f92b 	bl	8001232 <En_M2>
		   }
	   break;
 8006fdc:	e20c      	b.n	80073f8 <CMD_Handler+0x620>
	   case	SET_B1:
		   if( getPWM_Val(&setVal))
 8006fde:	4859      	ldr	r0, [pc, #356]	; (8007144 <CMD_Handler+0x36c>)
 8006fe0:	f7ff feaa 	bl	8006d38 <getPWM_Val>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8208 	beq.w	80073fc <CMD_Handler+0x624>
		    {
			    Dis_M1();
 8006fec:	f7fa f900 	bl	80011f0 <Dis_M1>
			    Dis_M2();
 8006ff0:	f7fa f909 	bl	8001206 <Dis_M2>
			  	HAL_Delay(1);
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f001 ff01 	bl	8008dfc <HAL_Delay>

			    Off_B2 ();
 8006ffa:	f7fa f8e5 	bl	80011c8 <Off_B2>
			    Off_B3 ();
 8006ffe:	f7fa f8ed 	bl	80011dc <Off_B3>
			    Set_B2_PWM(0);
 8007002:	2000      	movs	r0, #0
 8007004:	f7fa f85c 	bl	80010c0 <Set_B2_PWM>
			    Set_B3_PWM(0);
 8007008:	2000      	movs	r0, #0
 800700a:	f7fa f869 	bl	80010e0 <Set_B3_PWM>
			    Set_B1_PWM(setVal);
 800700e:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <CMD_Handler+0x36c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	4618      	mov	r0, r3
 8007016:	f7fa f843 	bl	80010a0 <Set_B1_PWM>
		   		sprintf(tempStr, "Set PWM B1 to %d \n", setVal );
 800701a:	4b4a      	ldr	r3, [pc, #296]	; (8007144 <CMD_Handler+0x36c>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	463b      	mov	r3, r7
 8007020:	494c      	ldr	r1, [pc, #304]	; (8007154 <CMD_Handler+0x37c>)
 8007022:	4618      	mov	r0, r3
 8007024:	f008 fb62 	bl	800f6ec <siprintf>
		   		SendRsp(tempStr);
 8007028:	463b      	mov	r3, r7
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fd54 	bl	8006ad8 <SendRsp>
		   		On_B1 ();
 8007030:	f7fa f884 	bl	800113c <On_B1>
		   		HAL_Delay(1);
 8007034:	2001      	movs	r0, #1
 8007036:	f001 fee1 	bl	8008dfc <HAL_Delay>
                En_M1();
 800703a:	f7fa f8ef 	bl	800121c <En_M1>
		   		En_M2();
 800703e:	f7fa f8f8 	bl	8001232 <En_M2>
		    }
	   break;
 8007042:	e1db      	b.n	80073fc <CMD_Handler+0x624>
	   case	SET_B2:
		   if( getPWM_Val(&setVal))
 8007044:	483f      	ldr	r0, [pc, #252]	; (8007144 <CMD_Handler+0x36c>)
 8007046:	f7ff fe77 	bl	8006d38 <getPWM_Val>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 81d7 	beq.w	8007400 <CMD_Handler+0x628>
		    {
			    Dis_M1();
 8007052:	f7fa f8cd 	bl	80011f0 <Dis_M1>
			  	Dis_M2();
 8007056:	f7fa f8d6 	bl	8001206 <Dis_M2>
			  	HAL_Delay(1);
 800705a:	2001      	movs	r0, #1
 800705c:	f001 fece 	bl	8008dfc <HAL_Delay>
			    Off_B1 ();
 8007060:	f7fa f8a8 	bl	80011b4 <Off_B1>
			    Off_B3 ();
 8007064:	f7fa f8ba 	bl	80011dc <Off_B3>
			    Set_B1_PWM(0);
 8007068:	2000      	movs	r0, #0
 800706a:	f7fa f819 	bl	80010a0 <Set_B1_PWM>
			  	Set_B3_PWM(0);
 800706e:	2000      	movs	r0, #0
 8007070:	f7fa f836 	bl	80010e0 <Set_B3_PWM>
		   		Set_B2_PWM(setVal);
 8007074:	4b33      	ldr	r3, [pc, #204]	; (8007144 <CMD_Handler+0x36c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	4618      	mov	r0, r3
 800707c:	f7fa f820 	bl	80010c0 <Set_B2_PWM>
		   		sprintf(tempStr, "Set PWM B2 to %d \n", setVal );
 8007080:	4b30      	ldr	r3, [pc, #192]	; (8007144 <CMD_Handler+0x36c>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	463b      	mov	r3, r7
 8007086:	4934      	ldr	r1, [pc, #208]	; (8007158 <CMD_Handler+0x380>)
 8007088:	4618      	mov	r0, r3
 800708a:	f008 fb2f 	bl	800f6ec <siprintf>
		   		SendRsp(tempStr);
 800708e:	463b      	mov	r3, r7
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fd21 	bl	8006ad8 <SendRsp>
		   		On_B2 ();
 8007096:	f7fa f85b 	bl	8001150 <On_B2>
		   		HAL_Delay(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f001 feae 	bl	8008dfc <HAL_Delay>
                En_M1();
 80070a0:	f7fa f8bc 	bl	800121c <En_M1>
		   		En_M2();
 80070a4:	f7fa f8c5 	bl	8001232 <En_M2>
		    }
	   break;
 80070a8:	e1aa      	b.n	8007400 <CMD_Handler+0x628>
	   case	SET_B3:
		   if( getPWM_Val(&setVal))
 80070aa:	4826      	ldr	r0, [pc, #152]	; (8007144 <CMD_Handler+0x36c>)
 80070ac:	f7ff fe44 	bl	8006d38 <getPWM_Val>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 81a6 	beq.w	8007404 <CMD_Handler+0x62c>
		    {
			    Dis_M1();
 80070b8:	f7fa f89a 	bl	80011f0 <Dis_M1>
			  	Dis_M2();
 80070bc:	f7fa f8a3 	bl	8001206 <Dis_M2>
			  	HAL_Delay(1);
 80070c0:	2001      	movs	r0, #1
 80070c2:	f001 fe9b 	bl	8008dfc <HAL_Delay>
			    Off_B1 ();
 80070c6:	f7fa f875 	bl	80011b4 <Off_B1>
			    Off_B2 ();
 80070ca:	f7fa f87d 	bl	80011c8 <Off_B2>
			    Set_B1_PWM(0);
 80070ce:	2000      	movs	r0, #0
 80070d0:	f7f9 ffe6 	bl	80010a0 <Set_B1_PWM>
			  	Set_B2_PWM(0);
 80070d4:	2000      	movs	r0, #0
 80070d6:	f7f9 fff3 	bl	80010c0 <Set_B2_PWM>
		   		Set_B3_PWM(setVal);
 80070da:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <CMD_Handler+0x36c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7f9 fffd 	bl	80010e0 <Set_B3_PWM>
		   		sprintf(tempStr, "Set PWM B3 to %d \n", setVal );
 80070e6:	4b17      	ldr	r3, [pc, #92]	; (8007144 <CMD_Handler+0x36c>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	463b      	mov	r3, r7
 80070ec:	491b      	ldr	r1, [pc, #108]	; (800715c <CMD_Handler+0x384>)
 80070ee:	4618      	mov	r0, r3
 80070f0:	f008 fafc 	bl	800f6ec <siprintf>
		   		SendRsp(tempStr);
 80070f4:	463b      	mov	r3, r7
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fcee 	bl	8006ad8 <SendRsp>
		   		On_B3 ();
 80070fc:	f7fa f832 	bl	8001164 <On_B3>
		   		HAL_Delay(1);
 8007100:	2001      	movs	r0, #1
 8007102:	f001 fe7b 	bl	8008dfc <HAL_Delay>
                En_M1();
 8007106:	f7fa f889 	bl	800121c <En_M1>
		   		En_M2();
 800710a:	f7fa f892 	bl	8001232 <En_M2>
		    }
	   break;
 800710e:	e179      	b.n	8007404 <CMD_Handler+0x62c>
	   case	ON_A1:

		    On_A1();
 8007110:	f7f9 fff6 	bl	8001100 <On_A1>
		    SendRsp("ON PWM A1");
 8007114:	4812      	ldr	r0, [pc, #72]	; (8007160 <CMD_Handler+0x388>)
 8007116:	f7ff fcdf 	bl	8006ad8 <SendRsp>
	   break;
 800711a:	e17c      	b.n	8007416 <CMD_Handler+0x63e>
	   case	ON_A2:
		   On_A2();
 800711c:	f7f9 fffa 	bl	8001114 <On_A2>
		   SendRsp("ON PWM A2");
 8007120:	4810      	ldr	r0, [pc, #64]	; (8007164 <CMD_Handler+0x38c>)
 8007122:	f7ff fcd9 	bl	8006ad8 <SendRsp>
	   break;
 8007126:	e176      	b.n	8007416 <CMD_Handler+0x63e>
	   case	ON_A3:

		   On_A3();
 8007128:	f7f9 fffe 	bl	8001128 <On_A3>
		   SendRsp("ON PWM A3");
 800712c:	480e      	ldr	r0, [pc, #56]	; (8007168 <CMD_Handler+0x390>)
 800712e:	f7ff fcd3 	bl	8006ad8 <SendRsp>
	   break;
 8007132:	e170      	b.n	8007416 <CMD_Handler+0x63e>
	   case	ON_B1:
		   On_B1();
 8007134:	f7fa f802 	bl	800113c <On_B1>
		   SendRsp("ON PWM B1");
 8007138:	480c      	ldr	r0, [pc, #48]	; (800716c <CMD_Handler+0x394>)
 800713a:	f7ff fccd 	bl	8006ad8 <SendRsp>

	   break;
 800713e:	e16a      	b.n	8007416 <CMD_Handler+0x63e>
 8007140:	20000ad7 	.word	0x20000ad7
 8007144:	20001244 	.word	0x20001244
 8007148:	08013094 	.word	0x08013094
 800714c:	080130a8 	.word	0x080130a8
 8007150:	080130bc 	.word	0x080130bc
 8007154:	080130d0 	.word	0x080130d0
 8007158:	080130e4 	.word	0x080130e4
 800715c:	080130f8 	.word	0x080130f8
 8007160:	0801310c 	.word	0x0801310c
 8007164:	08013118 	.word	0x08013118
 8007168:	08013124 	.word	0x08013124
 800716c:	08013130 	.word	0x08013130
	   case	ON_B2:
	   		On_B2();
 8007170:	f7f9 ffee 	bl	8001150 <On_B2>
	   		SendRsp("ON PWM B2");
 8007174:	48ac      	ldr	r0, [pc, #688]	; (8007428 <CMD_Handler+0x650>)
 8007176:	f7ff fcaf 	bl	8006ad8 <SendRsp>

	   break;
 800717a:	e14c      	b.n	8007416 <CMD_Handler+0x63e>
	   case	ON_B3:
	   	   	On_B3();
 800717c:	f7f9 fff2 	bl	8001164 <On_B3>
	   	   	SendRsp("ON PWM B3");
 8007180:	48aa      	ldr	r0, [pc, #680]	; (800742c <CMD_Handler+0x654>)
 8007182:	f7ff fca9 	bl	8006ad8 <SendRsp>
	   break;
 8007186:	e146      	b.n	8007416 <CMD_Handler+0x63e>
	   case	OFF_A1:
		   Off_A1();
 8007188:	f7f9 fff6 	bl	8001178 <Off_A1>
		   SendRsp("OFF A1");
 800718c:	48a8      	ldr	r0, [pc, #672]	; (8007430 <CMD_Handler+0x658>)
 800718e:	f7ff fca3 	bl	8006ad8 <SendRsp>
	   break;
 8007192:	e140      	b.n	8007416 <CMD_Handler+0x63e>
	   case	OFF_A2:
		   Off_A2();
 8007194:	f7f9 fffa 	bl	800118c <Off_A2>
		   SendRsp("OFF A2");
 8007198:	48a6      	ldr	r0, [pc, #664]	; (8007434 <CMD_Handler+0x65c>)
 800719a:	f7ff fc9d 	bl	8006ad8 <SendRsp>
	   break;
 800719e:	e13a      	b.n	8007416 <CMD_Handler+0x63e>
	   case	OFF_A3:
		   Off_A3();
 80071a0:	f7f9 fffe 	bl	80011a0 <Off_A3>
		   SendRsp("OFF A3");
 80071a4:	48a4      	ldr	r0, [pc, #656]	; (8007438 <CMD_Handler+0x660>)
 80071a6:	f7ff fc97 	bl	8006ad8 <SendRsp>
	   break;
 80071aa:	e134      	b.n	8007416 <CMD_Handler+0x63e>
	   case	OFF_B1:
		    Off_B1();
 80071ac:	f7fa f802 	bl	80011b4 <Off_B1>
		    SendRsp("OFF B1");
 80071b0:	48a2      	ldr	r0, [pc, #648]	; (800743c <CMD_Handler+0x664>)
 80071b2:	f7ff fc91 	bl	8006ad8 <SendRsp>
	   break;
 80071b6:	e12e      	b.n	8007416 <CMD_Handler+0x63e>
	   case	OFF_B2:
	   		Off_B2();
 80071b8:	f7fa f806 	bl	80011c8 <Off_B2>
	   		SendRsp("OFF B2");
 80071bc:	48a0      	ldr	r0, [pc, #640]	; (8007440 <CMD_Handler+0x668>)
 80071be:	f7ff fc8b 	bl	8006ad8 <SendRsp>
	   break;
 80071c2:	e128      	b.n	8007416 <CMD_Handler+0x63e>
	   case	OFF_B3:
	   	   	Off_B3();
 80071c4:	f7fa f80a 	bl	80011dc <Off_B3>
	   	   	SendRsp("OFF B3");
 80071c8:	489e      	ldr	r0, [pc, #632]	; (8007444 <CMD_Handler+0x66c>)
 80071ca:	f7ff fc85 	bl	8006ad8 <SendRsp>
	   break;
 80071ce:	e122      	b.n	8007416 <CMD_Handler+0x63e>
	   case	DIS_M1:
		   Dis_M1();
 80071d0:	f7fa f80e 	bl	80011f0 <Dis_M1>
		   SendRsp("DIS M1");
 80071d4:	489c      	ldr	r0, [pc, #624]	; (8007448 <CMD_Handler+0x670>)
 80071d6:	f7ff fc7f 	bl	8006ad8 <SendRsp>
	   break;
 80071da:	e11c      	b.n	8007416 <CMD_Handler+0x63e>
	   case DIS_M2:
		   Dis_M2();
 80071dc:	f7fa f813 	bl	8001206 <Dis_M2>
		   SendRsp("DIS M2");
 80071e0:	489a      	ldr	r0, [pc, #616]	; (800744c <CMD_Handler+0x674>)
 80071e2:	f7ff fc79 	bl	8006ad8 <SendRsp>
	   break;
 80071e6:	e116      	b.n	8007416 <CMD_Handler+0x63e>
	   case EN_M1:
		   En_M1();
 80071e8:	f7fa f818 	bl	800121c <En_M1>
		   SendRsp("EN M1");
 80071ec:	4898      	ldr	r0, [pc, #608]	; (8007450 <CMD_Handler+0x678>)
 80071ee:	f7ff fc73 	bl	8006ad8 <SendRsp>
	   break;
 80071f2:	e110      	b.n	8007416 <CMD_Handler+0x63e>
	   case	EN_M2:
		   En_M2();
 80071f4:	f7fa f81d 	bl	8001232 <En_M2>
		   SendRsp("EN M2");
 80071f8:	4896      	ldr	r0, [pc, #600]	; (8007454 <CMD_Handler+0x67c>)
 80071fa:	f7ff fc6d 	bl	8006ad8 <SendRsp>
	   break;
 80071fe:	e10a      	b.n	8007416 <CMD_Handler+0x63e>
	   case G_PARAM1:
		    PrintParam(0);
 8007200:	2000      	movs	r0, #0
 8007202:	f7ff fc85 	bl	8006b10 <PrintParam>
	   break;
 8007206:	e106      	b.n	8007416 <CMD_Handler+0x63e>
	   case G_PARAM2:
		    PrintParam(1);
 8007208:	2001      	movs	r0, #1
 800720a:	f7ff fc81 	bl	8006b10 <PrintParam>
	   break;
 800720e:	e102      	b.n	8007416 <CMD_Handler+0x63e>
	   case  SW1_ON:
		   switch_state[0] = true;
 8007210:	4b91      	ldr	r3, [pc, #580]	; (8007458 <CMD_Handler+0x680>)
 8007212:	2201      	movs	r2, #1
 8007214:	701a      	strb	r2, [r3, #0]
		   SendRsp("SW1 is ON");
 8007216:	4891      	ldr	r0, [pc, #580]	; (800745c <CMD_Handler+0x684>)
 8007218:	f7ff fc5e 	bl	8006ad8 <SendRsp>
	   break;
 800721c:	e0fb      	b.n	8007416 <CMD_Handler+0x63e>
	   case SW2_ON:
		   switch_state[1] = true;
 800721e:	4b8e      	ldr	r3, [pc, #568]	; (8007458 <CMD_Handler+0x680>)
 8007220:	2201      	movs	r2, #1
 8007222:	705a      	strb	r2, [r3, #1]
		   SendRsp("SW2 is ON");
 8007224:	488e      	ldr	r0, [pc, #568]	; (8007460 <CMD_Handler+0x688>)
 8007226:	f7ff fc57 	bl	8006ad8 <SendRsp>
	   break;
 800722a:	e0f4      	b.n	8007416 <CMD_Handler+0x63e>
	   case SW1_OFF:
		   switch_state[0] = false;
 800722c:	4b8a      	ldr	r3, [pc, #552]	; (8007458 <CMD_Handler+0x680>)
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
		   SendRsp("SW1 is OFF");
 8007232:	488c      	ldr	r0, [pc, #560]	; (8007464 <CMD_Handler+0x68c>)
 8007234:	f7ff fc50 	bl	8006ad8 <SendRsp>
	   break;
 8007238:	e0ed      	b.n	8007416 <CMD_Handler+0x63e>
	   case SW2_OFF:
		   switch_state[1] = false;
 800723a:	4b87      	ldr	r3, [pc, #540]	; (8007458 <CMD_Handler+0x680>)
 800723c:	2200      	movs	r2, #0
 800723e:	705a      	strb	r2, [r3, #1]
		   SendRsp("SW1 is OFF");
 8007240:	4888      	ldr	r0, [pc, #544]	; (8007464 <CMD_Handler+0x68c>)
 8007242:	f7ff fc49 	bl	8006ad8 <SendRsp>
	   break;
 8007246:	e0e6      	b.n	8007416 <CMD_Handler+0x63e>
	   case ON1:
		       fuse_state[0] = true;
 8007248:	4b87      	ldr	r3, [pc, #540]	; (8007468 <CMD_Handler+0x690>)
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
		       save_param[0] = true;
 800724e:	4b87      	ldr	r3, [pc, #540]	; (800746c <CMD_Handler+0x694>)
 8007250:	2201      	movs	r2, #1
 8007252:	701a      	strb	r2, [r3, #0]
	  		   SendRsp("FUSE 1 is ON");
 8007254:	4886      	ldr	r0, [pc, #536]	; (8007470 <CMD_Handler+0x698>)
 8007256:	f7ff fc3f 	bl	8006ad8 <SendRsp>
	  	   break;
 800725a:	e0dc      	b.n	8007416 <CMD_Handler+0x63e>
	   case ON2:
		       fuse_state[1] = true;
 800725c:	4b82      	ldr	r3, [pc, #520]	; (8007468 <CMD_Handler+0x690>)
 800725e:	2201      	movs	r2, #1
 8007260:	705a      	strb	r2, [r3, #1]
		   	   save_param[1] = true;
 8007262:	4b82      	ldr	r3, [pc, #520]	; (800746c <CMD_Handler+0x694>)
 8007264:	2201      	movs	r2, #1
 8007266:	705a      	strb	r2, [r3, #1]
	  		   SendRsp("FUSE 2 is ON");
 8007268:	4882      	ldr	r0, [pc, #520]	; (8007474 <CMD_Handler+0x69c>)
 800726a:	f7ff fc35 	bl	8006ad8 <SendRsp>
	  	   break;
 800726e:	e0d2      	b.n	8007416 <CMD_Handler+0x63e>
	   case OFF1:
		       fuse_state[0] = false;
 8007270:	4b7d      	ldr	r3, [pc, #500]	; (8007468 <CMD_Handler+0x690>)
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
		   	   save_param[0] = true;
 8007276:	4b7d      	ldr	r3, [pc, #500]	; (800746c <CMD_Handler+0x694>)
 8007278:	2201      	movs	r2, #1
 800727a:	701a      	strb	r2, [r3, #0]
	  		   SendRsp("FUSE 1 is OFF");
 800727c:	487e      	ldr	r0, [pc, #504]	; (8007478 <CMD_Handler+0x6a0>)
 800727e:	f7ff fc2b 	bl	8006ad8 <SendRsp>
	  	   break;
 8007282:	e0c8      	b.n	8007416 <CMD_Handler+0x63e>
	   case OFF2:
		       fuse_state[1] = false;
 8007284:	4b78      	ldr	r3, [pc, #480]	; (8007468 <CMD_Handler+0x690>)
 8007286:	2200      	movs	r2, #0
 8007288:	705a      	strb	r2, [r3, #1]
		   	   save_param[1] = true;
 800728a:	4b78      	ldr	r3, [pc, #480]	; (800746c <CMD_Handler+0x694>)
 800728c:	2201      	movs	r2, #1
 800728e:	705a      	strb	r2, [r3, #1]
	  		   SendRsp("FUSE 2 is OFF");
 8007290:	487a      	ldr	r0, [pc, #488]	; (800747c <CMD_Handler+0x6a4>)
 8007292:	f7ff fc21 	bl	8006ad8 <SendRsp>
	   break;
 8007296:	e0be      	b.n	8007416 <CMD_Handler+0x63e>

	   case SET1_I:
		        if( getFuse_I(&setVal))
 8007298:	4879      	ldr	r0, [pc, #484]	; (8007480 <CMD_Handler+0x6a8>)
 800729a:	f7ff fd67 	bl	8006d6c <getFuse_I>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80b1 	beq.w	8007408 <CMD_Handler+0x630>
		        {
		        	protetionCurr[0] = setVal;
 80072a6:	4b76      	ldr	r3, [pc, #472]	; (8007480 <CMD_Handler+0x6a8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	4b74      	ldr	r3, [pc, #464]	; (8007484 <CMD_Handler+0x6ac>)
 80072b4:	edc3 7a00 	vstr	s15, [r3]
		        	savePrtCurr[0] = true;;
 80072b8:	4b73      	ldr	r3, [pc, #460]	; (8007488 <CMD_Handler+0x6b0>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
		        	sprintf(tempStr, "Set Protection Current M1  to %d \n",  setVal);
 80072be:	4b70      	ldr	r3, [pc, #448]	; (8007480 <CMD_Handler+0x6a8>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	463b      	mov	r3, r7
 80072c4:	4971      	ldr	r1, [pc, #452]	; (800748c <CMD_Handler+0x6b4>)
 80072c6:	4618      	mov	r0, r3
 80072c8:	f008 fa10 	bl	800f6ec <siprintf>
		        	SendRsp(tempStr);
 80072cc:	463b      	mov	r3, r7
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fc02 	bl	8006ad8 <SendRsp>
		        }
	   break;
 80072d4:	e098      	b.n	8007408 <CMD_Handler+0x630>
	   case SET1_T:
		        if(getFuse_T(&setVal))
 80072d6:	486a      	ldr	r0, [pc, #424]	; (8007480 <CMD_Handler+0x6a8>)
 80072d8:	f7ff fd62 	bl	8006da0 <getFuse_T>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8094 	beq.w	800740c <CMD_Handler+0x634>
		        {
		        	protectionTime[0] =  setVal;
 80072e4:	4b66      	ldr	r3, [pc, #408]	; (8007480 <CMD_Handler+0x6a8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f0:	4b67      	ldr	r3, [pc, #412]	; (8007490 <CMD_Handler+0x6b8>)
 80072f2:	edc3 7a00 	vstr	s15, [r3]
                    saveTime[0] = true;
 80072f6:	4b67      	ldr	r3, [pc, #412]	; (8007494 <CMD_Handler+0x6bc>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
                    sprintf(tempStr, "Set Protection Time M1  to %d \n",  setVal);
 80072fc:	4b60      	ldr	r3, [pc, #384]	; (8007480 <CMD_Handler+0x6a8>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	463b      	mov	r3, r7
 8007302:	4965      	ldr	r1, [pc, #404]	; (8007498 <CMD_Handler+0x6c0>)
 8007304:	4618      	mov	r0, r3
 8007306:	f008 f9f1 	bl	800f6ec <siprintf>
                    SendRsp(tempStr);
 800730a:	463b      	mov	r3, r7
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fbe3 	bl	8006ad8 <SendRsp>
		        }
	   break;
 8007312:	e07b      	b.n	800740c <CMD_Handler+0x634>
	   case SET2_I:
		          if( getFuse_I(&setVal))
 8007314:	485a      	ldr	r0, [pc, #360]	; (8007480 <CMD_Handler+0x6a8>)
 8007316:	f7ff fd29 	bl	8006d6c <getFuse_I>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d077      	beq.n	8007410 <CMD_Handler+0x638>
				  {
				     protetionCurr[1] = setVal;
 8007320:	4b57      	ldr	r3, [pc, #348]	; (8007480 <CMD_Handler+0x6a8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732c:	4b55      	ldr	r3, [pc, #340]	; (8007484 <CMD_Handler+0x6ac>)
 800732e:	edc3 7a01 	vstr	s15, [r3, #4]
				     savePrtCurr[1] = true;
 8007332:	4b55      	ldr	r3, [pc, #340]	; (8007488 <CMD_Handler+0x6b0>)
 8007334:	2201      	movs	r2, #1
 8007336:	705a      	strb	r2, [r3, #1]
				     sprintf(tempStr, "Set Protection Current M2  to %d \n",  setVal);
 8007338:	4b51      	ldr	r3, [pc, #324]	; (8007480 <CMD_Handler+0x6a8>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	463b      	mov	r3, r7
 800733e:	4957      	ldr	r1, [pc, #348]	; (800749c <CMD_Handler+0x6c4>)
 8007340:	4618      	mov	r0, r3
 8007342:	f008 f9d3 	bl	800f6ec <siprintf>
                     SendRsp(tempStr);
 8007346:	463b      	mov	r3, r7
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fbc5 	bl	8006ad8 <SendRsp>
				  }
	   break;
 800734e:	e05f      	b.n	8007410 <CMD_Handler+0x638>
	   case SET2_T:
		           if(getFuse_T(&setVal))
 8007350:	484b      	ldr	r0, [pc, #300]	; (8007480 <CMD_Handler+0x6a8>)
 8007352:	f7ff fd25 	bl	8006da0 <getFuse_T>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d05b      	beq.n	8007414 <CMD_Handler+0x63c>
		   		   {
		   		      protectionTime[1] =  setVal;
 800735c:	4b48      	ldr	r3, [pc, #288]	; (8007480 <CMD_Handler+0x6a8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	4b49      	ldr	r3, [pc, #292]	; (8007490 <CMD_Handler+0x6b8>)
 800736a:	edc3 7a01 	vstr	s15, [r3, #4]
		              saveTime[1] = true;
 800736e:	4b49      	ldr	r3, [pc, #292]	; (8007494 <CMD_Handler+0x6bc>)
 8007370:	2201      	movs	r2, #1
 8007372:	705a      	strb	r2, [r3, #1]
		              sprintf(tempStr, "Set Protection Time M2  to %d \n",  setVal);
 8007374:	4b42      	ldr	r3, [pc, #264]	; (8007480 <CMD_Handler+0x6a8>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	463b      	mov	r3, r7
 800737a:	4949      	ldr	r1, [pc, #292]	; (80074a0 <CMD_Handler+0x6c8>)
 800737c:	4618      	mov	r0, r3
 800737e:	f008 f9b5 	bl	800f6ec <siprintf>
		              SendRsp(tempStr);
 8007382:	463b      	mov	r3, r7
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fba7 	bl	8006ad8 <SendRsp>
		   		   }

	   break;
 800738a:	e043      	b.n	8007414 <CMD_Handler+0x63c>
	   case EN1_FUSE:
		    protectionEn[0] =  1;
 800738c:	4b45      	ldr	r3, [pc, #276]	; (80074a4 <CMD_Handler+0x6cc>)
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
		 	saveEn[0] = true;
 8007392:	4b45      	ldr	r3, [pc, #276]	; (80074a8 <CMD_Handler+0x6d0>)
 8007394:	2201      	movs	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
		 	sprintf(tempStr, "Set Protection Enale M1 \n");
 8007398:	463b      	mov	r3, r7
 800739a:	4944      	ldr	r1, [pc, #272]	; (80074ac <CMD_Handler+0x6d4>)
 800739c:	4618      	mov	r0, r3
 800739e:	f008 f9a5 	bl	800f6ec <siprintf>
		 	SendRsp(tempStr);
 80073a2:	463b      	mov	r3, r7
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fb97 	bl	8006ad8 <SendRsp>

	   break;
 80073aa:	e034      	b.n	8007416 <CMD_Handler+0x63e>
	   case EN2_FUSE:
		    protectionEn[1] =  1;
 80073ac:	4b3d      	ldr	r3, [pc, #244]	; (80074a4 <CMD_Handler+0x6cc>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	705a      	strb	r2, [r3, #1]
		   	saveEn[1] = true;
 80073b2:	4b3d      	ldr	r3, [pc, #244]	; (80074a8 <CMD_Handler+0x6d0>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	705a      	strb	r2, [r3, #1]
		   	sprintf(tempStr, "Set Protection Enale M2 \n");
 80073b8:	463b      	mov	r3, r7
 80073ba:	493d      	ldr	r1, [pc, #244]	; (80074b0 <CMD_Handler+0x6d8>)
 80073bc:	4618      	mov	r0, r3
 80073be:	f008 f995 	bl	800f6ec <siprintf>
		   	SendRsp(tempStr);
 80073c2:	463b      	mov	r3, r7
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff fb87 	bl	8006ad8 <SendRsp>
	   break;
 80073ca:	e024      	b.n	8007416 <CMD_Handler+0x63e>
	   case RESTART1:
             restartFuse[0] = true;
 80073cc:	4b39      	ldr	r3, [pc, #228]	; (80074b4 <CMD_Handler+0x6dc>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
             SendRsp("Restart fuse M1");
 80073d2:	4839      	ldr	r0, [pc, #228]	; (80074b8 <CMD_Handler+0x6e0>)
 80073d4:	f7ff fb80 	bl	8006ad8 <SendRsp>
	   break;
 80073d8:	e01d      	b.n	8007416 <CMD_Handler+0x63e>
	   case RESTART2:
		     restartFuse[1] = true;
 80073da:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <CMD_Handler+0x6dc>)
 80073dc:	2201      	movs	r2, #1
 80073de:	705a      	strb	r2, [r3, #1]
		     SendRsp("Restart fuse M2");
 80073e0:	4836      	ldr	r0, [pc, #216]	; (80074bc <CMD_Handler+0x6e4>)
 80073e2:	f7ff fb79 	bl	8006ad8 <SendRsp>
	   break;
 80073e6:	e016      	b.n	8007416 <CMD_Handler+0x63e>
	   default:     SendRsp("Wrong CMD"); break;
 80073e8:	4835      	ldr	r0, [pc, #212]	; (80074c0 <CMD_Handler+0x6e8>)
 80073ea:	f7ff fb75 	bl	8006ad8 <SendRsp>
 80073ee:	e012      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 80073f0:	bf00      	nop
 80073f2:	e010      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 80073f4:	bf00      	nop
 80073f6:	e00e      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 80073f8:	bf00      	nop
 80073fa:	e00c      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 80073fc:	bf00      	nop
 80073fe:	e00a      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 8007400:	bf00      	nop
 8007402:	e008      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 8007404:	bf00      	nop
 8007406:	e006      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 8007408:	bf00      	nop
 800740a:	e004      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 800740c:	bf00      	nop
 800740e:	e002      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <CMD_Handler+0x63e>
	   break;
 8007414:	bf00      	nop
	}

	numCMD = 0;
 8007416:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <CMD_Handler+0x6ec>)
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	e000      	b.n	8007420 <CMD_Handler+0x648>
		return;
 800741e:	bf00      	nop
}
 8007420:	3780      	adds	r7, #128	; 0x80
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	0801313c 	.word	0x0801313c
 800742c:	08013148 	.word	0x08013148
 8007430:	08013154 	.word	0x08013154
 8007434:	0801315c 	.word	0x0801315c
 8007438:	08013164 	.word	0x08013164
 800743c:	0801316c 	.word	0x0801316c
 8007440:	08013174 	.word	0x08013174
 8007444:	0801317c 	.word	0x0801317c
 8007448:	08013184 	.word	0x08013184
 800744c:	0801318c 	.word	0x0801318c
 8007450:	08013194 	.word	0x08013194
 8007454:	0801319c 	.word	0x0801319c
 8007458:	20001238 	.word	0x20001238
 800745c:	080131a4 	.word	0x080131a4
 8007460:	080131b0 	.word	0x080131b0
 8007464:	080131bc 	.word	0x080131bc
 8007468:	2000123c 	.word	0x2000123c
 800746c:	20001240 	.word	0x20001240
 8007470:	080131c8 	.word	0x080131c8
 8007474:	080131d8 	.word	0x080131d8
 8007478:	080131e8 	.word	0x080131e8
 800747c:	080131f8 	.word	0x080131f8
 8007480:	20001244 	.word	0x20001244
 8007484:	20001258 	.word	0x20001258
 8007488:	20001248 	.word	0x20001248
 800748c:	08013208 	.word	0x08013208
 8007490:	20001260 	.word	0x20001260
 8007494:	2000124c 	.word	0x2000124c
 8007498:	0801322c 	.word	0x0801322c
 800749c:	0801324c 	.word	0x0801324c
 80074a0:	08013270 	.word	0x08013270
 80074a4:	20001268 	.word	0x20001268
 80074a8:	20001250 	.word	0x20001250
 80074ac:	08013290 	.word	0x08013290
 80074b0:	080132ac 	.word	0x080132ac
 80074b4:	20001254 	.word	0x20001254
 80074b8:	080132c8 	.word	0x080132c8
 80074bc:	080132d8 	.word	0x080132d8
 80074c0:	080132e8 	.word	0x080132e8
 80074c4:	20000ad7 	.word	0x20000ad7

080074c8 <SendReq>:
};*/

#define PM_MAX_UART_MSG_LEN	128
uint8_t tx_buf[PM_MAX_UART_MSG_LEN];
void SendReq (void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
	uint8_t msg_len = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
	struct pm_request_messages req = {.flags = true, .measurements = false}; // org
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	605a      	str	r2, [r3, #4]
 80074da:	609a      	str	r2, [r3, #8]
 80074dc:	60da      	str	r2, [r3, #12]
 80074de:	2301      	movs	r3, #1
 80074e0:	717b      	strb	r3, [r7, #5]





	req.fuseRestart = 0;// fuse_set_data[ind].fuseRestart;
 80074e2:	2300      	movs	r3, #0
 80074e4:	71bb      	strb	r3, [r7, #6]
	req.fuseParamSave = 0;//fuse_set_data[ind].fuseParamSave;
 80074e6:	2300      	movs	r3, #0
 80074e8:	71fb      	strb	r3, [r7, #7]
	req.fuseON_OFF = pm_measurements[0].fuseON_OFF_State; //fuse_set_data[ind].fuseON_OFF;
 80074ea:	4b86      	ldr	r3, [pc, #536]	; (8007704 <SendReq+0x23c>)
 80074ec:	7e1b      	ldrb	r3, [r3, #24]
 80074ee:	723b      	strb	r3, [r7, #8]
	req.fuseEN = pm_measurements[0].fuseEnabled;//fuse_set_data[ind].fuseEN;
 80074f0:	4b84      	ldr	r3, [pc, #528]	; (8007704 <SendReq+0x23c>)
 80074f2:	7e9b      	ldrb	r3, [r3, #26]
 80074f4:	727b      	strb	r3, [r7, #9]
	req.fuseProtectionCurrent = pm_measurements[0].fuseProtectionCurrent;// fuse_set_data[ind].fuseProtectionCurrent;
 80074f6:	4b83      	ldr	r3, [pc, #524]	; (8007704 <SendReq+0x23c>)
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	60fb      	str	r3, [r7, #12]
	req.fuseProtectionTime = pm_measurements[0].fuseProtectionTime; //fuse_set_data[ind].fuseProtectionTime;
 80074fc:	4b81      	ldr	r3, [pc, #516]	; (8007704 <SendReq+0x23c>)
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	613b      	str	r3, [r7, #16]

	if(restartFuse[0])
 8007502:	4b81      	ldr	r3, [pc, #516]	; (8007708 <SendReq+0x240>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <SendReq+0x4c>
	{
		req.fuseRestart = true;
 800750a:	2301      	movs	r3, #1
 800750c:	71bb      	strb	r3, [r7, #6]
		restartFuse[0] = false;
 800750e:	4b7e      	ldr	r3, [pc, #504]	; (8007708 <SendReq+0x240>)
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
	}

	if(save_param[0])
 8007514:	4b7d      	ldr	r3, [pc, #500]	; (800770c <SendReq+0x244>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <SendReq+0x64>
	{
		req.fuseON_OFF = fuse_state[0];
 800751c:	4b7c      	ldr	r3, [pc, #496]	; (8007710 <SendReq+0x248>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	723b      	strb	r3, [r7, #8]
		save_param[0] = false;
 8007522:	4b7a      	ldr	r3, [pc, #488]	; (800770c <SendReq+0x244>)
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
		req.fuseParamSave = true;
 8007528:	2301      	movs	r3, #1
 800752a:	71fb      	strb	r3, [r7, #7]

	}

	if(savePrtCurr[0])
 800752c:	4b79      	ldr	r3, [pc, #484]	; (8007714 <SendReq+0x24c>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <SendReq+0x7c>
	{
		req.fuseProtectionCurrent = protetionCurr[0];
 8007534:	4b78      	ldr	r3, [pc, #480]	; (8007718 <SendReq+0x250>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60fb      	str	r3, [r7, #12]
		savePrtCurr[0] = false;
 800753a:	4b76      	ldr	r3, [pc, #472]	; (8007714 <SendReq+0x24c>)
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
		req.fuseParamSave = true;
 8007540:	2301      	movs	r3, #1
 8007542:	71fb      	strb	r3, [r7, #7]
	}
	if(saveTime[0])
 8007544:	4b75      	ldr	r3, [pc, #468]	; (800771c <SendReq+0x254>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d007      	beq.n	800755c <SendReq+0x94>
	{
		req.fuseProtectionTime = protectionTime[0];
 800754c:	4b74      	ldr	r3, [pc, #464]	; (8007720 <SendReq+0x258>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]
		saveTime[0] = false;
 8007552:	4b72      	ldr	r3, [pc, #456]	; (800771c <SendReq+0x254>)
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
		req.fuseParamSave = true;
 8007558:	2301      	movs	r3, #1
 800755a:	71fb      	strb	r3, [r7, #7]
	}

	if(saveEn[0])
 800755c:	4b71      	ldr	r3, [pc, #452]	; (8007724 <SendReq+0x25c>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <SendReq+0xac>
	{
		req.fuseEN = saveEn[0];
 8007564:	4b6f      	ldr	r3, [pc, #444]	; (8007724 <SendReq+0x25c>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	727b      	strb	r3, [r7, #9]
		saveEn[0] = false;
 800756a:	4b6e      	ldr	r3, [pc, #440]	; (8007724 <SendReq+0x25c>)
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
		req.fuseParamSave = true;
 8007570:	2301      	movs	r3, #1
 8007572:	71fb      	strb	r3, [r7, #7]
	}

	msg_len = pm_request_messages_encode(&req, &tx_buf[0], PM_MAX_UART_MSG_LEN);
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	2280      	movs	r2, #128	; 0x80
 8007578:	496b      	ldr	r1, [pc, #428]	; (8007728 <SendReq+0x260>)
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fec9 	bl	8008312 <pm_request_messages_encode>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1, (uint8_t*)&tx_buf[0], msg_len, 100);
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	b29a      	uxth	r2, r3
 8007588:	2364      	movs	r3, #100	; 0x64
 800758a:	4967      	ldr	r1, [pc, #412]	; (8007728 <SendReq+0x260>)
 800758c:	4867      	ldr	r0, [pc, #412]	; (800772c <SendReq+0x264>)
 800758e:	f004 fe21 	bl	800c1d4 <HAL_UART_Transmit>
	if(req.fuseParamSave == true)
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <SendReq+0xd8>
	{
		HAL_Delay(500);
 8007598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800759c:	f001 fc2e 	bl	8008dfc <HAL_Delay>
	}
	HAL_Delay(50);
 80075a0:	2032      	movs	r0, #50	; 0x32
 80075a2:	f001 fc2b 	bl	8008dfc <HAL_Delay>

	req.fuseRestart = 0;// fuse_set_data[ind].fuseRestart;
 80075a6:	2300      	movs	r3, #0
 80075a8:	71bb      	strb	r3, [r7, #6]
	req.fuseParamSave = 0;//fuse_set_data[ind].fuseParamSave;
 80075aa:	2300      	movs	r3, #0
 80075ac:	71fb      	strb	r3, [r7, #7]
	req.fuseON_OFF = pm_measurements[1].fuseON_OFF_State; //fuse_set_data[ind].fuseON_OFF;
 80075ae:	4b55      	ldr	r3, [pc, #340]	; (8007704 <SendReq+0x23c>)
 80075b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b4:	723b      	strb	r3, [r7, #8]
	req.fuseEN = pm_measurements[1].fuseEnabled;//fuse_set_data[ind].fuseEN;
 80075b6:	4b53      	ldr	r3, [pc, #332]	; (8007704 <SendReq+0x23c>)
 80075b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80075bc:	727b      	strb	r3, [r7, #9]
	req.fuseProtectionCurrent = pm_measurements[1].fuseProtectionCurrent;// fuse_set_data[ind].fuseProtectionCurrent;
 80075be:	4b51      	ldr	r3, [pc, #324]	; (8007704 <SendReq+0x23c>)
 80075c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c2:	60fb      	str	r3, [r7, #12]
	req.fuseProtectionTime = pm_measurements[1].fuseProtectionTime; //fuse_set_data[ind].fuseProtectionTime;
 80075c4:	4b4f      	ldr	r3, [pc, #316]	; (8007704 <SendReq+0x23c>)
 80075c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c8:	613b      	str	r3, [r7, #16]

	if(restartFuse[1])
 80075ca:	4b4f      	ldr	r3, [pc, #316]	; (8007708 <SendReq+0x240>)
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <SendReq+0x114>
	{
		req.fuseRestart = true;
 80075d2:	2301      	movs	r3, #1
 80075d4:	71bb      	strb	r3, [r7, #6]
		restartFuse[1] = false;
 80075d6:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <SendReq+0x240>)
 80075d8:	2200      	movs	r2, #0
 80075da:	705a      	strb	r2, [r3, #1]
	}


	if(save_param[1] == true)
 80075dc:	4b4b      	ldr	r3, [pc, #300]	; (800770c <SendReq+0x244>)
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <SendReq+0x12c>
    {
		req.fuseON_OFF = fuse_state[1];
 80075e4:	4b4a      	ldr	r3, [pc, #296]	; (8007710 <SendReq+0x248>)
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	723b      	strb	r3, [r7, #8]
		req.fuseParamSave = true;
 80075ea:	2301      	movs	r3, #1
 80075ec:	71fb      	strb	r3, [r7, #7]
		save_param[1] = false;
 80075ee:	4b47      	ldr	r3, [pc, #284]	; (800770c <SendReq+0x244>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	705a      	strb	r2, [r3, #1]
	}

	if(savePrtCurr[1])
 80075f4:	4b47      	ldr	r3, [pc, #284]	; (8007714 <SendReq+0x24c>)
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <SendReq+0x144>
	{
		req.fuseProtectionCurrent = protetionCurr[1];
 80075fc:	4b46      	ldr	r3, [pc, #280]	; (8007718 <SendReq+0x250>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
		savePrtCurr[1] = false;
 8007602:	4b44      	ldr	r3, [pc, #272]	; (8007714 <SendReq+0x24c>)
 8007604:	2200      	movs	r2, #0
 8007606:	705a      	strb	r2, [r3, #1]
		req.fuseParamSave = true;
 8007608:	2301      	movs	r3, #1
 800760a:	71fb      	strb	r3, [r7, #7]
	}
	if(saveTime[1])
 800760c:	4b43      	ldr	r3, [pc, #268]	; (800771c <SendReq+0x254>)
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <SendReq+0x15c>
	{
		req.fuseProtectionTime = protectionTime[1];
 8007614:	4b42      	ldr	r3, [pc, #264]	; (8007720 <SendReq+0x258>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	613b      	str	r3, [r7, #16]
		saveTime[1] = false;
 800761a:	4b40      	ldr	r3, [pc, #256]	; (800771c <SendReq+0x254>)
 800761c:	2200      	movs	r2, #0
 800761e:	705a      	strb	r2, [r3, #1]
		req.fuseParamSave = true;
 8007620:	2301      	movs	r3, #1
 8007622:	71fb      	strb	r3, [r7, #7]
	}

	if(saveEn[1])
 8007624:	4b3f      	ldr	r3, [pc, #252]	; (8007724 <SendReq+0x25c>)
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <SendReq+0x174>
	{
		req.fuseEN = saveEn[1];
 800762c:	4b3d      	ldr	r3, [pc, #244]	; (8007724 <SendReq+0x25c>)
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	727b      	strb	r3, [r7, #9]
		saveEn[1] = false;
 8007632:	4b3c      	ldr	r3, [pc, #240]	; (8007724 <SendReq+0x25c>)
 8007634:	2200      	movs	r2, #0
 8007636:	705a      	strb	r2, [r3, #1]
		req.fuseParamSave = true;
 8007638:	2301      	movs	r3, #1
 800763a:	71fb      	strb	r3, [r7, #7]
	}
	msg_len = pm_request_messages_encode(&req, &tx_buf[0], PM_MAX_UART_MSG_LEN);
 800763c:	1d3b      	adds	r3, r7, #4
 800763e:	2280      	movs	r2, #128	; 0x80
 8007640:	4939      	ldr	r1, [pc, #228]	; (8007728 <SendReq+0x260>)
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fe65 	bl	8008312 <pm_request_messages_encode>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]
    HAL_UART_Transmit(&huart2, (uint8_t*)&tx_buf[0], msg_len, 100);
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	b29a      	uxth	r2, r3
 8007650:	2364      	movs	r3, #100	; 0x64
 8007652:	4935      	ldr	r1, [pc, #212]	; (8007728 <SendReq+0x260>)
 8007654:	4836      	ldr	r0, [pc, #216]	; (8007730 <SendReq+0x268>)
 8007656:	f004 fdbd 	bl	800c1d4 <HAL_UART_Transmit>

	HAL_Delay(50);
 800765a:	2032      	movs	r0, #50	; 0x32
 800765c:	f001 fbce 	bl	8008dfc <HAL_Delay>
	if(req.fuseParamSave == true)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <SendReq+0x1a6>
	{
		HAL_Delay(500);
 8007666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800766a:	f001 fbc7 	bl	8008dfc <HAL_Delay>
	}



	struct pm_control control_data;
	if(switch_state[0])
 800766e:	4b31      	ldr	r3, [pc, #196]	; (8007734 <SendReq+0x26c>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <SendReq+0x1bc>
	{
		control_data.zcd = false;
 8007676:	2300      	movs	r3, #0
 8007678:	707b      	strb	r3, [r7, #1]
		control_data.powerswitch = true;
 800767a:	2301      	movs	r3, #1
 800767c:	703b      	strb	r3, [r7, #0]
		control_data.clear_fault = false;
 800767e:	2300      	movs	r3, #0
 8007680:	70bb      	strb	r3, [r7, #2]
 8007682:	e005      	b.n	8007690 <SendReq+0x1c8>
	}
	else
	{
		control_data.zcd = false;
 8007684:	2300      	movs	r3, #0
 8007686:	707b      	strb	r3, [r7, #1]
		control_data.powerswitch = false;
 8007688:	2300      	movs	r3, #0
 800768a:	703b      	strb	r3, [r7, #0]
		control_data.clear_fault = false;
 800768c:	2300      	movs	r3, #0
 800768e:	70bb      	strb	r3, [r7, #2]
	}


	msg_len = pm_control_encode(&control_data, (uint8_t*)&tx_buf[0], PM_MAX_UART_MSG_LEN);
 8007690:	463b      	mov	r3, r7
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	4924      	ldr	r1, [pc, #144]	; (8007728 <SendReq+0x260>)
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fdc4 	bl	8008224 <pm_control_encode>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1, (uint8_t*)&tx_buf[0], msg_len, 100);
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	2364      	movs	r3, #100	; 0x64
 80076a6:	4920      	ldr	r1, [pc, #128]	; (8007728 <SendReq+0x260>)
 80076a8:	4820      	ldr	r0, [pc, #128]	; (800772c <SendReq+0x264>)
 80076aa:	f004 fd93 	bl	800c1d4 <HAL_UART_Transmit>
	HAL_Delay(50);
 80076ae:	2032      	movs	r0, #50	; 0x32
 80076b0:	f001 fba4 	bl	8008dfc <HAL_Delay>
	if(switch_state[1])
 80076b4:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <SendReq+0x26c>)
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d006      	beq.n	80076ca <SendReq+0x202>
	{
		control_data.zcd = false;
 80076bc:	2300      	movs	r3, #0
 80076be:	707b      	strb	r3, [r7, #1]
		control_data.powerswitch = true;
 80076c0:	2301      	movs	r3, #1
 80076c2:	703b      	strb	r3, [r7, #0]
		control_data.clear_fault = false;
 80076c4:	2300      	movs	r3, #0
 80076c6:	70bb      	strb	r3, [r7, #2]
 80076c8:	e005      	b.n	80076d6 <SendReq+0x20e>
	}
	else
	{
		control_data.zcd = false;
 80076ca:	2300      	movs	r3, #0
 80076cc:	707b      	strb	r3, [r7, #1]
		control_data.powerswitch = false;
 80076ce:	2300      	movs	r3, #0
 80076d0:	703b      	strb	r3, [r7, #0]
		control_data.clear_fault = false;
 80076d2:	2300      	movs	r3, #0
 80076d4:	70bb      	strb	r3, [r7, #2]
	}

	msg_len = pm_control_encode(&control_data, (uint8_t*)&tx_buf[0], PM_MAX_UART_MSG_LEN);
 80076d6:	463b      	mov	r3, r7
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	4913      	ldr	r1, [pc, #76]	; (8007728 <SendReq+0x260>)
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fda1 	bl	8008224 <pm_control_encode>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart2, (uint8_t*)&tx_buf[0], msg_len, 100);
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	2364      	movs	r3, #100	; 0x64
 80076ec:	490e      	ldr	r1, [pc, #56]	; (8007728 <SendReq+0x260>)
 80076ee:	4810      	ldr	r0, [pc, #64]	; (8007730 <SendReq+0x268>)
 80076f0:	f004 fd70 	bl	800c1d4 <HAL_UART_Transmit>
	HAL_Delay(50);
 80076f4:	2032      	movs	r0, #50	; 0x32
 80076f6:	f001 fb81 	bl	8008dfc <HAL_Delay>

}
 80076fa:	bf00      	nop
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	2000110c 	.word	0x2000110c
 8007708:	20001254 	.word	0x20001254
 800770c:	20001240 	.word	0x20001240
 8007710:	2000123c 	.word	0x2000123c
 8007714:	20001248 	.word	0x20001248
 8007718:	20001258 	.word	0x20001258
 800771c:	2000124c 	.word	0x2000124c
 8007720:	20001260 	.word	0x20001260
 8007724:	20001250 	.word	0x20001250
 8007728:	2000126c 	.word	0x2000126c
 800772c:	20000764 	.word	0x20000764
 8007730:	200007f4 	.word	0x200007f4
 8007734:	20001238 	.word	0x20001238

08007738 <calculate_crc>:

uint32_t calculate_crc(const uint8_t *msg, size_t len){
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)msg, len);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4804      	ldr	r0, [pc, #16]	; (8007758 <calculate_crc+0x20>)
 8007748:	f001 fcee 	bl	8009128 <HAL_CRC_Calculate>
 800774c:	60f8      	str	r0, [r7, #12]
	return crc;
 800774e:	68fb      	ldr	r3, [r7, #12]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200006a8 	.word	0x200006a8

0800775c <pm_process_rx_message>:



 void pm_process_rx_message(size_t ind, uint8_t* message_p, size_t length, uint32_t time_stamp)
{
 800775c:	b5b0      	push	{r4, r5, r7, lr}
 800775e:	b0a0      	sub	sp, #128	; 0x80
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
	//printf("%s: found msg with len = %zu\n", __func__, length);
	//pm_print_message(message_p, length);

	// ignore messages that are too short (we have at least 4 bytes of CRC)
	if (length < 4) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b03      	cmp	r3, #3
 800776e:	d813      	bhi.n	8007798 <pm_process_rx_message+0x3c>
		pm_rx_error_stats[ind].msg_too_short++;
 8007770:	4998      	ldr	r1, [pc, #608]	; (80079d4 <pm_process_rx_message+0x278>)
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	330c      	adds	r3, #12
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	4893      	ldr	r0, [pc, #588]	; (80079d4 <pm_process_rx_message+0x278>)
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4403      	add	r3, r0
 8007792:	330c      	adds	r3, #12
 8007794:	6019      	str	r1, [r3, #0]
		return;
 8007796:	e119      	b.n	80079cc <pm_process_rx_message+0x270>
	}

	enum pm_msg_type msg_type = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	enum INTERFACE_STATUS result;
	// decode the message header
	cw_unpack_context cw_ctx;
	result = pm_decode_start(&msg_type, &cw_ctx, (void*)message_p, length);
 800779e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80077a2:	f107 007e 	add.w	r0, r7, #126	; 0x7e
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	f000 fc72 	bl	8008092 <pm_decode_start>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (result == INTERFACE_STATUS_CRC_INVALID) {
 80077b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d112      	bne.n	80077e2 <pm_process_rx_message+0x86>
		pm_rx_error_stats[ind].msg_crc++;
 80077bc:	4985      	ldr	r1, [pc, #532]	; (80079d4 <pm_process_rx_message+0x278>)
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	3310      	adds	r3, #16
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	1c59      	adds	r1, r3, #1
 80077d0:	4880      	ldr	r0, [pc, #512]	; (80079d4 <pm_process_rx_message+0x278>)
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	1a9b      	subs	r3, r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4403      	add	r3, r0
 80077de:	3310      	adds	r3, #16
 80077e0:	6019      	str	r1, [r3, #0]
	}

	if (result == INTERFACE_STATUS_MSG_MALFORMED) {
 80077e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d112      	bne.n	8007810 <pm_process_rx_message+0xb4>
		pm_rx_error_stats[ind].msg_format++;
 80077ea:	497a      	ldr	r1, [pc, #488]	; (80079d4 <pm_process_rx_message+0x278>)
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	3314      	adds	r3, #20
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	1c59      	adds	r1, r3, #1
 80077fe:	4875      	ldr	r0, [pc, #468]	; (80079d4 <pm_process_rx_message+0x278>)
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4613      	mov	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4403      	add	r3, r0
 800780c:	3314      	adds	r3, #20
 800780e:	6019      	str	r1, [r3, #0]
	}

	if (result != INTERFACE_STATUS_OK) {
 8007810:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007814:	2b00      	cmp	r3, #0
 8007816:	f040 80d8 	bne.w	80079ca <pm_process_rx_message+0x26e>
		//printf("%s: module %d: pm_decode_start error %d\n", __func__, (int)ind+1, (int)result);
		//pm_print_message(message_p, length);
		return;
	}

	switch (msg_type) {
 800781a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <pm_process_rx_message+0xce>
 8007822:	2b03      	cmp	r3, #3
 8007824:	f000 808b 	beq.w	800793e <pm_process_rx_message+0x1e2>
 8007828:	e0bb      	b.n	80079a2 <pm_process_rx_message+0x246>
		case PM_MT_MEASUREMENT: {
			struct Measurements meas;
			result = pm_measurement_decode(&meas, &cw_ctx);
 800782a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800782e:	f107 0314 	add.w	r3, r7, #20
 8007832:	4611      	mov	r1, r2
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fc90 	bl	800815a <pm_measurement_decode>
 800783a:	4603      	mov	r3, r0
 800783c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (result == INTERFACE_STATUS_OK) {
 8007840:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007844:	2b00      	cmp	r3, #0
 8007846:	d166      	bne.n	8007916 <pm_process_rx_message+0x1ba>
				pm_measurements[ind] = meas;
 8007848:	4a63      	ldr	r2, [pc, #396]	; (80079d8 <pm_process_rx_message+0x27c>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	212c      	movs	r1, #44	; 0x2c
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	4413      	add	r3, r2
 8007854:	461d      	mov	r5, r3
 8007856:	f107 0414 	add.w	r4, r7, #20
 800785a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800785c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800785e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007862:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007866:	e885 0007 	stmia.w	r5, {r0, r1, r2}

				fuse_rd_data[ind].data_valid = true;
 800786a:	495c      	ldr	r1, [pc, #368]	; (80079dc <pm_process_rx_message+0x280>)
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4613      	mov	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4413      	add	r3, r2
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	440b      	add	r3, r1
 8007878:	3310      	adds	r3, #16
 800787a:	2201      	movs	r2, #1
 800787c:	701a      	strb	r2, [r3, #0]
				fuse_rd_data[ind].on_protection_state = meas.fuseON_ProtectionState;
 800787e:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8007882:	4956      	ldr	r1, [pc, #344]	; (80079dc <pm_process_rx_message+0x280>)
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4613      	mov	r3, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	4413      	add	r3, r2
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	440b      	add	r3, r1
 8007890:	3301      	adds	r3, #1
 8007892:	4602      	mov	r2, r0
 8007894:	701a      	strb	r2, [r3, #0]
				fuse_rd_data[ind].enabled = meas.fuseEnabled;
 8007896:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800789a:	4950      	ldr	r1, [pc, #320]	; (80079dc <pm_process_rx_message+0x280>)
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4613      	mov	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	440b      	add	r3, r1
 80078a8:	3302      	adds	r3, #2
 80078aa:	4602      	mov	r2, r0
 80078ac:	701a      	strb	r2, [r3, #0]
				fuse_rd_data[ind].module_current =  meas.moduleCurrent;
 80078ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078b0:	484a      	ldr	r0, [pc, #296]	; (80079dc <pm_process_rx_message+0x280>)
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4613      	mov	r3, r2
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	4413      	add	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4403      	add	r3, r0
 80078be:	330c      	adds	r3, #12
 80078c0:	6019      	str	r1, [r3, #0]
				fuse_rd_data[ind].on_off_state = meas.fuseON_OFF_State;
 80078c2:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 80078c6:	4945      	ldr	r1, [pc, #276]	; (80079dc <pm_process_rx_message+0x280>)
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4613      	mov	r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	4413      	add	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	440b      	add	r3, r1
 80078d4:	4602      	mov	r2, r0
 80078d6:	701a      	strb	r2, [r3, #0]
				fuse_rd_data[ind].protection_current = meas.fuseProtectionCurrent;
 80078d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078da:	4840      	ldr	r0, [pc, #256]	; (80079dc <pm_process_rx_message+0x280>)
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4613      	mov	r3, r2
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	4413      	add	r3, r2
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	4403      	add	r3, r0
 80078e8:	3304      	adds	r3, #4
 80078ea:	6019      	str	r1, [r3, #0]
				fuse_rd_data[ind].protection_time = meas.fuseProtectionTime;
 80078ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078ee:	483b      	ldr	r0, [pc, #236]	; (80079dc <pm_process_rx_message+0x280>)
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4613      	mov	r3, r2
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4403      	add	r3, r0
 80078fc:	3308      	adds	r3, #8
 80078fe:	6019      	str	r1, [r3, #0]
				fuse_rd_data[ind].id_uC = meas.id_uc;
 8007900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007902:	4836      	ldr	r0, [pc, #216]	; (80079dc <pm_process_rx_message+0x280>)
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4613      	mov	r3, r2
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	4413      	add	r3, r2
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4403      	add	r3, r0
 8007910:	3314      	adds	r3, #20
 8007912:	6019      	str	r1, [r3, #0]
				//pm_meas_timestamp[ind] = time_stamp;
			} else {
				//printf("%s: module %d: pm_measurement_decode error %d\n", __func__, (int)ind+1, (int)result);
				pm_rx_error_stats[ind].msg_format++;
			}
			break;
 8007914:	e05a      	b.n	80079cc <pm_process_rx_message+0x270>
				pm_rx_error_stats[ind].msg_format++;
 8007916:	492f      	ldr	r1, [pc, #188]	; (80079d4 <pm_process_rx_message+0x278>)
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4613      	mov	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3314      	adds	r3, #20
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	1c59      	adds	r1, r3, #1
 800792a:	482a      	ldr	r0, [pc, #168]	; (80079d4 <pm_process_rx_message+0x278>)
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4613      	mov	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4403      	add	r3, r0
 8007938:	3314      	adds	r3, #20
 800793a:	6019      	str	r1, [r3, #0]
			break;
 800793c:	e046      	b.n	80079cc <pm_process_rx_message+0x270>
		}

		case PM_MT_STATUS_FLAGS: {
			struct pm_status_flags flags;
			result = pm_status_flags_decode(&flags, &cw_ctx);
 800793e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007946:	4611      	mov	r1, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fd85 	bl	8008458 <pm_status_flags_decode>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (result == INTERFACE_STATUS_OK) {
 8007954:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <pm_process_rx_message+0x21e>
				pm_current_status_flags[ind] = flags;
 800795c:	4920      	ldr	r1, [pc, #128]	; (80079e0 <pm_process_rx_message+0x284>)
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4613      	mov	r3, r2
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	4413      	add	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	440b      	add	r3, r1
 800796a:	461a      	mov	r2, r3
 800796c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	6010      	str	r0, [r2, #0]
 8007974:	889b      	ldrh	r3, [r3, #4]
 8007976:	8093      	strh	r3, [r2, #4]
				//pm_status_timestamps[ind] = time_stamp;
			} else {
				//printf("%s: module %d: pm_status_flags_decode error %d\n", __func__, (int)ind+1, (int)result);
				pm_rx_error_stats[ind].msg_format++;
			}
			break;
 8007978:	e028      	b.n	80079cc <pm_process_rx_message+0x270>
				pm_rx_error_stats[ind].msg_format++;
 800797a:	4916      	ldr	r1, [pc, #88]	; (80079d4 <pm_process_rx_message+0x278>)
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4613      	mov	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	3314      	adds	r3, #20
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	1c59      	adds	r1, r3, #1
 800798e:	4811      	ldr	r0, [pc, #68]	; (80079d4 <pm_process_rx_message+0x278>)
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4613      	mov	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	1a9b      	subs	r3, r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4403      	add	r3, r0
 800799c:	3314      	adds	r3, #20
 800799e:	6019      	str	r1, [r3, #0]
			break;
 80079a0:	e014      	b.n	80079cc <pm_process_rx_message+0x270>
		}

		default: {
			//printf("%s: module %d: received message with unknown type %d\n", __func__, (int)ind+1, (int)msg_type);
			pm_rx_error_stats[ind].msg_type_unknown++;
 80079a2:	490c      	ldr	r1, [pc, #48]	; (80079d4 <pm_process_rx_message+0x278>)
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4613      	mov	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	3318      	adds	r3, #24
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	1c59      	adds	r1, r3, #1
 80079b6:	4807      	ldr	r0, [pc, #28]	; (80079d4 <pm_process_rx_message+0x278>)
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4613      	mov	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4403      	add	r3, r0
 80079c4:	3318      	adds	r3, #24
 80079c6:	6019      	str	r1, [r3, #0]
			break;
 80079c8:	e000      	b.n	80079cc <pm_process_rx_message+0x270>
		return;
 80079ca:	bf00      	nop
		}
	}
}
 80079cc:	3780      	adds	r7, #128	; 0x80
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bdb0      	pop	{r4, r5, r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20001170 	.word	0x20001170
 80079d8:	2000110c 	.word	0x2000110c
 80079dc:	200010dc 	.word	0x200010dc
 80079e0:	20001164 	.word	0x20001164

080079e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079e8:	f001 f997 	bl	8008d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079ec:	f000 f832 	bl	8007a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079f0:	f000 faf2 	bl	8007fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80079f4:	f000 fabe 	bl	8007f74 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80079f8:	f000 f9d4 	bl	8007da4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80079fc:	f000 fa20 	bl	8007e40 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007a00:	f000 fa6c 	bl	8007edc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8007a04:	f000 f892 	bl	8007b2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8007a08:	f000 f95c 	bl	8007cc4 <MX_TIM3_Init>
  MX_CRC_Init();
 8007a0c:	f000 f86c 	bl	8007ae8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 8007a10:	2201      	movs	r2, #1
 8007a12:	490a      	ldr	r1, [pc, #40]	; (8007a3c <main+0x58>)
 8007a14:	480a      	ldr	r0, [pc, #40]	; (8007a40 <main+0x5c>)
 8007a16:	f004 fc73 	bl	800c300 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA (&huart1, (uint8_t*)&rxDataBuf[0], 217);
 8007a1a:	22d9      	movs	r2, #217	; 0xd9
 8007a1c:	4909      	ldr	r1, [pc, #36]	; (8007a44 <main+0x60>)
 8007a1e:	480a      	ldr	r0, [pc, #40]	; (8007a48 <main+0x64>)
 8007a20:	f004 fcc4 	bl	800c3ac <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA (&huart2, (uint8_t*)&rxDataBuf2[0], 217);
 8007a24:	22d9      	movs	r2, #217	; 0xd9
 8007a26:	4909      	ldr	r1, [pc, #36]	; (8007a4c <main+0x68>)
 8007a28:	4809      	ldr	r0, [pc, #36]	; (8007a50 <main+0x6c>)
 8007a2a:	f004 fcbf 	bl	800c3ac <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CMD_Handler();
 8007a2e:	f7ff f9d3 	bl	8006dd8 <CMD_Handler>
	  SendReq ();
 8007a32:	f7ff fd49 	bl	80074c8 <SendReq>
	  ReceiveHandler ();
 8007a36:	f7fe fee9 	bl	800680c <ReceiveHandler>
	  CMD_Handler();
 8007a3a:	e7f8      	b.n	8007a2e <main+0x4a>
 8007a3c:	20000ad6 	.word	0x20000ad6
 8007a40:	20000884 	.word	0x20000884
 8007a44:	20000cec 	.word	0x20000cec
 8007a48:	20000764 	.word	0x20000764
 8007a4c:	20000ee4 	.word	0x20000ee4
 8007a50:	200007f4 	.word	0x200007f4

08007a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b094      	sub	sp, #80	; 0x50
 8007a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a5a:	f107 0318 	add.w	r3, r7, #24
 8007a5e:	2238      	movs	r2, #56	; 0x38
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f007 fea5 	bl	800f7b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	609a      	str	r2, [r3, #8]
 8007a72:	60da      	str	r2, [r3, #12]
 8007a74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007a76:	2000      	movs	r0, #0
 8007a78:	f002 f9c8 	bl	8009e0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a86:	2302      	movs	r3, #2
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8007a92:	2328      	movs	r3, #40	; 0x28
 8007a94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a96:	2302      	movs	r3, #2
 8007a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007aa2:	f107 0318 	add.w	r3, r7, #24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f002 fa64 	bl	8009f74 <HAL_RCC_OscConfig>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8007ab2:	f000 fae9 	bl	8008088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ab6:	230f      	movs	r3, #15
 8007ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007aba:	2303      	movs	r3, #3
 8007abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007aca:	1d3b      	adds	r3, r7, #4
 8007acc:	2104      	movs	r1, #4
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 fd68 	bl	800a5a4 <HAL_RCC_ClockConfig>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8007ada:	f000 fad5 	bl	8008088 <Error_Handler>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3750      	adds	r7, #80	; 0x50
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007aee:	4a0e      	ldr	r2, [pc, #56]	; (8007b28 <MX_CRC_Init+0x40>)
 8007af0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007af2:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007b10:	4804      	ldr	r0, [pc, #16]	; (8007b24 <MX_CRC_Init+0x3c>)
 8007b12:	f001 faa5 	bl	8009060 <HAL_CRC_Init>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8007b1c:	f000 fab4 	bl	8008088 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007b20:	bf00      	nop
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	200006a8 	.word	0x200006a8
 8007b28:	40023000 	.word	0x40023000

08007b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b09c      	sub	sp, #112	; 0x70
 8007b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	609a      	str	r2, [r3, #8]
 8007b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	611a      	str	r2, [r3, #16]
 8007b5c:	615a      	str	r2, [r3, #20]
 8007b5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007b60:	1d3b      	adds	r3, r7, #4
 8007b62:	2234      	movs	r2, #52	; 0x34
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f007 fe23 	bl	800f7b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007b6c:	4b53      	ldr	r3, [pc, #332]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b6e:	4a54      	ldr	r2, [pc, #336]	; (8007cc0 <MX_TIM1_Init+0x194>)
 8007b70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8007b72:	4b52      	ldr	r3, [pc, #328]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b74:	2203      	movs	r2, #3
 8007b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b78:	4b50      	ldr	r3, [pc, #320]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8007b7e:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b80:	2264      	movs	r2, #100	; 0x64
 8007b82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b84:	4b4d      	ldr	r3, [pc, #308]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007b8a:	4b4c      	ldr	r3, [pc, #304]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b90:	4b4a      	ldr	r3, [pc, #296]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007b96:	4849      	ldr	r0, [pc, #292]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007b98:	f003 f910 	bl	800adbc <HAL_TIM_Base_Init>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007ba2:	f000 fa71 	bl	8008088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007baa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007bac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4842      	ldr	r0, [pc, #264]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007bb4:	f003 fc5a 	bl	800b46c <HAL_TIM_ConfigClockSource>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007bbe:	f000 fa63 	bl	8008088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007bc2:	483e      	ldr	r0, [pc, #248]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007bc4:	f003 f951 	bl	800ae6a <HAL_TIM_PWM_Init>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007bce:	f000 fa5b 	bl	8008088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007bde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007be2:	4619      	mov	r1, r3
 8007be4:	4835      	ldr	r0, [pc, #212]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007be6:	f004 f983 	bl	800bef0 <HAL_TIMEx_MasterConfigSynchronization>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8007bf0:	f000 fa4a 	bl	8008088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007bf4:	2360      	movs	r3, #96	; 0x60
 8007bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 25;
 8007bf8:	2319      	movs	r3, #25
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007c00:	2300      	movs	r3, #0
 8007c02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007c10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c14:	2200      	movs	r2, #0
 8007c16:	4619      	mov	r1, r3
 8007c18:	4828      	ldr	r0, [pc, #160]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007c1a:	f003 fb13 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8007c24:	f000 fa30 	bl	8008088 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8007c28:	2332      	movs	r3, #50	; 0x32
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c30:	2204      	movs	r2, #4
 8007c32:	4619      	mov	r1, r3
 8007c34:	4821      	ldr	r0, [pc, #132]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007c36:	f003 fb05 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8007c40:	f000 fa22 	bl	8008088 <Error_Handler>
  }
  sConfigOC.Pulse = 75;
 8007c44:	234b      	movs	r3, #75	; 0x4b
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007c48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	4619      	mov	r1, r3
 8007c50:	481a      	ldr	r0, [pc, #104]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007c52:	f003 faf7 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8007c5c:	f000 fa14 	bl	8008088 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007c90:	2300      	movs	r3, #0
 8007c92:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007c94:	2300      	movs	r3, #0
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4807      	ldr	r0, [pc, #28]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007c9e:	f004 f9a9 	bl	800bff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8007ca8:	f000 f9ee 	bl	8008088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007cac:	4803      	ldr	r0, [pc, #12]	; (8007cbc <MX_TIM1_Init+0x190>)
 8007cae:	f000 fc93 	bl	80085d8 <HAL_TIM_MspPostInit>

}
 8007cb2:	bf00      	nop
 8007cb4:	3770      	adds	r7, #112	; 0x70
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	200006cc 	.word	0x200006cc
 8007cc0:	40012c00 	.word	0x40012c00

08007cc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cca:	f107 031c 	add.w	r3, r7, #28
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	605a      	str	r2, [r3, #4]
 8007cde:	609a      	str	r2, [r3, #8]
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	611a      	str	r2, [r3, #16]
 8007ce4:	615a      	str	r2, [r3, #20]
 8007ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007ce8:	4b2c      	ldr	r3, [pc, #176]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007cea:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <MX_TIM3_Init+0xdc>)
 8007cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8007cee:	4b2b      	ldr	r3, [pc, #172]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cf4:	4b29      	ldr	r3, [pc, #164]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8007cfa:	4b28      	ldr	r3, [pc, #160]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007cfc:	2264      	movs	r2, #100	; 0x64
 8007cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d00:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d06:	4b25      	ldr	r3, [pc, #148]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007d0c:	4823      	ldr	r0, [pc, #140]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d0e:	f003 f8ac 	bl	800ae6a <HAL_TIM_PWM_Init>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007d18:	f000 f9b6 	bl	8008088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	4619      	mov	r1, r3
 8007d2a:	481c      	ldr	r0, [pc, #112]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d2c:	f004 f8e0 	bl	800bef0 <HAL_TIMEx_MasterConfigSynchronization>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8007d36:	f000 f9a7 	bl	8008088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d3a:	2360      	movs	r3, #96	; 0x60
 8007d3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8007d3e:	2332      	movs	r3, #50	; 0x32
 8007d40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4812      	ldr	r0, [pc, #72]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d52:	f003 fa77 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8007d5c:	f000 f994 	bl	8008088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d60:	463b      	mov	r3, r7
 8007d62:	2204      	movs	r2, #4
 8007d64:	4619      	mov	r1, r3
 8007d66:	480d      	ldr	r0, [pc, #52]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d68:	f003 fa6c 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007d72:	f000 f989 	bl	8008088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007d76:	463b      	mov	r3, r7
 8007d78:	2208      	movs	r2, #8
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4807      	ldr	r0, [pc, #28]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d7e:	f003 fa61 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8007d88:	f000 f97e 	bl	8008088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007d8c:	4803      	ldr	r0, [pc, #12]	; (8007d9c <MX_TIM3_Init+0xd8>)
 8007d8e:	f000 fc23 	bl	80085d8 <HAL_TIM_MspPostInit>

}
 8007d92:	bf00      	nop
 8007d94:	3728      	adds	r7, #40	; 0x28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000718 	.word	0x20000718
 8007da0:	40000400 	.word	0x40000400

08007da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007da8:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007daa:	4a23      	ldr	r2, [pc, #140]	; (8007e38 <MX_USART1_UART_Init+0x94>)
 8007dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8007dae:	4b21      	ldr	r3, [pc, #132]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007db0:	4a22      	ldr	r2, [pc, #136]	; (8007e3c <MX_USART1_UART_Init+0x98>)
 8007db2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007db4:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007dba:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007dc6:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dc8:	220c      	movs	r2, #12
 8007dca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007dd8:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007dde:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007de4:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007dea:	4812      	ldr	r0, [pc, #72]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dec:	f004 f9a2 	bl	800c134 <HAL_UART_Init>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8007df6:	f000 f947 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	480d      	ldr	r0, [pc, #52]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007dfe:	f006 fbe0 	bl	800e5c2 <HAL_UARTEx_SetTxFifoThreshold>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8007e08:	f000 f93e 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4809      	ldr	r0, [pc, #36]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007e10:	f006 fc15 	bl	800e63e <HAL_UARTEx_SetRxFifoThreshold>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8007e1a:	f000 f935 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007e1e:	4805      	ldr	r0, [pc, #20]	; (8007e34 <MX_USART1_UART_Init+0x90>)
 8007e20:	f006 fb96 	bl	800e550 <HAL_UARTEx_DisableFifoMode>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8007e2a:	f000 f92d 	bl	8008088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000764 	.word	0x20000764
 8007e38:	40013800 	.word	0x40013800
 8007e3c:	0003d090 	.word	0x0003d090

08007e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007e44:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e46:	4a23      	ldr	r2, [pc, #140]	; (8007ed4 <MX_USART2_UART_Init+0x94>)
 8007e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8007e4a:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e4c:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <MX_USART2_UART_Init+0x98>)
 8007e4e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007e50:	4b1f      	ldr	r3, [pc, #124]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007e56:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007e5c:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007e62:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e64:	220c      	movs	r2, #12
 8007e66:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e68:	4b19      	ldr	r3, [pc, #100]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e6e:	4b18      	ldr	r3, [pc, #96]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007e74:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007e80:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007e86:	4812      	ldr	r0, [pc, #72]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e88:	f004 f954 	bl	800c134 <HAL_UART_Init>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8007e92:	f000 f8f9 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e96:	2100      	movs	r1, #0
 8007e98:	480d      	ldr	r0, [pc, #52]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007e9a:	f006 fb92 	bl	800e5c2 <HAL_UARTEx_SetTxFifoThreshold>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8007ea4:	f000 f8f0 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4809      	ldr	r0, [pc, #36]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007eac:	f006 fbc7 	bl	800e63e <HAL_UARTEx_SetRxFifoThreshold>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8007eb6:	f000 f8e7 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007eba:	4805      	ldr	r0, [pc, #20]	; (8007ed0 <MX_USART2_UART_Init+0x90>)
 8007ebc:	f006 fb48 	bl	800e550 <HAL_UARTEx_DisableFifoMode>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8007ec6:	f000 f8df 	bl	8008088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007eca:	bf00      	nop
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	200007f4 	.word	0x200007f4
 8007ed4:	40004400 	.word	0x40004400
 8007ed8:	0003d090 	.word	0x0003d090

08007edc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007ee0:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007ee2:	4a23      	ldr	r2, [pc, #140]	; (8007f70 <MX_USART3_UART_Init+0x94>)
 8007ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007ee6:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007eee:	4b1f      	ldr	r3, [pc, #124]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007efa:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f02:	220c      	movs	r2, #12
 8007f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f06:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f18:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007f24:	4811      	ldr	r0, [pc, #68]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f26:	f004 f905 	bl	800c134 <HAL_UART_Init>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007f30:	f000 f8aa 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f34:	2100      	movs	r1, #0
 8007f36:	480d      	ldr	r0, [pc, #52]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f38:	f006 fb43 	bl	800e5c2 <HAL_UARTEx_SetTxFifoThreshold>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007f42:	f000 f8a1 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f46:	2100      	movs	r1, #0
 8007f48:	4808      	ldr	r0, [pc, #32]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f4a:	f006 fb78 	bl	800e63e <HAL_UARTEx_SetRxFifoThreshold>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007f54:	f000 f898 	bl	8008088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007f58:	4804      	ldr	r0, [pc, #16]	; (8007f6c <MX_USART3_UART_Init+0x90>)
 8007f5a:	f006 faf9 	bl	800e550 <HAL_UARTEx_DisableFifoMode>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007f64:	f000 f890 	bl	8008088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000884 	.word	0x20000884
 8007f70:	40004800 	.word	0x40004800

08007f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007f7a:	4b16      	ldr	r3, [pc, #88]	; (8007fd4 <MX_DMA_Init+0x60>)
 8007f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7e:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <MX_DMA_Init+0x60>)
 8007f80:	f043 0304 	orr.w	r3, r3, #4
 8007f84:	6493      	str	r3, [r2, #72]	; 0x48
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <MX_DMA_Init+0x60>)
 8007f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	607b      	str	r3, [r7, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f92:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <MX_DMA_Init+0x60>)
 8007f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f96:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <MX_DMA_Init+0x60>)
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	6493      	str	r3, [r2, #72]	; 0x48
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <MX_DMA_Init+0x60>)
 8007fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007faa:	2200      	movs	r2, #0
 8007fac:	2100      	movs	r1, #0
 8007fae:	200b      	movs	r0, #11
 8007fb0:	f001 f821 	bl	8008ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007fb4:	200b      	movs	r0, #11
 8007fb6:	f001 f838 	bl	800902a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	200c      	movs	r0, #12
 8007fc0:	f001 f819 	bl	8008ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007fc4:	200c      	movs	r0, #12
 8007fc6:	f001 f830 	bl	800902a <HAL_NVIC_EnableIRQ>

}
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40021000 	.word	0x40021000

08007fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
 8007fea:	60da      	str	r2, [r3, #12]
 8007fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007fee:	4b25      	ldr	r3, [pc, #148]	; (8008084 <MX_GPIO_Init+0xac>)
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	4a24      	ldr	r2, [pc, #144]	; (8008084 <MX_GPIO_Init+0xac>)
 8007ff4:	f043 0320 	orr.w	r3, r3, #32
 8007ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ffa:	4b22      	ldr	r3, [pc, #136]	; (8008084 <MX_GPIO_Init+0xac>)
 8007ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <MX_GPIO_Init+0xac>)
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800a:	4a1e      	ldr	r2, [pc, #120]	; (8008084 <MX_GPIO_Init+0xac>)
 800800c:	f043 0304 	orr.w	r3, r3, #4
 8008010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <MX_GPIO_Init+0xac>)
 8008014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800801e:	4b19      	ldr	r3, [pc, #100]	; (8008084 <MX_GPIO_Init+0xac>)
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	4a18      	ldr	r2, [pc, #96]	; (8008084 <MX_GPIO_Init+0xac>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800802a:	4b16      	ldr	r3, [pc, #88]	; (8008084 <MX_GPIO_Init+0xac>)
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	60bb      	str	r3, [r7, #8]
 8008034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008036:	4b13      	ldr	r3, [pc, #76]	; (8008084 <MX_GPIO_Init+0xac>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	4a12      	ldr	r2, [pc, #72]	; (8008084 <MX_GPIO_Init+0xac>)
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008042:	4b10      	ldr	r3, [pc, #64]	; (8008084 <MX_GPIO_Init+0xac>)
 8008044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin|M2_DIS_Pin, GPIO_PIN_SET);
 800804e:	2201      	movs	r2, #1
 8008050:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008058:	f001 fec0 	bl	8009ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIS_Pin M2_DIS_Pin */
  GPIO_InitStruct.Pin = M1_DIS_Pin|M2_DIS_Pin;
 800805c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008062:	2301      	movs	r3, #1
 8008064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800806a:	2300      	movs	r3, #0
 800806c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800806e:	f107 0314 	add.w	r3, r7, #20
 8008072:	4619      	mov	r1, r3
 8008074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008078:	f001 fd2e 	bl	8009ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800807c:	bf00      	nop
 800807e:	3728      	adds	r7, #40	; 0x28
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40021000 	.word	0x40021000

08008088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800808c:	b672      	cpsid	i
}
 800808e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008090:	e7fe      	b.n	8008090 <Error_Handler+0x8>

08008092 <pm_decode_start>:
//#define CHK(pc) if(pc==false) return INTERFACE_STATUS_GENERIC_ERROR;



// checks the messages CRC, prepares the cw-pack context and decodes the message type
enum INTERFACE_STATUS pm_decode_start(enum pm_msg_type* msg_type_p, cw_unpack_context* context_p, const uint8_t *buf, size_t len) {
 8008092:	b5b0      	push	{r4, r5, r7, lr}
 8008094:	b08a      	sub	sp, #40	; 0x28
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
	uint64_t prot_version;
	uint64_t message_type;
	CRC_CHECK
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	3b04      	subs	r3, #4
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fb46 	bl	8007738 <calculate_crc>
 80080ac:	6278      	str	r0, [r7, #36]	; 0x24
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	3b04      	subs	r3, #4
 80080b2:	623b      	str	r3, [r7, #32]
 80080b4:	e010      	b.n	80080d8 <pm_decode_start+0x46>
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d001      	beq.n	80080cc <pm_decode_start+0x3a>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e042      	b.n	8008152 <pm_decode_start+0xc0>
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	0a1b      	lsrs	r3, r3, #8
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	3301      	adds	r3, #1
 80080d6:	623b      	str	r3, [r7, #32]
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d8ea      	bhi.n	80080b6 <pm_decode_start+0x24>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	3b04      	subs	r3, #4
 80080e4:	603b      	str	r3, [r7, #0]

	cw_unpack_context_init(context_p, buf, len, 0);
 80080e6:	2300      	movs	r3, #0
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	68b8      	ldr	r0, [r7, #8]
 80080ee:	f7f9 fcd8 	bl	8001aa2 <cw_unpack_context_init>
	cw_unpack_next_unsigned(context_p, &prot_version);
 80080f2:	f107 0318 	add.w	r3, r7, #24
 80080f6:	4619      	mov	r1, r3
 80080f8:	68b8      	ldr	r0, [r7, #8]
 80080fa:	f7fe f9f5 	bl	80064e8 <cw_unpack_next_unsigned>
	cw_unpack_next_unsigned(context_p, &message_type);
 80080fe:	f107 0310 	add.w	r3, r7, #16
 8008102:	4619      	mov	r1, r3
 8008104:	68b8      	ldr	r0, [r7, #8]
 8008106:	f7fe f9ef 	bl	80064e8 <cw_unpack_next_unsigned>

	if(context_p->return_code != CWP_RC_OK){
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <pm_decode_start+0x84>
		return INTERFACE_STATUS_MSG_MALFORMED;
 8008112:	2302      	movs	r3, #2
 8008114:	e01d      	b.n	8008152 <pm_decode_start+0xc0>
	}

	if (prot_version != protocol_version) {
 8008116:	2200      	movs	r2, #0
 8008118:	2300      	movs	r3, #0
 800811a:	4614      	mov	r4, r2
 800811c:	461d      	mov	r5, r3
 800811e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008122:	429d      	cmp	r5, r3
 8008124:	bf08      	it	eq
 8008126:	4294      	cmpeq	r4, r2
 8008128:	d001      	beq.n	800812e <pm_decode_start+0x9c>
		return INTERFACE_STATUS_GENERIC_ERROR;
 800812a:	2303      	movs	r3, #3
 800812c:	e011      	b.n	8008152 <pm_decode_start+0xc0>
	}
	
	if (message_type > 0xFF) {
 800812e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008132:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008136:	f173 0300 	sbcs.w	r3, r3, #0
 800813a:	d301      	bcc.n	8008140 <pm_decode_start+0xae>
		return INTERFACE_STATUS_GENERIC_ERROR;
 800813c:	2303      	movs	r3, #3
 800813e:	e008      	b.n	8008152 <pm_decode_start+0xc0>
	}
	
	if (msg_type_p != NULL) {
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <pm_decode_start+0xbe>
		*msg_type_p = message_type;
 8008146:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	701a      	strb	r2, [r3, #0]
	}
		
	return INTERFACE_STATUS_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3728      	adds	r7, #40	; 0x28
 8008156:	46bd      	mov	sp, r7
 8008158:	bdb0      	pop	{r4, r5, r7, pc}

0800815a <pm_measurement_decode>:
	}
	FINISH
}


enum INTERFACE_STATUS pm_measurement_decode(struct Measurements *m, cw_unpack_context* context_p) {
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
	if ((context_p == NULL) || (m == NULL)) {
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <pm_measurement_decode+0x16>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <pm_measurement_decode+0x1a>
		return INTERFACE_STATUS_GENERIC_ERROR;
 8008170:	2303      	movs	r3, #3
 8008172:	e053      	b.n	800821c <pm_measurement_decode+0xc2>
	}
	
	 cw_unpack_next_float(context_p, &m->T_UC);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3314      	adds	r3, #20
 8008178:	4619      	mov	r1, r3
 800817a:	6838      	ldr	r0, [r7, #0]
 800817c:	f7fe f9d5 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->T_NTC_A);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	330c      	adds	r3, #12
 8008184:	4619      	mov	r1, r3
 8008186:	6838      	ldr	r0, [r7, #0]
 8008188:	f7fe f9cf 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->T_NTC_B );
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3310      	adds	r3, #16
 8008190:	4619      	mov	r1, r3
 8008192:	6838      	ldr	r0, [r7, #0]
 8008194:	f7fe f9c9 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->V_HB_1 );
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4619      	mov	r1, r3
 800819c:	6838      	ldr	r0, [r7, #0]
 800819e:	f7fe f9c4 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->V_OUT_A );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	6838      	ldr	r0, [r7, #0]
 80081aa:	f7fe f9be 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->V_OUT_B);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3308      	adds	r3, #8
 80081b2:	4619      	mov	r1, r3
 80081b4:	6838      	ldr	r0, [r7, #0]
 80081b6:	f7fe f9b8 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_boolean(context_p, &m->fuseON_OFF_State);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3318      	adds	r3, #24
 80081be:	4619      	mov	r1, r3
 80081c0:	6838      	ldr	r0, [r7, #0]
 80081c2:	f7fe f971 	bl	80064a8 <cw_unpack_next_boolean>
	 cw_unpack_next_boolean(context_p, &m->fuseON_ProtectionState);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3319      	adds	r3, #25
 80081ca:	4619      	mov	r1, r3
 80081cc:	6838      	ldr	r0, [r7, #0]
 80081ce:	f7fe f96b 	bl	80064a8 <cw_unpack_next_boolean>
	 cw_unpack_next_boolean(context_p, &m->fuseEnabled);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	331a      	adds	r3, #26
 80081d6:	4619      	mov	r1, r3
 80081d8:	6838      	ldr	r0, [r7, #0]
 80081da:	f7fe f965 	bl	80064a8 <cw_unpack_next_boolean>
	 cw_unpack_next_float(context_p, &m->fuseProtectionCurrent);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	331c      	adds	r3, #28
 80081e2:	4619      	mov	r1, r3
 80081e4:	6838      	ldr	r0, [r7, #0]
 80081e6:	f7fe f9a0 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->fuseProtectionTime );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3320      	adds	r3, #32
 80081ee:	4619      	mov	r1, r3
 80081f0:	6838      	ldr	r0, [r7, #0]
 80081f2:	f7fe f99a 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_float(context_p, &m->moduleCurrent );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3324      	adds	r3, #36	; 0x24
 80081fa:	4619      	mov	r1, r3
 80081fc:	6838      	ldr	r0, [r7, #0]
 80081fe:	f7fe f994 	bl	800652a <cw_unpack_next_float>
	 cw_unpack_next_unsigned(context_p, (uint64_t*)&m->id_uc );
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3328      	adds	r3, #40	; 0x28
 8008206:	4619      	mov	r1, r3
 8008208:	6838      	ldr	r0, [r7, #0]
 800820a:	f7fe f96d 	bl	80064e8 <cw_unpack_next_unsigned>

	if(context_p->return_code != CWP_RC_OK) {
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <pm_measurement_decode+0xc0>
		return INTERFACE_STATUS_MSG_MALFORMED; 
 8008216:	2302      	movs	r3, #2
 8008218:	e000      	b.n	800821c <pm_measurement_decode+0xc2>
	}

	return INTERFACE_STATUS_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <pm_control_encode>:


_ssize_t pm_control_encode(const struct pm_control *m, uint8_t *buf, size_t len) {
 8008224:	b5b0      	push	{r4, r5, r7, lr}
 8008226:	b098      	sub	sp, #96	; 0x60
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
	cw_pack_context pc;
	uint8_t buffer[32];
	cw_pack_context_init(&pc, buffer, sizeof(buffer), 0);
 8008230:	f107 0114 	add.w	r1, r7, #20
 8008234:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008238:	2300      	movs	r3, #0
 800823a:	2220      	movs	r2, #32
 800823c:	f7f9 f9b2 	bl	80015a4 <cw_pack_context_init>
	cw_pack_unsigned(&pc, protocol_version);
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	4614      	mov	r4, r2
 8008246:	461d      	mov	r5, r3
 8008248:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800824c:	4622      	mov	r2, r4
 800824e:	462b      	mov	r3, r5
 8008250:	4608      	mov	r0, r1
 8008252:	f7f9 f9d2 	bl	80015fa <cw_pack_unsigned>
	cw_pack_unsigned(&pc, PM_MT_CONTROL);
 8008256:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800825a:	f04f 0201 	mov.w	r2, #1
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	4608      	mov	r0, r1
 8008264:	f7f9 f9c9 	bl	80015fa <cw_pack_unsigned>
	cw_pack_boolean(&pc, m->powerswitch);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f7f9 fbdd 	bl	8001a32 <cw_pack_boolean>
	cw_pack_boolean(&pc, m->zcd);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	785a      	ldrb	r2, [r3, #1]
 800827c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7f9 fbd5 	bl	8001a32 <cw_pack_boolean>
	cw_pack_boolean(&pc, m->clear_fault);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	789a      	ldrb	r2, [r3, #2]
 800828c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7f9 fbcd 	bl	8001a32 <cw_pack_boolean>

	if(pc.return_code != CWP_RC_OK){
 8008298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <pm_control_encode+0x80>
		return -1;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
 80082a2:	e032      	b.n	800830a <pm_control_encode+0xe6>
	}
	FINISH
 80082a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	dc02      	bgt.n	80082b4 <pm_control_encode+0x90>
 80082ae:	f04f 33ff 	mov.w	r3, #4294967295
 80082b2:	e02a      	b.n	800830a <pm_control_encode+0xe6>
 80082b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fa38 	bl	8007738 <calculate_crc>
 80082c8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80082ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80082ce:	2300      	movs	r3, #0
 80082d0:	657b      	str	r3, [r7, #84]	; 0x54
 80082d2:	e00b      	b.n	80082ec <pm_control_encode+0xc8>
 80082d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80082da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e8:	3301      	adds	r3, #1
 80082ea:	657b      	str	r3, [r7, #84]	; 0x54
 80082ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	ddf0      	ble.n	80082d4 <pm_control_encode+0xb0>
 80082f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f4:	1d1a      	adds	r2, r3, #4
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	4619      	mov	r1, r3
 80082fc:	f107 0014 	add.w	r0, r7, #20
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	f000 fc76 	bl	8008bf4 <uart_escape_encode>
 8008308:	4603      	mov	r3, r0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3760      	adds	r7, #96	; 0x60
 800830e:	46bd      	mov	sp, r7
 8008310:	bdb0      	pop	{r4, r5, r7, pc}

08008312 <pm_request_messages_encode>:
	}
	return INTERFACE_STATUS_OK;
}


_ssize_t pm_request_messages_encode (const struct pm_request_messages *r_m_p, uint8_t *buf, size_t len) {
 8008312:	b5b0      	push	{r4, r5, r7, lr}
 8008314:	b098      	sub	sp, #96	; 0x60
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	607a      	str	r2, [r7, #4]
	}
	FINISH*/

	cw_pack_context pc;
	uint8_t buffer[32];
	cw_pack_context_init(&pc, buffer, sizeof(buffer), 0);
 800831e:	f107 0114 	add.w	r1, r7, #20
 8008322:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008326:	2300      	movs	r3, #0
 8008328:	2220      	movs	r2, #32
 800832a:	f7f9 f93b 	bl	80015a4 <cw_pack_context_init>
	cw_pack_unsigned(&pc, protocol_version);
 800832e:	2200      	movs	r2, #0
 8008330:	2300      	movs	r3, #0
 8008332:	4614      	mov	r4, r2
 8008334:	461d      	mov	r5, r3
 8008336:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	4608      	mov	r0, r1
 8008340:	f7f9 f95b 	bl	80015fa <cw_pack_unsigned>
	cw_pack_unsigned(&pc, PM_MT_REQUEST_MSG);
 8008344:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008348:	f04f 0202 	mov.w	r2, #2
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	4608      	mov	r0, r1
 8008352:	f7f9 f952 	bl	80015fa <cw_pack_unsigned>
	cw_pack_boolean(&pc, r_m_p->measurements);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7f9 fb66 	bl	8001a32 <cw_pack_boolean>
	cw_pack_boolean(&pc, r_m_p->flags);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	785a      	ldrb	r2, [r3, #1]
 800836a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800836e:	4611      	mov	r1, r2
 8008370:	4618      	mov	r0, r3
 8008372:	f7f9 fb5e 	bl	8001a32 <cw_pack_boolean>

	cw_pack_boolean(&pc, r_m_p->fuseRestart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	789a      	ldrb	r2, [r3, #2]
 800837a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f7f9 fb56 	bl	8001a32 <cw_pack_boolean>
	cw_pack_boolean(&pc, r_m_p->fuseParamSave);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	78da      	ldrb	r2, [r3, #3]
 800838a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f7f9 fb4e 	bl	8001a32 <cw_pack_boolean>
	cw_pack_boolean(&pc, r_m_p->fuseON_OFF);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	791a      	ldrb	r2, [r3, #4]
 800839a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7f9 fb46 	bl	8001a32 <cw_pack_boolean>
	cw_pack_boolean(&pc, r_m_p->fuseEN);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	795a      	ldrb	r2, [r3, #5]
 80083aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7f9 fb3e 	bl	8001a32 <cw_pack_boolean>
	cw_pack_float(&pc,   r_m_p->fuseProtectionCurrent);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80083bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083c0:	eeb0 0a67 	vmov.f32	s0, s15
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7f9 fae2 	bl	800198e <cw_pack_float>
	cw_pack_float(&pc,   r_m_p->fuseProtectionTime);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80083d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083d4:	eeb0 0a67 	vmov.f32	s0, s15
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f9 fad8 	bl	800198e <cw_pack_float>

	if(pc.return_code != CWP_RC_OK){
 80083de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <pm_request_messages_encode+0xd8>
			return -1;
 80083e4:	f04f 33ff 	mov.w	r3, #4294967295
 80083e8:	e032      	b.n	8008450 <pm_request_messages_encode+0x13e>
	}
	FINISH
 80083ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	dc02      	bgt.n	80083fa <pm_request_messages_encode+0xe8>
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
 80083f8:	e02a      	b.n	8008450 <pm_request_messages_encode+0x13e>
 80083fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	461a      	mov	r2, r3
 8008402:	f107 0314 	add.w	r3, r7, #20
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff f995 	bl	8007738 <calculate_crc>
 800840e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	65bb      	str	r3, [r7, #88]	; 0x58
 8008414:	2300      	movs	r3, #0
 8008416:	657b      	str	r3, [r7, #84]	; 0x54
 8008418:	e00b      	b.n	8008432 <pm_request_messages_encode+0x120>
 800841a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008428:	0a1b      	lsrs	r3, r3, #8
 800842a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800842c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800842e:	3301      	adds	r3, #1
 8008430:	657b      	str	r3, [r7, #84]	; 0x54
 8008432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008434:	2b03      	cmp	r3, #3
 8008436:	ddf0      	ble.n	800841a <pm_request_messages_encode+0x108>
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	1d1a      	adds	r2, r3, #4
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	4619      	mov	r1, r3
 8008442:	f107 0014 	add.w	r0, r7, #20
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	f000 fbd3 	bl	8008bf4 <uart_escape_encode>
 800844e:	4603      	mov	r3, r0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3760      	adds	r7, #96	; 0x60
 8008454:	46bd      	mov	sp, r7
 8008456:	bdb0      	pop	{r4, r5, r7, pc}

08008458 <pm_status_flags_decode>:
	}
	FINISH
}


enum INTERFACE_STATUS pm_status_flags_decode(struct pm_status_flags *flags_p, cw_unpack_context* context_p) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	if ((context_p == NULL) || (flags_p == NULL)) {
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <pm_status_flags_decode+0x16>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <pm_status_flags_decode+0x1a>
		return INTERFACE_STATUS_GENERIC_ERROR;
 800846e:	2303      	movs	r3, #3
 8008470:	e029      	b.n	80084c6 <pm_status_flags_decode+0x6e>
	}
			
	cw_unpack_next_boolean(context_p, &flags_p->THW_A);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4619      	mov	r1, r3
 8008476:	6838      	ldr	r0, [r7, #0]
 8008478:	f7fe f816 	bl	80064a8 <cw_unpack_next_boolean>
	cw_unpack_next_boolean(context_p, &flags_p->THW_B);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3301      	adds	r3, #1
 8008480:	4619      	mov	r1, r3
 8008482:	6838      	ldr	r0, [r7, #0]
 8008484:	f7fe f810 	bl	80064a8 <cw_unpack_next_boolean>
	cw_unpack_next_boolean(context_p, &flags_p->powerswitch);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3302      	adds	r3, #2
 800848c:	4619      	mov	r1, r3
 800848e:	6838      	ldr	r0, [r7, #0]
 8008490:	f7fe f80a 	bl	80064a8 <cw_unpack_next_boolean>
	cw_unpack_next_boolean(context_p, &flags_p->zcd);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3303      	adds	r3, #3
 8008498:	4619      	mov	r1, r3
 800849a:	6838      	ldr	r0, [r7, #0]
 800849c:	f7fe f804 	bl	80064a8 <cw_unpack_next_boolean>
	cw_unpack_next_boolean(context_p, &flags_p->fault_a);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	6838      	ldr	r0, [r7, #0]
 80084a8:	f7fd fffe 	bl	80064a8 <cw_unpack_next_boolean>
	cw_unpack_next_boolean(context_p, &flags_p->fault_b);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3305      	adds	r3, #5
 80084b0:	4619      	mov	r1, r3
 80084b2:	6838      	ldr	r0, [r7, #0]
 80084b4:	f7fd fff8 	bl	80064a8 <cw_unpack_next_boolean>

	if(context_p->return_code != CWP_RC_OK) {
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <pm_status_flags_decode+0x6c>
		return INTERFACE_STATUS_MSG_MALFORMED; 
 80084c0:	2302      	movs	r3, #2
 80084c2:	e000      	b.n	80084c6 <pm_status_flags_decode+0x6e>
	}
	
	return INTERFACE_STATUS_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084d6:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <HAL_MspInit+0x44>)
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	4a0e      	ldr	r2, [pc, #56]	; (8008514 <HAL_MspInit+0x44>)
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	6613      	str	r3, [r2, #96]	; 0x60
 80084e2:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <HAL_MspInit+0x44>)
 80084e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <HAL_MspInit+0x44>)
 80084f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f2:	4a08      	ldr	r2, [pc, #32]	; (8008514 <HAL_MspInit+0x44>)
 80084f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f8:	6593      	str	r3, [r2, #88]	; 0x58
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <HAL_MspInit+0x44>)
 80084fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008506:	f001 fd25 	bl	8009f54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40021000 	.word	0x40021000

08008518 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a0a      	ldr	r2, [pc, #40]	; (8008550 <HAL_CRC_MspInit+0x38>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d10b      	bne.n	8008542 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <HAL_CRC_MspInit+0x3c>)
 800852c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <HAL_CRC_MspInit+0x3c>)
 8008530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008534:	6493      	str	r3, [r2, #72]	; 0x48
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <HAL_CRC_MspInit+0x3c>)
 8008538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008542:	bf00      	nop
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40023000 	.word	0x40023000
 8008554:	40021000 	.word	0x40021000

08008558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0a      	ldr	r2, [pc, #40]	; (8008590 <HAL_TIM_Base_MspInit+0x38>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d10b      	bne.n	8008582 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <HAL_TIM_Base_MspInit+0x3c>)
 800856c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856e:	4a09      	ldr	r2, [pc, #36]	; (8008594 <HAL_TIM_Base_MspInit+0x3c>)
 8008570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008574:	6613      	str	r3, [r2, #96]	; 0x60
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <HAL_TIM_Base_MspInit+0x3c>)
 8008578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008582:	bf00      	nop
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40012c00 	.word	0x40012c00
 8008594:	40021000 	.word	0x40021000

08008598 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a0a      	ldr	r2, [pc, #40]	; (80085d0 <HAL_TIM_PWM_MspInit+0x38>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d10b      	bne.n	80085c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80085aa:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ae:	4a09      	ldr	r2, [pc, #36]	; (80085d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80085b0:	f043 0302 	orr.w	r3, r3, #2
 80085b4:	6593      	str	r3, [r2, #88]	; 0x58
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80085b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80085c2:	bf00      	nop
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40000400 	.word	0x40000400
 80085d4:	40021000 	.word	0x40021000

080085d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	; 0x28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	605a      	str	r2, [r3, #4]
 80085ea:	609a      	str	r2, [r3, #8]
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a23      	ldr	r2, [pc, #140]	; (8008684 <HAL_TIM_MspPostInit+0xac>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d11e      	bne.n	8008638 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <HAL_TIM_MspPostInit+0xb0>)
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	4a22      	ldr	r2, [pc, #136]	; (8008688 <HAL_TIM_MspPostInit+0xb0>)
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008606:	4b20      	ldr	r3, [pc, #128]	; (8008688 <HAL_TIM_MspPostInit+0xb0>)
 8008608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8008612:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008618:	2302      	movs	r3, #2
 800861a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008620:	2300      	movs	r3, #0
 8008622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8008624:	2306      	movs	r3, #6
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008628:	f107 0314 	add.w	r3, r7, #20
 800862c:	4619      	mov	r1, r3
 800862e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008632:	f001 fa51 	bl	8009ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008636:	e021      	b.n	800867c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a13      	ldr	r2, [pc, #76]	; (800868c <HAL_TIM_MspPostInit+0xb4>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d11c      	bne.n	800867c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008642:	4b11      	ldr	r3, [pc, #68]	; (8008688 <HAL_TIM_MspPostInit+0xb0>)
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	4a10      	ldr	r2, [pc, #64]	; (8008688 <HAL_TIM_MspPostInit+0xb0>)
 8008648:	f043 0304 	orr.w	r3, r3, #4
 800864c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800864e:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <HAL_TIM_MspPostInit+0xb0>)
 8008650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800865a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800865e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008660:	2302      	movs	r3, #2
 8008662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008668:	2300      	movs	r3, #0
 800866a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800866c:	2302      	movs	r3, #2
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	4619      	mov	r1, r3
 8008676:	4806      	ldr	r0, [pc, #24]	; (8008690 <HAL_TIM_MspPostInit+0xb8>)
 8008678:	f001 fa2e 	bl	8009ad8 <HAL_GPIO_Init>
}
 800867c:	bf00      	nop
 800867e:	3728      	adds	r7, #40	; 0x28
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40012c00 	.word	0x40012c00
 8008688:	40021000 	.word	0x40021000
 800868c:	40000400 	.word	0x40000400
 8008690:	48000800 	.word	0x48000800

08008694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b0a0      	sub	sp, #128	; 0x80
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800869c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086b0:	2244      	movs	r2, #68	; 0x44
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f007 f87c 	bl	800f7b2 <memset>
  if(huart->Instance==USART1)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4aa0      	ldr	r2, [pc, #640]	; (8008940 <HAL_UART_MspInit+0x2ac>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d168      	bne.n	8008796 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80086c8:	2300      	movs	r3, #0
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086d0:	4618      	mov	r0, r3
 80086d2:	f002 f983 	bl	800a9dc <HAL_RCCEx_PeriphCLKConfig>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80086dc:	f7ff fcd4 	bl	8008088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80086e0:	4b98      	ldr	r3, [pc, #608]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80086e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e4:	4a97      	ldr	r2, [pc, #604]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80086e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086ea:	6613      	str	r3, [r2, #96]	; 0x60
 80086ec:	4b95      	ldr	r3, [pc, #596]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80086ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086f8:	4b92      	ldr	r3, [pc, #584]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80086fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fc:	4a91      	ldr	r2, [pc, #580]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80086fe:	f043 0304 	orr.w	r3, r3, #4
 8008702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008704:	4b8f      	ldr	r3, [pc, #572]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	623b      	str	r3, [r7, #32]
 800870e:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = M1_TX_Pin|M1_RX_Pin;
 8008710:	2330      	movs	r3, #48	; 0x30
 8008712:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008714:	2302      	movs	r3, #2
 8008716:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	2300      	movs	r3, #0
 800871a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800871c:	2300      	movs	r3, #0
 800871e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008720:	2307      	movs	r3, #7
 8008722:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008728:	4619      	mov	r1, r3
 800872a:	4887      	ldr	r0, [pc, #540]	; (8008948 <HAL_UART_MspInit+0x2b4>)
 800872c:	f001 f9d4 	bl	8009ad8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8008730:	4b86      	ldr	r3, [pc, #536]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008732:	4a87      	ldr	r2, [pc, #540]	; (8008950 <HAL_UART_MspInit+0x2bc>)
 8008734:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008736:	4b85      	ldr	r3, [pc, #532]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008738:	2218      	movs	r2, #24
 800873a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800873c:	4b83      	ldr	r3, [pc, #524]	; (800894c <HAL_UART_MspInit+0x2b8>)
 800873e:	2200      	movs	r2, #0
 8008740:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008742:	4b82      	ldr	r3, [pc, #520]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008744:	2200      	movs	r2, #0
 8008746:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008748:	4b80      	ldr	r3, [pc, #512]	; (800894c <HAL_UART_MspInit+0x2b8>)
 800874a:	2280      	movs	r2, #128	; 0x80
 800874c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800874e:	4b7f      	ldr	r3, [pc, #508]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008750:	2200      	movs	r2, #0
 8008752:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008754:	4b7d      	ldr	r3, [pc, #500]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008756:	2200      	movs	r2, #0
 8008758:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800875a:	4b7c      	ldr	r3, [pc, #496]	; (800894c <HAL_UART_MspInit+0x2b8>)
 800875c:	2220      	movs	r2, #32
 800875e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008760:	4b7a      	ldr	r3, [pc, #488]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008762:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008768:	4878      	ldr	r0, [pc, #480]	; (800894c <HAL_UART_MspInit+0x2b8>)
 800876a:	f000 fe77 	bl	800945c <HAL_DMA_Init>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8008774:	f7ff fc88 	bl	8008088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a74      	ldr	r2, [pc, #464]	; (800894c <HAL_UART_MspInit+0x2b8>)
 800877c:	67da      	str	r2, [r3, #124]	; 0x7c
 800877e:	4a73      	ldr	r2, [pc, #460]	; (800894c <HAL_UART_MspInit+0x2b8>)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	2025      	movs	r0, #37	; 0x25
 800878a:	f000 fc34 	bl	8008ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800878e:	2025      	movs	r0, #37	; 0x25
 8008790:	f000 fc4b 	bl	800902a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008794:	e0d0      	b.n	8008938 <HAL_UART_MspInit+0x2a4>
  else if(huart->Instance==USART2)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a6e      	ldr	r2, [pc, #440]	; (8008954 <HAL_UART_MspInit+0x2c0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	f040 8087 	bne.w	80088b0 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80087a2:	2302      	movs	r3, #2
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80087a6:	2300      	movs	r3, #0
 80087a8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80087aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 f914 	bl	800a9dc <HAL_RCCEx_PeriphCLKConfig>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80087ba:	f7ff fc65 	bl	8008088 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80087be:	4b61      	ldr	r3, [pc, #388]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c2:	4a60      	ldr	r2, [pc, #384]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087c8:	6593      	str	r3, [r2, #88]	; 0x58
 80087ca:	4b5e      	ldr	r3, [pc, #376]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087d6:	4b5b      	ldr	r3, [pc, #364]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087da:	4a5a      	ldr	r2, [pc, #360]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087dc:	f043 0301 	orr.w	r3, r3, #1
 80087e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087e2:	4b58      	ldr	r3, [pc, #352]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087ee:	4b55      	ldr	r3, [pc, #340]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f2:	4a54      	ldr	r2, [pc, #336]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087fa:	4b52      	ldr	r3, [pc, #328]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80087fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M_RX_Pin;
 8008806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800880a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800880c:	2302      	movs	r3, #2
 800880e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008810:	2300      	movs	r3, #0
 8008812:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008814:	2300      	movs	r3, #0
 8008816:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008818:	2307      	movs	r3, #7
 800881a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(M_RX_GPIO_Port, &GPIO_InitStruct);
 800881c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008820:	4619      	mov	r1, r3
 8008822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008826:	f001 f957 	bl	8009ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M_TX_Pin;
 800882a:	2308      	movs	r3, #8
 800882c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800882e:	2302      	movs	r3, #2
 8008830:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008832:	2300      	movs	r3, #0
 8008834:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008836:	2300      	movs	r3, #0
 8008838:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800883a:	2307      	movs	r3, #7
 800883c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(M_TX_GPIO_Port, &GPIO_InitStruct);
 800883e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008842:	4619      	mov	r1, r3
 8008844:	4844      	ldr	r0, [pc, #272]	; (8008958 <HAL_UART_MspInit+0x2c4>)
 8008846:	f001 f947 	bl	8009ad8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800884a:	4b44      	ldr	r3, [pc, #272]	; (800895c <HAL_UART_MspInit+0x2c8>)
 800884c:	4a44      	ldr	r2, [pc, #272]	; (8008960 <HAL_UART_MspInit+0x2cc>)
 800884e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008850:	4b42      	ldr	r3, [pc, #264]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008852:	221a      	movs	r2, #26
 8008854:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008856:	4b41      	ldr	r3, [pc, #260]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008858:	2200      	movs	r2, #0
 800885a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800885c:	4b3f      	ldr	r3, [pc, #252]	; (800895c <HAL_UART_MspInit+0x2c8>)
 800885e:	2200      	movs	r2, #0
 8008860:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008862:	4b3e      	ldr	r3, [pc, #248]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008864:	2280      	movs	r2, #128	; 0x80
 8008866:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008868:	4b3c      	ldr	r3, [pc, #240]	; (800895c <HAL_UART_MspInit+0x2c8>)
 800886a:	2200      	movs	r2, #0
 800886c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008870:	2200      	movs	r2, #0
 8008872:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008874:	4b39      	ldr	r3, [pc, #228]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008876:	2220      	movs	r2, #32
 8008878:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800887a:	4b38      	ldr	r3, [pc, #224]	; (800895c <HAL_UART_MspInit+0x2c8>)
 800887c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008880:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008882:	4836      	ldr	r0, [pc, #216]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008884:	f000 fdea 	bl	800945c <HAL_DMA_Init>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 800888e:	f7ff fbfb 	bl	8008088 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a31      	ldr	r2, [pc, #196]	; (800895c <HAL_UART_MspInit+0x2c8>)
 8008896:	67da      	str	r2, [r3, #124]	; 0x7c
 8008898:	4a30      	ldr	r2, [pc, #192]	; (800895c <HAL_UART_MspInit+0x2c8>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	2026      	movs	r0, #38	; 0x26
 80088a4:	f000 fba7 	bl	8008ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80088a8:	2026      	movs	r0, #38	; 0x26
 80088aa:	f000 fbbe 	bl	800902a <HAL_NVIC_EnableIRQ>
}
 80088ae:	e043      	b.n	8008938 <HAL_UART_MspInit+0x2a4>
  else if(huart->Instance==USART3)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a2b      	ldr	r2, [pc, #172]	; (8008964 <HAL_UART_MspInit+0x2d0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d13e      	bne.n	8008938 <HAL_UART_MspInit+0x2a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80088ba:	2304      	movs	r3, #4
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80088be:	2300      	movs	r3, #0
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 f888 	bl	800a9dc <HAL_RCCEx_PeriphCLKConfig>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_UART_MspInit+0x242>
      Error_Handler();
 80088d2:	f7ff fbd9 	bl	8008088 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80088d6:	4b1b      	ldr	r3, [pc, #108]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80088dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088e0:	6593      	str	r3, [r2, #88]	; 0x58
 80088e2:	4b18      	ldr	r3, [pc, #96]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80088e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80088f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f2:	4a14      	ldr	r2, [pc, #80]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <HAL_UART_MspInit+0x2b0>)
 80088fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FT_RX_Pin|FT_TX_Pin;
 8008906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800890a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800890c:	2302      	movs	r3, #2
 800890e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008910:	2300      	movs	r3, #0
 8008912:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008914:	2300      	movs	r3, #0
 8008916:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008918:	2307      	movs	r3, #7
 800891a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800891c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008920:	4619      	mov	r1, r3
 8008922:	480d      	ldr	r0, [pc, #52]	; (8008958 <HAL_UART_MspInit+0x2c4>)
 8008924:	f001 f8d8 	bl	8009ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008928:	2200      	movs	r2, #0
 800892a:	2100      	movs	r1, #0
 800892c:	2027      	movs	r0, #39	; 0x27
 800892e:	f000 fb62 	bl	8008ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008932:	2027      	movs	r0, #39	; 0x27
 8008934:	f000 fb79 	bl	800902a <HAL_NVIC_EnableIRQ>
}
 8008938:	bf00      	nop
 800893a:	3780      	adds	r7, #128	; 0x80
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40013800 	.word	0x40013800
 8008944:	40021000 	.word	0x40021000
 8008948:	48000800 	.word	0x48000800
 800894c:	20000914 	.word	0x20000914
 8008950:	40020008 	.word	0x40020008
 8008954:	40004400 	.word	0x40004400
 8008958:	48000400 	.word	0x48000400
 800895c:	20000974 	.word	0x20000974
 8008960:	4002001c 	.word	0x4002001c
 8008964:	40004800 	.word	0x40004800

08008968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800896c:	e7fe      	b.n	800896c <NMI_Handler+0x4>

0800896e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800896e:	b480      	push	{r7}
 8008970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008972:	e7fe      	b.n	8008972 <HardFault_Handler+0x4>

08008974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008978:	e7fe      	b.n	8008978 <MemManage_Handler+0x4>

0800897a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800897a:	b480      	push	{r7}
 800897c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800897e:	e7fe      	b.n	800897e <BusFault_Handler+0x4>

08008980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008984:	e7fe      	b.n	8008984 <UsageFault_Handler+0x4>

08008986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008986:	b480      	push	{r7}
 8008988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800898a:	bf00      	nop
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008998:	bf00      	nop
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089a2:	b480      	push	{r7}
 80089a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089a6:	bf00      	nop
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
   CountersHandler ();
 80089b4:	f7fd fef4 	bl	80067a0 <CountersHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089b8:	f000 fa02 	bl	8008dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089bc:	bf00      	nop
 80089be:	bd80      	pop	{r7, pc}

080089c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  if(getPk1 == false)
 80089c4:	4b09      	ldr	r3, [pc, #36]	; (80089ec <DMA1_Channel1_IRQHandler+0x2c>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <DMA1_Channel1_IRQHandler+0x22>
  {
	  memcpy((uint8_t*)&rxDataBufRd[0], (uint8_t*)&rxDataBuf[0], sizeof(rxDataBufRd));
 80089cc:	22fa      	movs	r2, #250	; 0xfa
 80089ce:	4908      	ldr	r1, [pc, #32]	; (80089f0 <DMA1_Channel1_IRQHandler+0x30>)
 80089d0:	4808      	ldr	r0, [pc, #32]	; (80089f4 <DMA1_Channel1_IRQHandler+0x34>)
 80089d2:	f006 ff84 	bl	800f8de <memcpy>
	  getPk1 = true;
 80089d6:	4b05      	ldr	r3, [pc, #20]	; (80089ec <DMA1_Channel1_IRQHandler+0x2c>)
 80089d8:	2201      	movs	r2, #1
 80089da:	701a      	strb	r2, [r3, #0]
	  startCntUART1 = 0;
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <DMA1_Channel1_IRQHandler+0x38>)
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80089e2:	4806      	ldr	r0, [pc, #24]	; (80089fc <DMA1_Channel1_IRQHandler+0x3c>)
 80089e4:	f000 ff1d 	bl	8009822 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80089e8:	bf00      	nop
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20000ee2 	.word	0x20000ee2
 80089f0:	20000cec 	.word	0x20000cec
 80089f4:	20000de8 	.word	0x20000de8
 80089f8:	200011a8 	.word	0x200011a8
 80089fc:	20000914 	.word	0x20000914

08008a00 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  if(getPk2 == false)
 8008a04:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <DMA1_Channel2_IRQHandler+0x2c>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <DMA1_Channel2_IRQHandler+0x22>
  {
	  memcpy((uint8_t*)&rxDataBufRd2[0], (uint8_t*)&rxDataBuf2[0], sizeof(rxDataBufRd2));
 8008a0c:	22fa      	movs	r2, #250	; 0xfa
 8008a0e:	4908      	ldr	r1, [pc, #32]	; (8008a30 <DMA1_Channel2_IRQHandler+0x30>)
 8008a10:	4808      	ldr	r0, [pc, #32]	; (8008a34 <DMA1_Channel2_IRQHandler+0x34>)
 8008a12:	f006 ff64 	bl	800f8de <memcpy>
	  getPk2 = true;
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <DMA1_Channel2_IRQHandler+0x2c>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	701a      	strb	r2, [r3, #0]
	  startCntUART2 =0;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <DMA1_Channel2_IRQHandler+0x38>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008a22:	4806      	ldr	r0, [pc, #24]	; (8008a3c <DMA1_Channel2_IRQHandler+0x3c>)
 8008a24:	f000 fefd 	bl	8009822 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008a28:	bf00      	nop
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	200010da 	.word	0x200010da
 8008a30:	20000ee4 	.word	0x20000ee4
 8008a34:	20000fe0 	.word	0x20000fe0
 8008a38:	200011a9 	.word	0x200011a9
 8008a3c:	20000974 	.word	0x20000974

08008a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  //uart_escape_byte_in((uint8_t)(huart1.Instance->RDR));
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008a44:	4802      	ldr	r0, [pc, #8]	; (8008a50 <USART1_IRQHandler+0x10>)
 8008a46:	f003 fd9b 	bl	800c580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008a4a:	bf00      	nop
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000764 	.word	0x20000764

08008a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  //uart_escape_byte_in((uint8_t)(huart2.Instance->RDR));
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008a58:	4802      	ldr	r0, [pc, #8]	; (8008a64 <USART2_IRQHandler+0x10>)
 8008a5a:	f003 fd91 	bl	800c580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008a5e:	bf00      	nop
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200007f4 	.word	0x200007f4

08008a68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008a6c:	4802      	ldr	r0, [pc, #8]	; (8008a78 <USART3_IRQHandler+0x10>)
 8008a6e:	f003 fd87 	bl	800c580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008a72:	bf00      	nop
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000884 	.word	0x20000884

08008a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  return 1;
 8008a80:	2301      	movs	r3, #1
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <_kill>:

int _kill(int pid, int sig)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008a96:	f006 fef5 	bl	800f884 <__errno>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2216      	movs	r2, #22
 8008a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <_exit>:

void _exit (int status)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff ffe7 	bl	8008a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8008abe:	e7fe      	b.n	8008abe <_exit+0x12>

08008ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e00a      	b.n	8008ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008ad2:	f3af 8000 	nop.w
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	60ba      	str	r2, [r7, #8]
 8008ade:	b2ca      	uxtb	r2, r1
 8008ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	dbf0      	blt.n	8008ad2 <_read+0x12>
  }

  return len;
 8008af0:	687b      	ldr	r3, [r7, #4]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b22:	605a      	str	r2, [r3, #4]
  return 0;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <_isatty>:

int _isatty(int file)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008b3a:	2301      	movs	r3, #1
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b6c:	4a14      	ldr	r2, [pc, #80]	; (8008bc0 <_sbrk+0x5c>)
 8008b6e:	4b15      	ldr	r3, [pc, #84]	; (8008bc4 <_sbrk+0x60>)
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b78:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <_sbrk+0x64>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b80:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <_sbrk+0x64>)
 8008b82:	4a12      	ldr	r2, [pc, #72]	; (8008bcc <_sbrk+0x68>)
 8008b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b86:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <_sbrk+0x64>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d207      	bcs.n	8008ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b94:	f006 fe76 	bl	800f884 <__errno>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	220c      	movs	r2, #12
 8008b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba2:	e009      	b.n	8008bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008ba4:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <_sbrk+0x64>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008baa:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <_sbrk+0x64>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	4a05      	ldr	r2, [pc, #20]	; (8008bc8 <_sbrk+0x64>)
 8008bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20008000 	.word	0x20008000
 8008bc4:	00000400 	.word	0x00000400
 8008bc8:	200012ec 	.word	0x200012ec
 8008bcc:	20001440 	.word	0x20001440

08008bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008bd4:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <SystemInit+0x20>)
 8008bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bda:	4a05      	ldr	r2, [pc, #20]	; (8008bf0 <SystemInit+0x20>)
 8008bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008be4:	bf00      	nop
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	e000ed00 	.word	0xe000ed00

08008bf4 <uart_escape_encode>:
		}
		
	}
}

_ssize_t uart_escape_encode(const uint8_t *msg, size_t msglen, uint8_t* buf, size_t buflen){
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
	_ssize_t encodelen=1;
 8008c02:	2301      	movs	r3, #1
 8008c04:	617b      	str	r3, [r7, #20]
	if(encodelen > buflen){
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d202      	bcs.n	8008c14 <uart_escape_encode+0x20>
		return -1;
 8008c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c12:	e052      	b.n	8008cba <uart_escape_encode+0xc6>
	}
	*(buf++) = UART_ESCAPE_SOT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	2243      	movs	r2, #67	; 0x43
 8008c1c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<msglen; i++){
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	e036      	b.n	8008c92 <uart_escape_encode+0x9e>
		switch(msg[i]){
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	4413      	add	r3, r2
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	3b42      	subs	r3, #66	; 0x42
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d819      	bhi.n	8008c66 <uart_escape_encode+0x72>
			case UART_ESCAPE_CHAR:
			case UART_ESCAPE_SOT:
			case UART_ESCAPE_EOT:
			case UART_ESCAPE_ALARM:
				encodelen += 2;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	3302      	adds	r3, #2
 8008c36:	617b      	str	r3, [r7, #20]
				if(encodelen > buflen){
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d202      	bcs.n	8008c46 <uart_escape_encode+0x52>
					return -1;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295
 8008c44:	e039      	b.n	8008cba <uart_escape_encode+0xc6>
				}
				(*buf++) = UART_ESCAPE_CHAR;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	2242      	movs	r2, #66	; 0x42
 8008c4e:	701a      	strb	r2, [r3, #0]
				(*buf++) = INVERT(msg[i]);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4413      	add	r3, r2
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	6079      	str	r1, [r7, #4]
 8008c5e:	43d2      	mvns	r2, r2
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	701a      	strb	r2, [r3, #0]
			break;
 8008c64:	e012      	b.n	8008c8c <uart_escape_encode+0x98>
			default:
				if(++encodelen > buflen){
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d202      	bcs.n	8008c7a <uart_escape_encode+0x86>
					return -1;
 8008c74:	f04f 33ff 	mov.w	r3, #4294967295
 8008c78:	e01f      	b.n	8008cba <uart_escape_encode+0xc6>
				}
				(*buf++) = msg[i];
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	441a      	add	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	1c59      	adds	r1, r3, #1
 8008c84:	6079      	str	r1, [r7, #4]
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	701a      	strb	r2, [r3, #0]
			break;
 8008c8a:	bf00      	nop
	for(int i=0; i<msglen; i++){
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d8c4      	bhi.n	8008c24 <uart_escape_encode+0x30>
			
		}
	}
	encodelen += 1;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
	if(encodelen > buflen){
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d202      	bcs.n	8008cae <uart_escape_encode+0xba>
		return -1;
 8008ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cac:	e005      	b.n	8008cba <uart_escape_encode+0xc6>
	}
	*(buf++) = UART_ESCAPE_EOT;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	2244      	movs	r2, #68	; 0x44
 8008cb6:	701a      	strb	r2, [r3, #0]
	
	return encodelen;
 8008cb8:	697b      	ldr	r3, [r7, #20]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008cc8:	480d      	ldr	r0, [pc, #52]	; (8008d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008cca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ccc:	480d      	ldr	r0, [pc, #52]	; (8008d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8008cce:	490e      	ldr	r1, [pc, #56]	; (8008d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008cd0:	4a0e      	ldr	r2, [pc, #56]	; (8008d0c <LoopForever+0xe>)
  movs r3, #0
 8008cd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008cd4:	e002      	b.n	8008cdc <LoopCopyDataInit>

08008cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cda:	3304      	adds	r3, #4

08008cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ce0:	d3f9      	bcc.n	8008cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ce2:	4a0b      	ldr	r2, [pc, #44]	; (8008d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ce4:	4c0b      	ldr	r4, [pc, #44]	; (8008d14 <LoopForever+0x16>)
  movs r3, #0
 8008ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ce8:	e001      	b.n	8008cee <LoopFillZerobss>

08008cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cec:	3204      	adds	r2, #4

08008cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008cf0:	d3fb      	bcc.n	8008cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008cf2:	f7ff ff6d 	bl	8008bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cf6:	f006 fdcb 	bl	800f890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008cfa:	f7fe fe73 	bl	80079e4 <main>

08008cfe <LoopForever>:

LoopForever:
    b LoopForever
 8008cfe:	e7fe      	b.n	8008cfe <LoopForever>
  ldr   r0, =_estack
 8008d00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8008d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8008d0c:	08013900 	.word	0x08013900
  ldr r2, =_sbss
 8008d10:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8008d14:	20001440 	.word	0x20001440

08008d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d18:	e7fe      	b.n	8008d18 <ADC1_2_IRQHandler>

08008d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d24:	2003      	movs	r0, #3
 8008d26:	f000 f95b 	bl	8008fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008d2a:	200f      	movs	r0, #15
 8008d2c:	f000 f80e 	bl	8008d4c <HAL_InitTick>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	71fb      	strb	r3, [r7, #7]
 8008d3a:	e001      	b.n	8008d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008d3c:	f7ff fbc8 	bl	80084d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008d40:	79fb      	ldrb	r3, [r7, #7]

}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008d58:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <HAL_InitTick+0x68>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d022      	beq.n	8008da6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008d60:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <HAL_InitTick+0x6c>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <HAL_InitTick+0x68>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f966 	bl	8009046 <HAL_SYSTICK_Config>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10f      	bne.n	8008da0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b0f      	cmp	r3, #15
 8008d84:	d809      	bhi.n	8008d9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d86:	2200      	movs	r2, #0
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8e:	f000 f932 	bl	8008ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <HAL_InitTick+0x70>)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e007      	b.n	8008daa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
 8008d9e:	e004      	b.n	8008daa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
 8008da4:	e001      	b.n	8008daa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000008 	.word	0x20000008
 8008db8:	20000000 	.word	0x20000000
 8008dbc:	20000004 	.word	0x20000004

08008dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <HAL_IncTick+0x1c>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <HAL_IncTick+0x20>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4413      	add	r3, r2
 8008dce:	4a03      	ldr	r2, [pc, #12]	; (8008ddc <HAL_IncTick+0x1c>)
 8008dd0:	6013      	str	r3, [r2, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	200012f0 	.word	0x200012f0
 8008de0:	20000008 	.word	0x20000008

08008de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
  return uwTick;
 8008de8:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <HAL_GetTick+0x14>)
 8008dea:	681b      	ldr	r3, [r3, #0]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	200012f0 	.word	0x200012f0

08008dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e04:	f7ff ffee 	bl	8008de4 <HAL_GetTick>
 8008e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d004      	beq.n	8008e20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_Delay+0x40>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e20:	bf00      	nop
 8008e22:	f7ff ffdf 	bl	8008de4 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d8f7      	bhi.n	8008e22 <HAL_Delay+0x26>
  {
  }
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000008 	.word	0x20000008

08008e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <__NVIC_SetPriorityGrouping+0x44>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e72:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <__NVIC_SetPriorityGrouping+0x44>)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	60d3      	str	r3, [r2, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	e000ed00 	.word	0xe000ed00

08008e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	f003 0307 	and.w	r3, r3, #7
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	e000ed00 	.word	0xe000ed00

08008ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	db0b      	blt.n	8008ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 021f 	and.w	r2, r3, #31
 8008ebc:	4907      	ldr	r1, [pc, #28]	; (8008edc <__NVIC_EnableIRQ+0x38>)
 8008ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8008eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	e000e100 	.word	0xe000e100

08008ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	db0a      	blt.n	8008f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	490c      	ldr	r1, [pc, #48]	; (8008f2c <__NVIC_SetPriority+0x4c>)
 8008efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008efe:	0112      	lsls	r2, r2, #4
 8008f00:	b2d2      	uxtb	r2, r2
 8008f02:	440b      	add	r3, r1
 8008f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f08:	e00a      	b.n	8008f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	4908      	ldr	r1, [pc, #32]	; (8008f30 <__NVIC_SetPriority+0x50>)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	3b04      	subs	r3, #4
 8008f18:	0112      	lsls	r2, r2, #4
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	761a      	strb	r2, [r3, #24]
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	e000e100 	.word	0xe000e100
 8008f30:	e000ed00 	.word	0xe000ed00

08008f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f1c3 0307 	rsb	r3, r3, #7
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	bf28      	it	cs
 8008f52:	2304      	movcs	r3, #4
 8008f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	2b06      	cmp	r3, #6
 8008f5c:	d902      	bls.n	8008f64 <NVIC_EncodePriority+0x30>
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	3b03      	subs	r3, #3
 8008f62:	e000      	b.n	8008f66 <NVIC_EncodePriority+0x32>
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f68:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f72:	43da      	mvns	r2, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	401a      	ands	r2, r3
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	fa01 f303 	lsl.w	r3, r1, r3
 8008f86:	43d9      	mvns	r1, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f8c:	4313      	orrs	r3, r2
         );
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3724      	adds	r7, #36	; 0x24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fac:	d301      	bcc.n	8008fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e00f      	b.n	8008fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008fb2:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <SysTick_Config+0x40>)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008fba:	210f      	movs	r1, #15
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	f7ff ff8e 	bl	8008ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <SysTick_Config+0x40>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008fca:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <SysTick_Config+0x40>)
 8008fcc:	2207      	movs	r2, #7
 8008fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	e000e010 	.word	0xe000e010

08008fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff29 	bl	8008e40 <__NVIC_SetPriorityGrouping>
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	607a      	str	r2, [r7, #4]
 8009002:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009004:	f7ff ff40 	bl	8008e88 <__NVIC_GetPriorityGrouping>
 8009008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	6978      	ldr	r0, [r7, #20]
 8009010:	f7ff ff90 	bl	8008f34 <NVIC_EncodePriority>
 8009014:	4602      	mov	r2, r0
 8009016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff ff5f 	bl	8008ee0 <__NVIC_SetPriority>
}
 8009022:	bf00      	nop
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	4603      	mov	r3, r0
 8009032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff ff33 	bl	8008ea4 <__NVIC_EnableIRQ>
}
 800903e:	bf00      	nop
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff ffa4 	bl	8008f9c <SysTick_Config>
 8009054:	4603      	mov	r3, r0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e054      	b.n	800911c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7f5b      	ldrb	r3, [r3, #29]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d105      	bne.n	8009088 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fa48 	bl	8008518 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	791b      	ldrb	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10c      	bne.n	80090b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a22      	ldr	r2, [pc, #136]	; (8009124 <HAL_CRC_Init+0xc4>)
 800909c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0218 	bic.w	r2, r2, #24
 80090ac:	609a      	str	r2, [r3, #8]
 80090ae:	e00c      	b.n	80090ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6899      	ldr	r1, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f948 	bl	8009350 <HAL_CRCEx_Polynomial_Set>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e028      	b.n	800911c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	795b      	ldrb	r3, [r3, #5]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f04f 32ff 	mov.w	r2, #4294967295
 80090da:	611a      	str	r2, [r3, #16]
 80090dc:	e004      	b.n	80090e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6912      	ldr	r2, [r2, #16]
 80090e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695a      	ldr	r2, [r3, #20]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699a      	ldr	r2, [r3, #24]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	04c11db7 	.word	0x04c11db7

08009128 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009134:	2300      	movs	r3, #0
 8009136:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2202      	movs	r2, #2
 800913c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0201 	orr.w	r2, r2, #1
 800914c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d006      	beq.n	8009164 <HAL_CRC_Calculate+0x3c>
 8009156:	2b03      	cmp	r3, #3
 8009158:	d829      	bhi.n	80091ae <HAL_CRC_Calculate+0x86>
 800915a:	2b01      	cmp	r3, #1
 800915c:	d019      	beq.n	8009192 <HAL_CRC_Calculate+0x6a>
 800915e:	2b02      	cmp	r3, #2
 8009160:	d01e      	beq.n	80091a0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8009162:	e024      	b.n	80091ae <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e00a      	b.n	8009180 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	441a      	add	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	3301      	adds	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	429a      	cmp	r2, r3
 8009186:	d3f0      	bcc.n	800916a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	613b      	str	r3, [r7, #16]
      break;
 8009190:	e00e      	b.n	80091b0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f812 	bl	80091c0 <CRC_Handle_8>
 800919c:	6138      	str	r0, [r7, #16]
      break;
 800919e:	e007      	b.n	80091b0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f899 	bl	80092dc <CRC_Handle_16>
 80091aa:	6138      	str	r0, [r7, #16]
      break;
 80091ac:	e000      	b.n	80091b0 <HAL_CRC_Calculate+0x88>
      break;
 80091ae:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80091b6:	693b      	ldr	r3, [r7, #16]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b089      	sub	sp, #36	; 0x24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e023      	b.n	800921a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	3301      	adds	r3, #1
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	440b      	add	r3, r1
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80091ec:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	3302      	adds	r3, #2
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	440b      	add	r3, r1
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80091fc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	3303      	adds	r3, #3
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	440b      	add	r3, r1
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009210:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	3301      	adds	r3, #1
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	089b      	lsrs	r3, r3, #2
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	429a      	cmp	r2, r3
 8009222:	d3d6      	bcc.n	80091d2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d04d      	beq.n	80092ca <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	2b01      	cmp	r3, #1
 8009236:	d107      	bne.n	8009248 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	4413      	add	r3, r2
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d116      	bne.n	8009280 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	b21a      	sxth	r2, r3
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	3301      	adds	r3, #1
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	440b      	add	r3, r1
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b21b      	sxth	r3, r3
 800926e:	4313      	orrs	r3, r2
 8009270:	b21b      	sxth	r3, r3
 8009272:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	8b7a      	ldrh	r2, [r7, #26]
 800927e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d11f      	bne.n	80092ca <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	4413      	add	r3, r2
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	b21a      	sxth	r2, r3
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	3301      	adds	r3, #1
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	440b      	add	r3, r1
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	b21b      	sxth	r3, r3
 80092a6:	4313      	orrs	r3, r2
 80092a8:	b21b      	sxth	r3, r3
 80092aa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	8b7a      	ldrh	r2, [r7, #26]
 80092b6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	3302      	adds	r3, #2
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	4413      	add	r3, r2
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3724      	adds	r7, #36	; 0x24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e013      	b.n	8009316 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	4413      	add	r3, r2
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	041a      	lsls	r2, r3, #16
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	3302      	adds	r3, #2
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	440b      	add	r3, r1
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	4619      	mov	r1, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	3301      	adds	r3, #1
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	085b      	lsrs	r3, r3, #1
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3e6      	bcc.n	80092ee <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	4413      	add	r3, r2
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
}
 8009344:	4618      	mov	r0, r3
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009360:	231f      	movs	r3, #31
 8009362:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009364:	bf00      	nop
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1e5a      	subs	r2, r3, #1
 800936a:	613a      	str	r2, [r7, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <HAL_CRCEx_Polynomial_Set+0x34>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f003 031f 	and.w	r3, r3, #31
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	fa22 f303 	lsr.w	r3, r2, r3
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0f0      	beq.n	8009366 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b18      	cmp	r3, #24
 8009388:	d846      	bhi.n	8009418 <HAL_CRCEx_Polynomial_Set+0xc8>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <HAL_CRCEx_Polynomial_Set+0x40>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	0800941f 	.word	0x0800941f
 8009394:	08009419 	.word	0x08009419
 8009398:	08009419 	.word	0x08009419
 800939c:	08009419 	.word	0x08009419
 80093a0:	08009419 	.word	0x08009419
 80093a4:	08009419 	.word	0x08009419
 80093a8:	08009419 	.word	0x08009419
 80093ac:	08009419 	.word	0x08009419
 80093b0:	0800940d 	.word	0x0800940d
 80093b4:	08009419 	.word	0x08009419
 80093b8:	08009419 	.word	0x08009419
 80093bc:	08009419 	.word	0x08009419
 80093c0:	08009419 	.word	0x08009419
 80093c4:	08009419 	.word	0x08009419
 80093c8:	08009419 	.word	0x08009419
 80093cc:	08009419 	.word	0x08009419
 80093d0:	08009401 	.word	0x08009401
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009419 	.word	0x08009419
 80093e0:	08009419 	.word	0x08009419
 80093e4:	08009419 	.word	0x08009419
 80093e8:	08009419 	.word	0x08009419
 80093ec:	08009419 	.word	0x08009419
 80093f0:	080093f5 	.word	0x080093f5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b06      	cmp	r3, #6
 80093f8:	d913      	bls.n	8009422 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80093fe:	e010      	b.n	8009422 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2b07      	cmp	r3, #7
 8009404:	d90f      	bls.n	8009426 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800940a:	e00c      	b.n	8009426 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2b0f      	cmp	r3, #15
 8009410:	d90b      	bls.n	800942a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009416:	e008      	b.n	800942a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
      break;
 800941c:	e006      	b.n	800942c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800941e:	bf00      	nop
 8009420:	e004      	b.n	800942c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009422:	bf00      	nop
 8009424:	e002      	b.n	800942c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009426:	bf00      	nop
 8009428:	e000      	b.n	800942c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800942a:	bf00      	nop
  }
  if (status == HAL_OK)
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10d      	bne.n	800944e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f023 0118 	bic.w	r1, r3, #24
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	430a      	orrs	r2, r1
 800944c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009450:	4618      	mov	r0, r3
 8009452:	371c      	adds	r7, #28
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e08d      	b.n	800958a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	4b47      	ldr	r3, [pc, #284]	; (8009594 <HAL_DMA_Init+0x138>)
 8009476:	429a      	cmp	r2, r3
 8009478:	d80f      	bhi.n	800949a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	4b45      	ldr	r3, [pc, #276]	; (8009598 <HAL_DMA_Init+0x13c>)
 8009482:	4413      	add	r3, r2
 8009484:	4a45      	ldr	r2, [pc, #276]	; (800959c <HAL_DMA_Init+0x140>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	091b      	lsrs	r3, r3, #4
 800948c:	009a      	lsls	r2, r3, #2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a42      	ldr	r2, [pc, #264]	; (80095a0 <HAL_DMA_Init+0x144>)
 8009496:	641a      	str	r2, [r3, #64]	; 0x40
 8009498:	e00e      	b.n	80094b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <HAL_DMA_Init+0x148>)
 80094a2:	4413      	add	r3, r2
 80094a4:	4a3d      	ldr	r2, [pc, #244]	; (800959c <HAL_DMA_Init+0x140>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	091b      	lsrs	r3, r3, #4
 80094ac:	009a      	lsls	r2, r3, #2
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a3c      	ldr	r2, [pc, #240]	; (80095a8 <HAL_DMA_Init+0x14c>)
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80094dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa82 	bl	8009a14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009518:	d102      	bne.n	8009520 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009528:	b2d2      	uxtb	r2, r2
 800952a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009534:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d010      	beq.n	8009560 <HAL_DMA_Init+0x104>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	2b04      	cmp	r3, #4
 8009544:	d80c      	bhi.n	8009560 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 faa2 	bl	8009a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800955c:	605a      	str	r2, [r3, #4]
 800955e:	e008      	b.n	8009572 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	40020407 	.word	0x40020407
 8009598:	bffdfff8 	.word	0xbffdfff8
 800959c:	cccccccd 	.word	0xcccccccd
 80095a0:	40020000 	.word	0x40020000
 80095a4:	bffdfbf8 	.word	0xbffdfbf8
 80095a8:	40020400 	.word	0x40020400

080095ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_DMA_Start_IT+0x20>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e066      	b.n	800969a <HAL_DMA_Start_IT+0xee>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d155      	bne.n	800968c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 f9c7 	bl	8009998 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960e:	2b00      	cmp	r3, #0
 8009610:	d008      	beq.n	8009624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 020e 	orr.w	r2, r2, #14
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e00f      	b.n	8009644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0204 	bic.w	r2, r2, #4
 8009632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 020a 	orr.w	r2, r2, #10
 8009642:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d007      	beq.n	8009662 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009660:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009678:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f042 0201 	orr.w	r2, r2, #1
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e005      	b.n	8009698 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009694:	2302      	movs	r3, #2
 8009696:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d005      	beq.n	80096c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2204      	movs	r2, #4
 80096be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	73fb      	strb	r3, [r7, #15]
 80096c4:	e037      	b.n	8009736 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 020e 	bic.w	r2, r2, #14
 80096d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0201 	bic.w	r2, r2, #1
 80096f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fa:	f003 021f 	and.w	r2, r3, #31
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	2101      	movs	r1, #1
 8009704:	fa01 f202 	lsl.w	r2, r1, r2
 8009708:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009712:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00c      	beq.n	8009736 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800972a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009734:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b02      	cmp	r3, #2
 800976a:	d00d      	beq.n	8009788 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2204      	movs	r2, #4
 8009770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	73fb      	strb	r3, [r7, #15]
 8009786:	e047      	b.n	8009818 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 020e 	bic.w	r2, r2, #14
 8009796:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0201 	bic.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097bc:	f003 021f 	and.w	r2, r3, #31
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	2101      	movs	r1, #1
 80097c6:	fa01 f202 	lsl.w	r2, r1, r2
 80097ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00c      	beq.n	80097f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	4798      	blx	r3
    }
  }
  return status;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983e:	f003 031f 	and.w	r3, r3, #31
 8009842:	2204      	movs	r2, #4
 8009844:	409a      	lsls	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4013      	ands	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d026      	beq.n	800989c <HAL_DMA_IRQHandler+0x7a>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d021      	beq.n	800989c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d107      	bne.n	8009876 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0204 	bic.w	r2, r2, #4
 8009874:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987a:	f003 021f 	and.w	r2, r3, #31
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	2104      	movs	r1, #4
 8009884:	fa01 f202 	lsl.w	r2, r1, r2
 8009888:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	2b00      	cmp	r3, #0
 8009890:	d071      	beq.n	8009976 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800989a:	e06c      	b.n	8009976 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	f003 031f 	and.w	r3, r3, #31
 80098a4:	2202      	movs	r2, #2
 80098a6:	409a      	lsls	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d02e      	beq.n	800990e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d029      	beq.n	800990e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 020a 	bic.w	r2, r2, #10
 80098d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e4:	f003 021f 	and.w	r2, r3, #31
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	2102      	movs	r1, #2
 80098ee:	fa01 f202 	lsl.w	r2, r1, r2
 80098f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d038      	beq.n	8009976 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800990c:	e033      	b.n	8009976 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	f003 031f 	and.w	r3, r3, #31
 8009916:	2208      	movs	r2, #8
 8009918:	409a      	lsls	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4013      	ands	r3, r2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d02a      	beq.n	8009978 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f003 0308 	and.w	r3, r3, #8
 8009928:	2b00      	cmp	r3, #0
 800992a:	d025      	beq.n	8009978 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 020e 	bic.w	r2, r2, #14
 800993a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009940:	f003 021f 	and.w	r2, r3, #31
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009948:	2101      	movs	r1, #1
 800994a:	fa01 f202 	lsl.w	r2, r1, r2
 800994e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009976:	bf00      	nop
 8009978:	bf00      	nop
}
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80099ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80099c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c6:	f003 021f 	and.w	r2, r3, #31
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	2101      	movs	r1, #1
 80099d0:	fa01 f202 	lsl.w	r2, r1, r2
 80099d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	2b10      	cmp	r3, #16
 80099e4:	d108      	bne.n	80099f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80099f6:	e007      	b.n	8009a08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	60da      	str	r2, [r3, #12]
}
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	4b16      	ldr	r3, [pc, #88]	; (8009a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d802      	bhi.n	8009a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	e001      	b.n	8009a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009a30:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	3b08      	subs	r3, #8
 8009a3e:	4a12      	ldr	r2, [pc, #72]	; (8009a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009a40:	fba2 2303 	umull	r2, r3, r2, r3
 8009a44:	091b      	lsrs	r3, r3, #4
 8009a46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4c:	089b      	lsrs	r3, r3, #2
 8009a4e:	009a      	lsls	r2, r3, #2
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4413      	add	r3, r2
 8009a54:	461a      	mov	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a0b      	ldr	r2, [pc, #44]	; (8009a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009a5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	2201      	movs	r2, #1
 8009a68:	409a      	lsls	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40020407 	.word	0x40020407
 8009a80:	40020800 	.word	0x40020800
 8009a84:	40020820 	.word	0x40020820
 8009a88:	cccccccd 	.word	0xcccccccd
 8009a8c:	40020880 	.word	0x40020880

08009a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a08      	ldr	r2, [pc, #32]	; (8009ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009ab2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	f003 031f 	and.w	r3, r3, #31
 8009abc:	2201      	movs	r2, #1
 8009abe:	409a      	lsls	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009ac4:	bf00      	nop
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	1000823f 	.word	0x1000823f
 8009ad4:	40020940 	.word	0x40020940

08009ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009ae6:	e15a      	b.n	8009d9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	2101      	movs	r1, #1
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	fa01 f303 	lsl.w	r3, r1, r3
 8009af4:	4013      	ands	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 814c 	beq.w	8009d98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f003 0303 	and.w	r3, r3, #3
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d005      	beq.n	8009b18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d130      	bne.n	8009b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	2203      	movs	r2, #3
 8009b24:	fa02 f303 	lsl.w	r3, r2, r3
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b4e:	2201      	movs	r2, #1
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	fa02 f303 	lsl.w	r3, r2, r3
 8009b56:	43db      	mvns	r3, r3
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	091b      	lsrs	r3, r3, #4
 8009b64:	f003 0201 	and.w	r2, r3, #1
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d017      	beq.n	8009bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	2203      	movs	r2, #3
 8009b92:	fa02 f303 	lsl.w	r3, r2, r3
 8009b96:	43db      	mvns	r3, r3
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	689a      	ldr	r2, [r3, #8]
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d123      	bne.n	8009c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	08da      	lsrs	r2, r3, #3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3208      	adds	r2, #8
 8009bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	220f      	movs	r2, #15
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	43db      	mvns	r3, r3
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4013      	ands	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	691a      	ldr	r2, [r3, #16]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	08da      	lsrs	r2, r3, #3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3208      	adds	r2, #8
 8009c04:	6939      	ldr	r1, [r7, #16]
 8009c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	2203      	movs	r2, #3
 8009c16:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1a:	43db      	mvns	r3, r3
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	4013      	ands	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f003 0203 	and.w	r2, r3, #3
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80a6 	beq.w	8009d98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c4c:	4b5b      	ldr	r3, [pc, #364]	; (8009dbc <HAL_GPIO_Init+0x2e4>)
 8009c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c50:	4a5a      	ldr	r2, [pc, #360]	; (8009dbc <HAL_GPIO_Init+0x2e4>)
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	6613      	str	r3, [r2, #96]	; 0x60
 8009c58:	4b58      	ldr	r3, [pc, #352]	; (8009dbc <HAL_GPIO_Init+0x2e4>)
 8009c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c64:	4a56      	ldr	r2, [pc, #344]	; (8009dc0 <HAL_GPIO_Init+0x2e8>)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	089b      	lsrs	r3, r3, #2
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	220f      	movs	r2, #15
 8009c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c80:	43db      	mvns	r3, r3
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	4013      	ands	r3, r2
 8009c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009c8e:	d01f      	beq.n	8009cd0 <HAL_GPIO_Init+0x1f8>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a4c      	ldr	r2, [pc, #304]	; (8009dc4 <HAL_GPIO_Init+0x2ec>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d019      	beq.n	8009ccc <HAL_GPIO_Init+0x1f4>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a4b      	ldr	r2, [pc, #300]	; (8009dc8 <HAL_GPIO_Init+0x2f0>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d013      	beq.n	8009cc8 <HAL_GPIO_Init+0x1f0>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a4a      	ldr	r2, [pc, #296]	; (8009dcc <HAL_GPIO_Init+0x2f4>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00d      	beq.n	8009cc4 <HAL_GPIO_Init+0x1ec>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a49      	ldr	r2, [pc, #292]	; (8009dd0 <HAL_GPIO_Init+0x2f8>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d007      	beq.n	8009cc0 <HAL_GPIO_Init+0x1e8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a48      	ldr	r2, [pc, #288]	; (8009dd4 <HAL_GPIO_Init+0x2fc>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d101      	bne.n	8009cbc <HAL_GPIO_Init+0x1e4>
 8009cb8:	2305      	movs	r3, #5
 8009cba:	e00a      	b.n	8009cd2 <HAL_GPIO_Init+0x1fa>
 8009cbc:	2306      	movs	r3, #6
 8009cbe:	e008      	b.n	8009cd2 <HAL_GPIO_Init+0x1fa>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	e006      	b.n	8009cd2 <HAL_GPIO_Init+0x1fa>
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e004      	b.n	8009cd2 <HAL_GPIO_Init+0x1fa>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e002      	b.n	8009cd2 <HAL_GPIO_Init+0x1fa>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e000      	b.n	8009cd2 <HAL_GPIO_Init+0x1fa>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	f002 0203 	and.w	r2, r2, #3
 8009cd8:	0092      	lsls	r2, r2, #2
 8009cda:	4093      	lsls	r3, r2
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ce2:	4937      	ldr	r1, [pc, #220]	; (8009dc0 <HAL_GPIO_Init+0x2e8>)
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	089b      	lsrs	r3, r3, #2
 8009ce8:	3302      	adds	r3, #2
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009cf0:	4b39      	ldr	r3, [pc, #228]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009d14:	4a30      	ldr	r2, [pc, #192]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009d1a:	4b2f      	ldr	r3, [pc, #188]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	43db      	mvns	r3, r3
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4013      	ands	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009d3e:	4a26      	ldr	r2, [pc, #152]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009d44:	4b24      	ldr	r3, [pc, #144]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	43db      	mvns	r3, r3
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4013      	ands	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009d68:	4a1b      	ldr	r2, [pc, #108]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	43db      	mvns	r3, r3
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d92:	4a11      	ldr	r2, [pc, #68]	; (8009dd8 <HAL_GPIO_Init+0x300>)
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	fa22 f303 	lsr.w	r3, r2, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f47f ae9d 	bne.w	8009ae8 <HAL_GPIO_Init+0x10>
  }
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	40021000 	.word	0x40021000
 8009dc0:	40010000 	.word	0x40010000
 8009dc4:	48000400 	.word	0x48000400
 8009dc8:	48000800 	.word	0x48000800
 8009dcc:	48000c00 	.word	0x48000c00
 8009dd0:	48001000 	.word	0x48001000
 8009dd4:	48001400 	.word	0x48001400
 8009dd8:	40010400 	.word	0x40010400

08009ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	807b      	strh	r3, [r7, #2]
 8009de8:	4613      	mov	r3, r2
 8009dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009dec:	787b      	ldrb	r3, [r7, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009df2:	887a      	ldrh	r2, [r7, #2]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009df8:	e002      	b.n	8009e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009dfa:	887a      	ldrh	r2, [r7, #2]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d141      	bne.n	8009e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e1a:	4b4b      	ldr	r3, [pc, #300]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e26:	d131      	bne.n	8009e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e28:	4b47      	ldr	r3, [pc, #284]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e2e:	4a46      	ldr	r2, [pc, #280]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e38:	4b43      	ldr	r3, [pc, #268]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009e40:	4a41      	ldr	r2, [pc, #260]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009e48:	4b40      	ldr	r3, [pc, #256]	; (8009f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2232      	movs	r2, #50	; 0x32
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	4a3f      	ldr	r2, [pc, #252]	; (8009f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e54:	fba2 2303 	umull	r2, r3, r2, r3
 8009e58:	0c9b      	lsrs	r3, r3, #18
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e5e:	e002      	b.n	8009e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e66:	4b38      	ldr	r3, [pc, #224]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e72:	d102      	bne.n	8009e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1f2      	bne.n	8009e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e7a:	4b33      	ldr	r3, [pc, #204]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e86:	d158      	bne.n	8009f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e057      	b.n	8009f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e8c:	4b2e      	ldr	r3, [pc, #184]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e92:	4a2d      	ldr	r2, [pc, #180]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009e9c:	e04d      	b.n	8009f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea4:	d141      	bne.n	8009f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ea6:	4b28      	ldr	r3, [pc, #160]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb2:	d131      	bne.n	8009f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009eb4:	4b24      	ldr	r3, [pc, #144]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eba:	4a23      	ldr	r2, [pc, #140]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ec4:	4b20      	ldr	r3, [pc, #128]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ecc:	4a1e      	ldr	r2, [pc, #120]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009ed4:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2232      	movs	r2, #50	; 0x32
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	4a1c      	ldr	r2, [pc, #112]	; (8009f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee4:	0c9b      	lsrs	r3, r3, #18
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009eea:	e002      	b.n	8009ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009ef2:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009efe:	d102      	bne.n	8009f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1f2      	bne.n	8009eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f06:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f12:	d112      	bne.n	8009f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e011      	b.n	8009f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f18:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f1e:	4a0a      	ldr	r2, [pc, #40]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009f28:	e007      	b.n	8009f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009f2a:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f32:	4a05      	ldr	r2, [pc, #20]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	40007000 	.word	0x40007000
 8009f4c:	20000000 	.word	0x20000000
 8009f50:	431bde83 	.word	0x431bde83

08009f54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f62:	6093      	str	r3, [r2, #8]
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	40007000 	.word	0x40007000

08009f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e306      	b.n	800a594 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d075      	beq.n	800a07e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f92:	4b97      	ldr	r3, [pc, #604]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f003 030c 	and.w	r3, r3, #12
 8009f9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f9c:	4b94      	ldr	r3, [pc, #592]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	2b0c      	cmp	r3, #12
 8009faa:	d102      	bne.n	8009fb2 <HAL_RCC_OscConfig+0x3e>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d002      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x44>
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d10b      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb8:	4b8d      	ldr	r3, [pc, #564]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d05b      	beq.n	800a07c <HAL_RCC_OscConfig+0x108>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d157      	bne.n	800a07c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e2e1      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd8:	d106      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x74>
 8009fda:	4b85      	ldr	r3, [pc, #532]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a84      	ldr	r2, [pc, #528]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	e01d      	b.n	800a024 <HAL_RCC_OscConfig+0xb0>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ff0:	d10c      	bne.n	800a00c <HAL_RCC_OscConfig+0x98>
 8009ff2:	4b7f      	ldr	r3, [pc, #508]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a7e      	ldr	r2, [pc, #504]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 8009ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	4b7c      	ldr	r3, [pc, #496]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a7b      	ldr	r2, [pc, #492]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	e00b      	b.n	800a024 <HAL_RCC_OscConfig+0xb0>
 800a00c:	4b78      	ldr	r3, [pc, #480]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a77      	ldr	r2, [pc, #476]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	4b75      	ldr	r3, [pc, #468]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a74      	ldr	r2, [pc, #464]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a01e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d013      	beq.n	800a054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a02c:	f7fe feda 	bl	8008de4 <HAL_GetTick>
 800a030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a032:	e008      	b.n	800a046 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a034:	f7fe fed6 	bl	8008de4 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b64      	cmp	r3, #100	; 0x64
 800a040:	d901      	bls.n	800a046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e2a6      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a046:	4b6a      	ldr	r3, [pc, #424]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f0      	beq.n	800a034 <HAL_RCC_OscConfig+0xc0>
 800a052:	e014      	b.n	800a07e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a054:	f7fe fec6 	bl	8008de4 <HAL_GetTick>
 800a058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a05a:	e008      	b.n	800a06e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a05c:	f7fe fec2 	bl	8008de4 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b64      	cmp	r3, #100	; 0x64
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e292      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a06e:	4b60      	ldr	r3, [pc, #384]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f0      	bne.n	800a05c <HAL_RCC_OscConfig+0xe8>
 800a07a:	e000      	b.n	800a07e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a07c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d075      	beq.n	800a176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a08a:	4b59      	ldr	r3, [pc, #356]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 030c 	and.w	r3, r3, #12
 800a092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a094:	4b56      	ldr	r3, [pc, #344]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b0c      	cmp	r3, #12
 800a0a2:	d102      	bne.n	800a0aa <HAL_RCC_OscConfig+0x136>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d002      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x13c>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d11f      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0b0:	4b4f      	ldr	r3, [pc, #316]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x154>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e265      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0c8:	4b49      	ldr	r3, [pc, #292]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	061b      	lsls	r3, r3, #24
 800a0d6:	4946      	ldr	r1, [pc, #280]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a0dc:	4b45      	ldr	r3, [pc, #276]	; (800a1f4 <HAL_RCC_OscConfig+0x280>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fe33 	bl	8008d4c <HAL_InitTick>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d043      	beq.n	800a174 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e251      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d023      	beq.n	800a140 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0f8:	4b3d      	ldr	r3, [pc, #244]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a3c      	ldr	r2, [pc, #240]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a0fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a104:	f7fe fe6e 	bl	8008de4 <HAL_GetTick>
 800a108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a10a:	e008      	b.n	800a11e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a10c:	f7fe fe6a 	bl	8008de4 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e23a      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a11e:	4b34      	ldr	r3, [pc, #208]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0f0      	beq.n	800a10c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a12a:	4b31      	ldr	r3, [pc, #196]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	061b      	lsls	r3, r3, #24
 800a138:	492d      	ldr	r1, [pc, #180]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	604b      	str	r3, [r1, #4]
 800a13e:	e01a      	b.n	800a176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a140:	4b2b      	ldr	r3, [pc, #172]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a2a      	ldr	r2, [pc, #168]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a14a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14c:	f7fe fe4a 	bl	8008de4 <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a154:	f7fe fe46 	bl	8008de4 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e216      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a166:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1f0      	bne.n	800a154 <HAL_RCC_OscConfig+0x1e0>
 800a172:	e000      	b.n	800a176 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a174:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d041      	beq.n	800a206 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01c      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a18a:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a18c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a190:	4a17      	ldr	r2, [pc, #92]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a192:	f043 0301 	orr.w	r3, r3, #1
 800a196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a19a:	f7fe fe23 	bl	8008de4 <HAL_GetTick>
 800a19e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a1a0:	e008      	b.n	800a1b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1a2:	f7fe fe1f 	bl	8008de4 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d901      	bls.n	800a1b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e1ef      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a1b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0ef      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x22e>
 800a1c2:	e020      	b.n	800a206 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1c4:	4b0a      	ldr	r3, [pc, #40]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a1c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ca:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <HAL_RCC_OscConfig+0x27c>)
 800a1cc:	f023 0301 	bic.w	r3, r3, #1
 800a1d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1d4:	f7fe fe06 	bl	8008de4 <HAL_GetTick>
 800a1d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a1da:	e00d      	b.n	800a1f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1dc:	f7fe fe02 	bl	8008de4 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d906      	bls.n	800a1f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e1d2      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
 800a1ee:	bf00      	nop
 800a1f0:	40021000 	.word	0x40021000
 800a1f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a1f8:	4b8c      	ldr	r3, [pc, #560]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a1fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1fe:	f003 0302 	and.w	r3, r3, #2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1ea      	bne.n	800a1dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0304 	and.w	r3, r3, #4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 80a6 	beq.w	800a360 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a214:	2300      	movs	r3, #0
 800a216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a218:	4b84      	ldr	r3, [pc, #528]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_RCC_OscConfig+0x2b4>
 800a224:	2301      	movs	r3, #1
 800a226:	e000      	b.n	800a22a <HAL_RCC_OscConfig+0x2b6>
 800a228:	2300      	movs	r3, #0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00d      	beq.n	800a24a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a22e:	4b7f      	ldr	r3, [pc, #508]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a232:	4a7e      	ldr	r2, [pc, #504]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a238:	6593      	str	r3, [r2, #88]	; 0x58
 800a23a:	4b7c      	ldr	r3, [pc, #496]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a246:	2301      	movs	r3, #1
 800a248:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a24a:	4b79      	ldr	r3, [pc, #484]	; (800a430 <HAL_RCC_OscConfig+0x4bc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a252:	2b00      	cmp	r3, #0
 800a254:	d118      	bne.n	800a288 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a256:	4b76      	ldr	r3, [pc, #472]	; (800a430 <HAL_RCC_OscConfig+0x4bc>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a75      	ldr	r2, [pc, #468]	; (800a430 <HAL_RCC_OscConfig+0x4bc>)
 800a25c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a262:	f7fe fdbf 	bl	8008de4 <HAL_GetTick>
 800a266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a268:	e008      	b.n	800a27c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a26a:	f7fe fdbb 	bl	8008de4 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e18b      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a27c:	4b6c      	ldr	r3, [pc, #432]	; (800a430 <HAL_RCC_OscConfig+0x4bc>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f0      	beq.n	800a26a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d108      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x32e>
 800a290:	4b66      	ldr	r3, [pc, #408]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a296:	4a65      	ldr	r2, [pc, #404]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a298:	f043 0301 	orr.w	r3, r3, #1
 800a29c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a2a0:	e024      	b.n	800a2ec <HAL_RCC_OscConfig+0x378>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d110      	bne.n	800a2cc <HAL_RCC_OscConfig+0x358>
 800a2aa:	4b60      	ldr	r3, [pc, #384]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b0:	4a5e      	ldr	r2, [pc, #376]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2b2:	f043 0304 	orr.w	r3, r3, #4
 800a2b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a2ba:	4b5c      	ldr	r3, [pc, #368]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c0:	4a5a      	ldr	r2, [pc, #360]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a2ca:	e00f      	b.n	800a2ec <HAL_RCC_OscConfig+0x378>
 800a2cc:	4b57      	ldr	r3, [pc, #348]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d2:	4a56      	ldr	r2, [pc, #344]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2d4:	f023 0301 	bic.w	r3, r3, #1
 800a2d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a2dc:	4b53      	ldr	r3, [pc, #332]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e2:	4a52      	ldr	r2, [pc, #328]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a2e4:	f023 0304 	bic.w	r3, r3, #4
 800a2e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d016      	beq.n	800a322 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f4:	f7fe fd76 	bl	8008de4 <HAL_GetTick>
 800a2f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2fa:	e00a      	b.n	800a312 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2fc:	f7fe fd72 	bl	8008de4 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	f241 3288 	movw	r2, #5000	; 0x1388
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e140      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a312:	4b46      	ldr	r3, [pc, #280]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0ed      	beq.n	800a2fc <HAL_RCC_OscConfig+0x388>
 800a320:	e015      	b.n	800a34e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a322:	f7fe fd5f 	bl	8008de4 <HAL_GetTick>
 800a326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a328:	e00a      	b.n	800a340 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a32a:	f7fe fd5b 	bl	8008de4 <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	f241 3288 	movw	r2, #5000	; 0x1388
 800a338:	4293      	cmp	r3, r2
 800a33a:	d901      	bls.n	800a340 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e129      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a340:	4b3a      	ldr	r3, [pc, #232]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1ed      	bne.n	800a32a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a34e:	7ffb      	ldrb	r3, [r7, #31]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d105      	bne.n	800a360 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a354:	4b35      	ldr	r3, [pc, #212]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a358:	4a34      	ldr	r2, [pc, #208]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a35a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a35e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0320 	and.w	r3, r3, #32
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d03c      	beq.n	800a3e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01c      	beq.n	800a3ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a374:	4b2d      	ldr	r3, [pc, #180]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a37a:	4a2c      	ldr	r2, [pc, #176]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a384:	f7fe fd2e 	bl	8008de4 <HAL_GetTick>
 800a388:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a38a:	e008      	b.n	800a39e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a38c:	f7fe fd2a 	bl	8008de4 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d901      	bls.n	800a39e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e0fa      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a39e:	4b23      	ldr	r3, [pc, #140]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a3a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0ef      	beq.n	800a38c <HAL_RCC_OscConfig+0x418>
 800a3ac:	e01b      	b.n	800a3e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3ae:	4b1f      	ldr	r3, [pc, #124]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a3b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3b4:	4a1d      	ldr	r2, [pc, #116]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3be:	f7fe fd11 	bl	8008de4 <HAL_GetTick>
 800a3c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a3c4:	e008      	b.n	800a3d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3c6:	f7fe fd0d 	bl	8008de4 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e0dd      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a3d8:	4b14      	ldr	r3, [pc, #80]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a3da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1ef      	bne.n	800a3c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 80d1 	beq.w	800a592 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f003 030c 	and.w	r3, r3, #12
 800a3f8:	2b0c      	cmp	r3, #12
 800a3fa:	f000 808b 	beq.w	800a514 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d15e      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a406:	4b09      	ldr	r3, [pc, #36]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a08      	ldr	r2, [pc, #32]	; (800a42c <HAL_RCC_OscConfig+0x4b8>)
 800a40c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a412:	f7fe fce7 	bl	8008de4 <HAL_GetTick>
 800a416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a418:	e00c      	b.n	800a434 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a41a:	f7fe fce3 	bl	8008de4 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d905      	bls.n	800a434 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e0b3      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
 800a42c:	40021000 	.word	0x40021000
 800a430:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a434:	4b59      	ldr	r3, [pc, #356]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1ec      	bne.n	800a41a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a440:	4b56      	ldr	r3, [pc, #344]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	4b56      	ldr	r3, [pc, #344]	; (800a5a0 <HAL_RCC_OscConfig+0x62c>)
 800a446:	4013      	ands	r3, r2
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6a11      	ldr	r1, [r2, #32]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a450:	3a01      	subs	r2, #1
 800a452:	0112      	lsls	r2, r2, #4
 800a454:	4311      	orrs	r1, r2
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a45a:	0212      	lsls	r2, r2, #8
 800a45c:	4311      	orrs	r1, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a462:	0852      	lsrs	r2, r2, #1
 800a464:	3a01      	subs	r2, #1
 800a466:	0552      	lsls	r2, r2, #21
 800a468:	4311      	orrs	r1, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a46e:	0852      	lsrs	r2, r2, #1
 800a470:	3a01      	subs	r2, #1
 800a472:	0652      	lsls	r2, r2, #25
 800a474:	4311      	orrs	r1, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a47a:	06d2      	lsls	r2, r2, #27
 800a47c:	430a      	orrs	r2, r1
 800a47e:	4947      	ldr	r1, [pc, #284]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a480:	4313      	orrs	r3, r2
 800a482:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a484:	4b45      	ldr	r3, [pc, #276]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a44      	ldr	r2, [pc, #272]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a48a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a48e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a490:	4b42      	ldr	r3, [pc, #264]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	4a41      	ldr	r2, [pc, #260]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a49a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a49c:	f7fe fca2 	bl	8008de4 <HAL_GetTick>
 800a4a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4a2:	e008      	b.n	800a4b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a4:	f7fe fc9e 	bl	8008de4 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d901      	bls.n	800a4b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e06e      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4b6:	4b39      	ldr	r3, [pc, #228]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0f0      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x530>
 800a4c2:	e066      	b.n	800a592 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4c4:	4b35      	ldr	r3, [pc, #212]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a34      	ldr	r2, [pc, #208]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a4d0:	4b32      	ldr	r3, [pc, #200]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	4a31      	ldr	r2, [pc, #196]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a4dc:	4b2f      	ldr	r3, [pc, #188]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	4a2e      	ldr	r2, [pc, #184]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a4e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a4e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ec:	f7fe fc7a 	bl	8008de4 <HAL_GetTick>
 800a4f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4f2:	e008      	b.n	800a506 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4f4:	f7fe fc76 	bl	8008de4 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e046      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a506:	4b25      	ldr	r3, [pc, #148]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1f0      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x580>
 800a512:	e03e      	b.n	800a592 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d101      	bne.n	800a520 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e039      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a520:	4b1e      	ldr	r3, [pc, #120]	; (800a59c <HAL_RCC_OscConfig+0x628>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f003 0203 	and.w	r2, r3, #3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	429a      	cmp	r2, r3
 800a532:	d12c      	bne.n	800a58e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	3b01      	subs	r3, #1
 800a540:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a542:	429a      	cmp	r2, r3
 800a544:	d123      	bne.n	800a58e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a552:	429a      	cmp	r2, r3
 800a554:	d11b      	bne.n	800a58e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a562:	429a      	cmp	r2, r3
 800a564:	d113      	bne.n	800a58e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a570:	085b      	lsrs	r3, r3, #1
 800a572:	3b01      	subs	r3, #1
 800a574:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a576:	429a      	cmp	r2, r3
 800a578:	d109      	bne.n	800a58e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a584:	085b      	lsrs	r3, r3, #1
 800a586:	3b01      	subs	r3, #1
 800a588:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d001      	beq.n	800a592 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3720      	adds	r7, #32
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	40021000 	.word	0x40021000
 800a5a0:	019f800c 	.word	0x019f800c

0800a5a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e11e      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5bc:	4b91      	ldr	r3, [pc, #580]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 030f 	and.w	r3, r3, #15
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d910      	bls.n	800a5ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ca:	4b8e      	ldr	r3, [pc, #568]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f023 020f 	bic.w	r2, r3, #15
 800a5d2:	498c      	ldr	r1, [pc, #560]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5da:	4b8a      	ldr	r3, [pc, #552]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d001      	beq.n	800a5ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e106      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d073      	beq.n	800a6e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d129      	bne.n	800a654 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a600:	4b81      	ldr	r3, [pc, #516]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e0f4      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a610:	f000 f99e 	bl	800a950 <RCC_GetSysClockFreqFromPLLSource>
 800a614:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	4a7c      	ldr	r2, [pc, #496]	; (800a80c <HAL_RCC_ClockConfig+0x268>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d93f      	bls.n	800a69e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a61e:	4b7a      	ldr	r3, [pc, #488]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d009      	beq.n	800a63e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a632:	2b00      	cmp	r3, #0
 800a634:	d033      	beq.n	800a69e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d12f      	bne.n	800a69e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a63e:	4b72      	ldr	r3, [pc, #456]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a646:	4a70      	ldr	r2, [pc, #448]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a64e:	2380      	movs	r3, #128	; 0x80
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	e024      	b.n	800a69e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d107      	bne.n	800a66c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a65c:	4b6a      	ldr	r3, [pc, #424]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d109      	bne.n	800a67c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e0c6      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a66c:	4b66      	ldr	r3, [pc, #408]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e0be      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a67c:	f000 f8ce 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800a680:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	4a61      	ldr	r2, [pc, #388]	; (800a80c <HAL_RCC_ClockConfig+0x268>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d909      	bls.n	800a69e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a68a:	4b5f      	ldr	r3, [pc, #380]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a692:	4a5d      	ldr	r2, [pc, #372]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a698:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a69a:	2380      	movs	r3, #128	; 0x80
 800a69c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a69e:	4b5a      	ldr	r3, [pc, #360]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f023 0203 	bic.w	r2, r3, #3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	4957      	ldr	r1, [pc, #348]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6b0:	f7fe fb98 	bl	8008de4 <HAL_GetTick>
 800a6b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6b6:	e00a      	b.n	800a6ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6b8:	f7fe fb94 	bl	8008de4 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d901      	bls.n	800a6ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e095      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ce:	4b4e      	ldr	r3, [pc, #312]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f003 020c 	and.w	r2, r3, #12
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d1eb      	bne.n	800a6b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d023      	beq.n	800a734 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6f8:	4b43      	ldr	r3, [pc, #268]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	4a42      	ldr	r2, [pc, #264]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a6fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a702:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0308 	and.w	r3, r3, #8
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d007      	beq.n	800a720 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a710:	4b3d      	ldr	r3, [pc, #244]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a718:	4a3b      	ldr	r2, [pc, #236]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a71a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a71e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a720:	4b39      	ldr	r3, [pc, #228]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	4936      	ldr	r1, [pc, #216]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	608b      	str	r3, [r1, #8]
 800a732:	e008      	b.n	800a746 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2b80      	cmp	r3, #128	; 0x80
 800a738:	d105      	bne.n	800a746 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a73a:	4b33      	ldr	r3, [pc, #204]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	4a32      	ldr	r2, [pc, #200]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a744:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a746:	4b2f      	ldr	r3, [pc, #188]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 030f 	and.w	r3, r3, #15
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d21d      	bcs.n	800a790 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a754:	4b2b      	ldr	r3, [pc, #172]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f023 020f 	bic.w	r2, r3, #15
 800a75c:	4929      	ldr	r1, [pc, #164]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	4313      	orrs	r3, r2
 800a762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a764:	f7fe fb3e 	bl	8008de4 <HAL_GetTick>
 800a768:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a76a:	e00a      	b.n	800a782 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a76c:	f7fe fb3a 	bl	8008de4 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	f241 3288 	movw	r2, #5000	; 0x1388
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d901      	bls.n	800a782 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e03b      	b.n	800a7fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a782:	4b20      	ldr	r3, [pc, #128]	; (800a804 <HAL_RCC_ClockConfig+0x260>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d1ed      	bne.n	800a76c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d008      	beq.n	800a7ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a79c:	4b1a      	ldr	r3, [pc, #104]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	4917      	ldr	r1, [pc, #92]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0308 	and.w	r3, r3, #8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d009      	beq.n	800a7ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7ba:	4b13      	ldr	r3, [pc, #76]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	490f      	ldr	r1, [pc, #60]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a7ce:	f000 f825 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <HAL_RCC_ClockConfig+0x264>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	091b      	lsrs	r3, r3, #4
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	490c      	ldr	r1, [pc, #48]	; (800a810 <HAL_RCC_ClockConfig+0x26c>)
 800a7e0:	5ccb      	ldrb	r3, [r1, r3]
 800a7e2:	f003 031f 	and.w	r3, r3, #31
 800a7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ea:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <HAL_RCC_ClockConfig+0x270>)
 800a7ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <HAL_RCC_ClockConfig+0x274>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe faaa 	bl	8008d4c <HAL_InitTick>
 800a7f8:	4603      	mov	r3, r0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	40022000 	.word	0x40022000
 800a808:	40021000 	.word	0x40021000
 800a80c:	04c4b400 	.word	0x04c4b400
 800a810:	08013484 	.word	0x08013484
 800a814:	20000000 	.word	0x20000000
 800a818:	20000004 	.word	0x20000004

0800a81c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a822:	4b2c      	ldr	r3, [pc, #176]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f003 030c 	and.w	r3, r3, #12
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d102      	bne.n	800a834 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a82e:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a830:	613b      	str	r3, [r7, #16]
 800a832:	e047      	b.n	800a8c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a834:	4b27      	ldr	r3, [pc, #156]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f003 030c 	and.w	r3, r3, #12
 800a83c:	2b08      	cmp	r3, #8
 800a83e:	d102      	bne.n	800a846 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a840:	4b26      	ldr	r3, [pc, #152]	; (800a8dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	e03e      	b.n	800a8c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a846:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f003 030c 	and.w	r3, r3, #12
 800a84e:	2b0c      	cmp	r3, #12
 800a850:	d136      	bne.n	800a8c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a852:	4b20      	ldr	r3, [pc, #128]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a85c:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	091b      	lsrs	r3, r3, #4
 800a862:	f003 030f 	and.w	r3, r3, #15
 800a866:	3301      	adds	r3, #1
 800a868:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d10c      	bne.n	800a88a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a870:	4a1a      	ldr	r2, [pc, #104]	; (800a8dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	fbb2 f3f3 	udiv	r3, r2, r3
 800a878:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a87a:	68d2      	ldr	r2, [r2, #12]
 800a87c:	0a12      	lsrs	r2, r2, #8
 800a87e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a882:	fb02 f303 	mul.w	r3, r2, r3
 800a886:	617b      	str	r3, [r7, #20]
      break;
 800a888:	e00c      	b.n	800a8a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a88a:	4a13      	ldr	r2, [pc, #76]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a892:	4a10      	ldr	r2, [pc, #64]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a894:	68d2      	ldr	r2, [r2, #12]
 800a896:	0a12      	lsrs	r2, r2, #8
 800a898:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a89c:	fb02 f303 	mul.w	r3, r2, r3
 800a8a0:	617b      	str	r3, [r7, #20]
      break;
 800a8a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	0e5b      	lsrs	r3, r3, #25
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	e001      	b.n	800a8c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a8c4:	693b      	ldr	r3, [r7, #16]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	00f42400 	.word	0x00f42400
 800a8dc:	007a1200 	.word	0x007a1200

0800a8e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8e4:	4b03      	ldr	r3, [pc, #12]	; (800a8f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	20000000 	.word	0x20000000

0800a8f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a8fc:	f7ff fff0 	bl	800a8e0 <HAL_RCC_GetHCLKFreq>
 800a900:	4602      	mov	r2, r0
 800a902:	4b06      	ldr	r3, [pc, #24]	; (800a91c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	0a1b      	lsrs	r3, r3, #8
 800a908:	f003 0307 	and.w	r3, r3, #7
 800a90c:	4904      	ldr	r1, [pc, #16]	; (800a920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a90e:	5ccb      	ldrb	r3, [r1, r3]
 800a910:	f003 031f 	and.w	r3, r3, #31
 800a914:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a918:	4618      	mov	r0, r3
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	40021000 	.word	0x40021000
 800a920:	08013494 	.word	0x08013494

0800a924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a928:	f7ff ffda 	bl	800a8e0 <HAL_RCC_GetHCLKFreq>
 800a92c:	4602      	mov	r2, r0
 800a92e:	4b06      	ldr	r3, [pc, #24]	; (800a948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	0adb      	lsrs	r3, r3, #11
 800a934:	f003 0307 	and.w	r3, r3, #7
 800a938:	4904      	ldr	r1, [pc, #16]	; (800a94c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a93a:	5ccb      	ldrb	r3, [r1, r3]
 800a93c:	f003 031f 	and.w	r3, r3, #31
 800a940:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a944:	4618      	mov	r0, r3
 800a946:	bd80      	pop	{r7, pc}
 800a948:	40021000 	.word	0x40021000
 800a94c:	08013494 	.word	0x08013494

0800a950 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a956:	4b1e      	ldr	r3, [pc, #120]	; (800a9d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a960:	4b1b      	ldr	r3, [pc, #108]	; (800a9d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	3301      	adds	r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	2b03      	cmp	r3, #3
 800a972:	d10c      	bne.n	800a98e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a974:	4a17      	ldr	r2, [pc, #92]	; (800a9d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	fbb2 f3f3 	udiv	r3, r2, r3
 800a97c:	4a14      	ldr	r2, [pc, #80]	; (800a9d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a97e:	68d2      	ldr	r2, [r2, #12]
 800a980:	0a12      	lsrs	r2, r2, #8
 800a982:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a986:	fb02 f303 	mul.w	r3, r2, r3
 800a98a:	617b      	str	r3, [r7, #20]
    break;
 800a98c:	e00c      	b.n	800a9a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a98e:	4a12      	ldr	r2, [pc, #72]	; (800a9d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	fbb2 f3f3 	udiv	r3, r2, r3
 800a996:	4a0e      	ldr	r2, [pc, #56]	; (800a9d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a998:	68d2      	ldr	r2, [r2, #12]
 800a99a:	0a12      	lsrs	r2, r2, #8
 800a99c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9a0:	fb02 f303 	mul.w	r3, r2, r3
 800a9a4:	617b      	str	r3, [r7, #20]
    break;
 800a9a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a9a8:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	0e5b      	lsrs	r3, r3, #25
 800a9ae:	f003 0303 	and.w	r3, r3, #3
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a9c2:	687b      	ldr	r3, [r7, #4]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	371c      	adds	r7, #28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	40021000 	.word	0x40021000
 800a9d4:	007a1200 	.word	0x007a1200
 800a9d8:	00f42400 	.word	0x00f42400

0800a9dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8098 	beq.w	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9fe:	4b43      	ldr	r3, [pc, #268]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10d      	bne.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa0a:	4b40      	ldr	r3, [pc, #256]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0e:	4a3f      	ldr	r2, [pc, #252]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa14:	6593      	str	r3, [r2, #88]	; 0x58
 800aa16:	4b3d      	ldr	r3, [pc, #244]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa1e:	60bb      	str	r3, [r7, #8]
 800aa20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa22:	2301      	movs	r3, #1
 800aa24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa26:	4b3a      	ldr	r3, [pc, #232]	; (800ab10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a39      	ldr	r2, [pc, #228]	; (800ab10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa32:	f7fe f9d7 	bl	8008de4 <HAL_GetTick>
 800aa36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa38:	e009      	b.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa3a:	f7fe f9d3 	bl	8008de4 <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d902      	bls.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	74fb      	strb	r3, [r7, #19]
        break;
 800aa4c:	e005      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa4e:	4b30      	ldr	r3, [pc, #192]	; (800ab10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0ef      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800aa5a:	7cfb      	ldrb	r3, [r7, #19]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d159      	bne.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aa60:	4b2a      	ldr	r3, [pc, #168]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01e      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d019      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa7c:	4b23      	ldr	r3, [pc, #140]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa88:	4b20      	ldr	r3, [pc, #128]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa8e:	4a1f      	ldr	r2, [pc, #124]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa98:	4b1c      	ldr	r3, [pc, #112]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9e:	4a1b      	ldr	r2, [pc, #108]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aaa8:	4a18      	ldr	r2, [pc, #96]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d016      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaba:	f7fe f993 	bl	8008de4 <HAL_GetTick>
 800aabe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aac0:	e00b      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aac2:	f7fe f98f 	bl	8008de4 <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d902      	bls.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	74fb      	strb	r3, [r7, #19]
            break;
 800aad8:	e006      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aada:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aae0:	f003 0302 	and.w	r3, r3, #2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0ec      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800aae8:	7cfb      	ldrb	r3, [r7, #19]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10b      	bne.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafc:	4903      	ldr	r1, [pc, #12]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ab04:	e008      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab06:	7cfb      	ldrb	r3, [r7, #19]
 800ab08:	74bb      	strb	r3, [r7, #18]
 800ab0a:	e005      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ab0c:	40021000 	.word	0x40021000
 800ab10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab14:	7cfb      	ldrb	r3, [r7, #19]
 800ab16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab18:	7c7b      	ldrb	r3, [r7, #17]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d105      	bne.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab1e:	4ba6      	ldr	r3, [pc, #664]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab22:	4aa5      	ldr	r2, [pc, #660]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab36:	4ba0      	ldr	r3, [pc, #640]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3c:	f023 0203 	bic.w	r2, r3, #3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	499c      	ldr	r1, [pc, #624]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00a      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab58:	4b97      	ldr	r3, [pc, #604]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5e:	f023 020c 	bic.w	r2, r3, #12
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	4994      	ldr	r1, [pc, #592]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab7a:	4b8f      	ldr	r3, [pc, #572]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	498b      	ldr	r1, [pc, #556]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab9c:	4b86      	ldr	r3, [pc, #536]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	4983      	ldr	r1, [pc, #524]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abac:	4313      	orrs	r3, r2
 800abae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800abbe:	4b7e      	ldr	r3, [pc, #504]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	497a      	ldr	r1, [pc, #488]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800abe0:	4b75      	ldr	r3, [pc, #468]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	4972      	ldr	r1, [pc, #456]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abf0:	4313      	orrs	r3, r2
 800abf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac02:	4b6d      	ldr	r3, [pc, #436]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	4969      	ldr	r1, [pc, #420]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac24:	4b64      	ldr	r3, [pc, #400]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	4961      	ldr	r1, [pc, #388]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac34:	4313      	orrs	r3, r2
 800ac36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac46:	4b5c      	ldr	r3, [pc, #368]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	4958      	ldr	r1, [pc, #352]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d015      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac68:	4b53      	ldr	r3, [pc, #332]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	4950      	ldr	r1, [pc, #320]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac86:	d105      	bne.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac88:	4b4b      	ldr	r3, [pc, #300]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	4a4a      	ldr	r2, [pc, #296]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d015      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aca0:	4b45      	ldr	r3, [pc, #276]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	4942      	ldr	r1, [pc, #264]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acbe:	d105      	bne.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acc0:	4b3d      	ldr	r3, [pc, #244]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	4a3c      	ldr	r2, [pc, #240]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800acc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d015      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800acd8:	4b37      	ldr	r3, [pc, #220]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace6:	4934      	ldr	r1, [pc, #208]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acf6:	d105      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acf8:	4b2f      	ldr	r3, [pc, #188]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	4a2e      	ldr	r2, [pc, #184]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800acfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d015      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad10:	4b29      	ldr	r3, [pc, #164]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1e:	4926      	ldr	r1, [pc, #152]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad2e:	d105      	bne.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad30:	4b21      	ldr	r3, [pc, #132]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	4a20      	ldr	r2, [pc, #128]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d015      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad48:	4b1b      	ldr	r3, [pc, #108]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	4918      	ldr	r1, [pc, #96]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad66:	d105      	bne.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad68:	4b13      	ldr	r3, [pc, #76]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	4a12      	ldr	r2, [pc, #72]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d015      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ad80:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	490a      	ldr	r1, [pc, #40]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad9e:	d105      	bne.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ada0:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	4a04      	ldr	r2, [pc, #16]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ada6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adaa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800adac:	7cbb      	ldrb	r3, [r7, #18]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	40021000 	.word	0x40021000

0800adbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e049      	b.n	800ae62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d106      	bne.n	800ade8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7fd fbb8 	bl	8008558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f000 fc30 	bl	800b660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e049      	b.n	800af10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d106      	bne.n	800ae96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7fd fb81 	bl	8008598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f000 fbd9 	bl	800b660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <HAL_TIM_PWM_Start+0x24>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b01      	cmp	r3, #1
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	e03c      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d109      	bne.n	800af56 <HAL_TIM_PWM_Start+0x3e>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	bf14      	ite	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	2300      	moveq	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	e02f      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d109      	bne.n	800af70 <HAL_TIM_PWM_Start+0x58>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	e022      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b0c      	cmp	r3, #12
 800af74:	d109      	bne.n	800af8a <HAL_TIM_PWM_Start+0x72>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b01      	cmp	r3, #1
 800af80:	bf14      	ite	ne
 800af82:	2301      	movne	r3, #1
 800af84:	2300      	moveq	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	e015      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b10      	cmp	r3, #16
 800af8e:	d109      	bne.n	800afa4 <HAL_TIM_PWM_Start+0x8c>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	bf14      	ite	ne
 800af9c:	2301      	movne	r3, #1
 800af9e:	2300      	moveq	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	e008      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b01      	cmp	r3, #1
 800afae:	bf14      	ite	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	2300      	moveq	r3, #0
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e097      	b.n	800b0ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d104      	bne.n	800afce <HAL_TIM_PWM_Start+0xb6>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afcc:	e023      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b04      	cmp	r3, #4
 800afd2:	d104      	bne.n	800afde <HAL_TIM_PWM_Start+0xc6>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afdc:	e01b      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b08      	cmp	r3, #8
 800afe2:	d104      	bne.n	800afee <HAL_TIM_PWM_Start+0xd6>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afec:	e013      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b0c      	cmp	r3, #12
 800aff2:	d104      	bne.n	800affe <HAL_TIM_PWM_Start+0xe6>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800affc:	e00b      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b10      	cmp	r3, #16
 800b002:	d104      	bne.n	800b00e <HAL_TIM_PWM_Start+0xf6>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b00c:	e003      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2202      	movs	r2, #2
 800b012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2201      	movs	r2, #1
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 ff40 	bl	800bea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a33      	ldr	r2, [pc, #204]	; (800b0f8 <HAL_TIM_PWM_Start+0x1e0>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d013      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a32      	ldr	r2, [pc, #200]	; (800b0fc <HAL_TIM_PWM_Start+0x1e4>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00e      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a30      	ldr	r2, [pc, #192]	; (800b100 <HAL_TIM_PWM_Start+0x1e8>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d009      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a2f      	ldr	r2, [pc, #188]	; (800b104 <HAL_TIM_PWM_Start+0x1ec>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d004      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a2d      	ldr	r2, [pc, #180]	; (800b108 <HAL_TIM_PWM_Start+0x1f0>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d101      	bne.n	800b05a <HAL_TIM_PWM_Start+0x142>
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <HAL_TIM_PWM_Start+0x144>
 800b05a:	2300      	movs	r3, #0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b06e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a20      	ldr	r2, [pc, #128]	; (800b0f8 <HAL_TIM_PWM_Start+0x1e0>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d018      	beq.n	800b0ac <HAL_TIM_PWM_Start+0x194>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b082:	d013      	beq.n	800b0ac <HAL_TIM_PWM_Start+0x194>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a20      	ldr	r2, [pc, #128]	; (800b10c <HAL_TIM_PWM_Start+0x1f4>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00e      	beq.n	800b0ac <HAL_TIM_PWM_Start+0x194>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <HAL_TIM_PWM_Start+0x1f8>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d009      	beq.n	800b0ac <HAL_TIM_PWM_Start+0x194>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <HAL_TIM_PWM_Start+0x1e4>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d004      	beq.n	800b0ac <HAL_TIM_PWM_Start+0x194>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a16      	ldr	r2, [pc, #88]	; (800b100 <HAL_TIM_PWM_Start+0x1e8>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d115      	bne.n	800b0d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	689a      	ldr	r2, [r3, #8]
 800b0b2:	4b18      	ldr	r3, [pc, #96]	; (800b114 <HAL_TIM_PWM_Start+0x1fc>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b06      	cmp	r3, #6
 800b0bc:	d015      	beq.n	800b0ea <HAL_TIM_PWM_Start+0x1d2>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c4:	d011      	beq.n	800b0ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f042 0201 	orr.w	r2, r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d6:	e008      	b.n	800b0ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0201 	orr.w	r2, r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	e000      	b.n	800b0ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	40012c00 	.word	0x40012c00
 800b0fc:	40013400 	.word	0x40013400
 800b100:	40014000 	.word	0x40014000
 800b104:	40014400 	.word	0x40014400
 800b108:	40014800 	.word	0x40014800
 800b10c:	40000400 	.word	0x40000400
 800b110:	40000800 	.word	0x40000800
 800b114:	00010007 	.word	0x00010007

0800b118 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2200      	movs	r2, #0
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 feba 	bl	800bea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a3e      	ldr	r2, [pc, #248]	; (800b230 <HAL_TIM_PWM_Stop+0x118>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d013      	beq.n	800b162 <HAL_TIM_PWM_Stop+0x4a>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a3d      	ldr	r2, [pc, #244]	; (800b234 <HAL_TIM_PWM_Stop+0x11c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d00e      	beq.n	800b162 <HAL_TIM_PWM_Stop+0x4a>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a3b      	ldr	r2, [pc, #236]	; (800b238 <HAL_TIM_PWM_Stop+0x120>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d009      	beq.n	800b162 <HAL_TIM_PWM_Stop+0x4a>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a3a      	ldr	r2, [pc, #232]	; (800b23c <HAL_TIM_PWM_Stop+0x124>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d004      	beq.n	800b162 <HAL_TIM_PWM_Stop+0x4a>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a38      	ldr	r2, [pc, #224]	; (800b240 <HAL_TIM_PWM_Stop+0x128>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d101      	bne.n	800b166 <HAL_TIM_PWM_Stop+0x4e>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <HAL_TIM_PWM_Stop+0x50>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d017      	beq.n	800b19c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6a1a      	ldr	r2, [r3, #32]
 800b172:	f241 1311 	movw	r3, #4369	; 0x1111
 800b176:	4013      	ands	r3, r2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10f      	bne.n	800b19c <HAL_TIM_PWM_Stop+0x84>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6a1a      	ldr	r2, [r3, #32]
 800b182:	f244 4344 	movw	r3, #17476	; 0x4444
 800b186:	4013      	ands	r3, r2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d107      	bne.n	800b19c <HAL_TIM_PWM_Stop+0x84>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b19a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6a1a      	ldr	r2, [r3, #32]
 800b1a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10f      	bne.n	800b1cc <HAL_TIM_PWM_Stop+0xb4>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6a1a      	ldr	r2, [r3, #32]
 800b1b2:	f244 4344 	movw	r3, #17476	; 0x4444
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d107      	bne.n	800b1cc <HAL_TIM_PWM_Stop+0xb4>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0201 	bic.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d104      	bne.n	800b1dc <HAL_TIM_PWM_Stop+0xc4>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1da:	e023      	b.n	800b224 <HAL_TIM_PWM_Stop+0x10c>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d104      	bne.n	800b1ec <HAL_TIM_PWM_Stop+0xd4>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1ea:	e01b      	b.n	800b224 <HAL_TIM_PWM_Stop+0x10c>
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d104      	bne.n	800b1fc <HAL_TIM_PWM_Stop+0xe4>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1fa:	e013      	b.n	800b224 <HAL_TIM_PWM_Stop+0x10c>
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b0c      	cmp	r3, #12
 800b200:	d104      	bne.n	800b20c <HAL_TIM_PWM_Stop+0xf4>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2201      	movs	r2, #1
 800b206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b20a:	e00b      	b.n	800b224 <HAL_TIM_PWM_Stop+0x10c>
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	2b10      	cmp	r3, #16
 800b210:	d104      	bne.n	800b21c <HAL_TIM_PWM_Stop+0x104>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b21a:	e003      	b.n	800b224 <HAL_TIM_PWM_Stop+0x10c>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40012c00 	.word	0x40012c00
 800b234:	40013400 	.word	0x40013400
 800b238:	40014000 	.word	0x40014000
 800b23c:	40014400 	.word	0x40014400
 800b240:	40014800 	.word	0x40014800

0800b244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d101      	bne.n	800b262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b25e:	2302      	movs	r3, #2
 800b260:	e0ff      	b.n	800b462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b14      	cmp	r3, #20
 800b26e:	f200 80f0 	bhi.w	800b452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b272:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b453 	.word	0x0800b453
 800b280:	0800b453 	.word	0x0800b453
 800b284:	0800b453 	.word	0x0800b453
 800b288:	0800b30d 	.word	0x0800b30d
 800b28c:	0800b453 	.word	0x0800b453
 800b290:	0800b453 	.word	0x0800b453
 800b294:	0800b453 	.word	0x0800b453
 800b298:	0800b34f 	.word	0x0800b34f
 800b29c:	0800b453 	.word	0x0800b453
 800b2a0:	0800b453 	.word	0x0800b453
 800b2a4:	0800b453 	.word	0x0800b453
 800b2a8:	0800b38f 	.word	0x0800b38f
 800b2ac:	0800b453 	.word	0x0800b453
 800b2b0:	0800b453 	.word	0x0800b453
 800b2b4:	0800b453 	.word	0x0800b453
 800b2b8:	0800b3d1 	.word	0x0800b3d1
 800b2bc:	0800b453 	.word	0x0800b453
 800b2c0:	0800b453 	.word	0x0800b453
 800b2c4:	0800b453 	.word	0x0800b453
 800b2c8:	0800b411 	.word	0x0800b411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fa54 	bl	800b780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	699a      	ldr	r2, [r3, #24]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f042 0208 	orr.w	r2, r2, #8
 800b2e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	699a      	ldr	r2, [r3, #24]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0204 	bic.w	r2, r2, #4
 800b2f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6999      	ldr	r1, [r3, #24]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	619a      	str	r2, [r3, #24]
      break;
 800b30a:	e0a5      	b.n	800b458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fac4 	bl	800b8a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	699a      	ldr	r2, [r3, #24]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6999      	ldr	r1, [r3, #24]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	021a      	lsls	r2, r3, #8
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	619a      	str	r2, [r3, #24]
      break;
 800b34c:	e084      	b.n	800b458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	4618      	mov	r0, r3
 800b356:	f000 fb2d 	bl	800b9b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	69da      	ldr	r2, [r3, #28]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f042 0208 	orr.w	r2, r2, #8
 800b368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	69da      	ldr	r2, [r3, #28]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f022 0204 	bic.w	r2, r2, #4
 800b378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69d9      	ldr	r1, [r3, #28]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	691a      	ldr	r2, [r3, #16]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	61da      	str	r2, [r3, #28]
      break;
 800b38c:	e064      	b.n	800b458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68b9      	ldr	r1, [r7, #8]
 800b394:	4618      	mov	r0, r3
 800b396:	f000 fb95 	bl	800bac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69da      	ldr	r2, [r3, #28]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	69da      	ldr	r2, [r3, #28]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69d9      	ldr	r1, [r3, #28]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	021a      	lsls	r2, r3, #8
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	61da      	str	r2, [r3, #28]
      break;
 800b3ce:	e043      	b.n	800b458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 fbfe 	bl	800bbd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f042 0208 	orr.w	r2, r2, #8
 800b3ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f022 0204 	bic.w	r2, r2, #4
 800b3fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	691a      	ldr	r2, [r3, #16]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	430a      	orrs	r2, r1
 800b40c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b40e:	e023      	b.n	800b458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68b9      	ldr	r1, [r7, #8]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fc42 	bl	800bca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b42a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b43a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	021a      	lsls	r2, r3, #8
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b450:	e002      	b.n	800b458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	75fb      	strb	r3, [r7, #23]
      break;
 800b456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop

0800b46c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_TIM_ConfigClockSource+0x1c>
 800b484:	2302      	movs	r3, #2
 800b486:	e0de      	b.n	800b646 <HAL_TIM_ConfigClockSource+0x1da>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2202      	movs	r2, #2
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b4a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a63      	ldr	r2, [pc, #396]	; (800b650 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	f000 80a9 	beq.w	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b4c8:	4a61      	ldr	r2, [pc, #388]	; (800b650 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	f200 80ae 	bhi.w	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b4d0:	4a60      	ldr	r2, [pc, #384]	; (800b654 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	f000 80a1 	beq.w	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b4d8:	4a5e      	ldr	r2, [pc, #376]	; (800b654 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	f200 80a6 	bhi.w	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b4e0:	4a5d      	ldr	r2, [pc, #372]	; (800b658 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	f000 8099 	beq.w	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b4e8:	4a5b      	ldr	r2, [pc, #364]	; (800b658 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	f200 809e 	bhi.w	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b4f0:	4a5a      	ldr	r2, [pc, #360]	; (800b65c <HAL_TIM_ConfigClockSource+0x1f0>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	f000 8091 	beq.w	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b4f8:	4a58      	ldr	r2, [pc, #352]	; (800b65c <HAL_TIM_ConfigClockSource+0x1f0>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	f200 8096 	bhi.w	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b500:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b504:	f000 8089 	beq.w	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b508:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b50c:	f200 808e 	bhi.w	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b514:	d03e      	beq.n	800b594 <HAL_TIM_ConfigClockSource+0x128>
 800b516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b51a:	f200 8087 	bhi.w	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b51e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b522:	f000 8086 	beq.w	800b632 <HAL_TIM_ConfigClockSource+0x1c6>
 800b526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52a:	d87f      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b52c:	2b70      	cmp	r3, #112	; 0x70
 800b52e:	d01a      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0xfa>
 800b530:	2b70      	cmp	r3, #112	; 0x70
 800b532:	d87b      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b534:	2b60      	cmp	r3, #96	; 0x60
 800b536:	d050      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0x16e>
 800b538:	2b60      	cmp	r3, #96	; 0x60
 800b53a:	d877      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b53c:	2b50      	cmp	r3, #80	; 0x50
 800b53e:	d03c      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0x14e>
 800b540:	2b50      	cmp	r3, #80	; 0x50
 800b542:	d873      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b544:	2b40      	cmp	r3, #64	; 0x40
 800b546:	d058      	beq.n	800b5fa <HAL_TIM_ConfigClockSource+0x18e>
 800b548:	2b40      	cmp	r3, #64	; 0x40
 800b54a:	d86f      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b54c:	2b30      	cmp	r3, #48	; 0x30
 800b54e:	d064      	beq.n	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b550:	2b30      	cmp	r3, #48	; 0x30
 800b552:	d86b      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b554:	2b20      	cmp	r3, #32
 800b556:	d060      	beq.n	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b558:	2b20      	cmp	r3, #32
 800b55a:	d867      	bhi.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d05c      	beq.n	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b560:	2b10      	cmp	r3, #16
 800b562:	d05a      	beq.n	800b61a <HAL_TIM_ConfigClockSource+0x1ae>
 800b564:	e062      	b.n	800b62c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	6899      	ldr	r1, [r3, #8]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f000 fc75 	bl	800be64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	609a      	str	r2, [r3, #8]
      break;
 800b592:	e04f      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	6899      	ldr	r1, [r3, #8]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	f000 fc5e 	bl	800be64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689a      	ldr	r2, [r3, #8]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5b6:	609a      	str	r2, [r3, #8]
      break;
 800b5b8:	e03c      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	6859      	ldr	r1, [r3, #4]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f000 fbd0 	bl	800bd6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2150      	movs	r1, #80	; 0x50
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fc29 	bl	800be2a <TIM_ITRx_SetConfig>
      break;
 800b5d8:	e02c      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	6859      	ldr	r1, [r3, #4]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f000 fbef 	bl	800bdca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2160      	movs	r1, #96	; 0x60
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 fc19 	bl	800be2a <TIM_ITRx_SetConfig>
      break;
 800b5f8:	e01c      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	6859      	ldr	r1, [r3, #4]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	461a      	mov	r2, r3
 800b608:	f000 fbb0 	bl	800bd6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2140      	movs	r1, #64	; 0x40
 800b612:	4618      	mov	r0, r3
 800b614:	f000 fc09 	bl	800be2a <TIM_ITRx_SetConfig>
      break;
 800b618:	e00c      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f000 fc00 	bl	800be2a <TIM_ITRx_SetConfig>
      break;
 800b62a:	e003      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	73fb      	strb	r3, [r7, #15]
      break;
 800b630:	e000      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	00100070 	.word	0x00100070
 800b654:	00100040 	.word	0x00100040
 800b658:	00100030 	.word	0x00100030
 800b65c:	00100020 	.word	0x00100020

0800b660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a3c      	ldr	r2, [pc, #240]	; (800b764 <TIM_Base_SetConfig+0x104>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d00f      	beq.n	800b698 <TIM_Base_SetConfig+0x38>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b67e:	d00b      	beq.n	800b698 <TIM_Base_SetConfig+0x38>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a39      	ldr	r2, [pc, #228]	; (800b768 <TIM_Base_SetConfig+0x108>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d007      	beq.n	800b698 <TIM_Base_SetConfig+0x38>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a38      	ldr	r2, [pc, #224]	; (800b76c <TIM_Base_SetConfig+0x10c>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d003      	beq.n	800b698 <TIM_Base_SetConfig+0x38>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a37      	ldr	r2, [pc, #220]	; (800b770 <TIM_Base_SetConfig+0x110>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d108      	bne.n	800b6aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a2d      	ldr	r2, [pc, #180]	; (800b764 <TIM_Base_SetConfig+0x104>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d01b      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b8:	d017      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a2a      	ldr	r2, [pc, #168]	; (800b768 <TIM_Base_SetConfig+0x108>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d013      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a29      	ldr	r2, [pc, #164]	; (800b76c <TIM_Base_SetConfig+0x10c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d00f      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a28      	ldr	r2, [pc, #160]	; (800b770 <TIM_Base_SetConfig+0x110>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00b      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a27      	ldr	r2, [pc, #156]	; (800b774 <TIM_Base_SetConfig+0x114>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d007      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a26      	ldr	r2, [pc, #152]	; (800b778 <TIM_Base_SetConfig+0x118>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d003      	beq.n	800b6ea <TIM_Base_SetConfig+0x8a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a25      	ldr	r2, [pc, #148]	; (800b77c <TIM_Base_SetConfig+0x11c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d108      	bne.n	800b6fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	4313      	orrs	r3, r2
 800b708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a10      	ldr	r2, [pc, #64]	; (800b764 <TIM_Base_SetConfig+0x104>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d00f      	beq.n	800b748 <TIM_Base_SetConfig+0xe8>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a11      	ldr	r2, [pc, #68]	; (800b770 <TIM_Base_SetConfig+0x110>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00b      	beq.n	800b748 <TIM_Base_SetConfig+0xe8>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a10      	ldr	r2, [pc, #64]	; (800b774 <TIM_Base_SetConfig+0x114>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d007      	beq.n	800b748 <TIM_Base_SetConfig+0xe8>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a0f      	ldr	r2, [pc, #60]	; (800b778 <TIM_Base_SetConfig+0x118>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d003      	beq.n	800b748 <TIM_Base_SetConfig+0xe8>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a0e      	ldr	r2, [pc, #56]	; (800b77c <TIM_Base_SetConfig+0x11c>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d103      	bne.n	800b750 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	691a      	ldr	r2, [r3, #16]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	615a      	str	r2, [r3, #20]
}
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	40012c00 	.word	0x40012c00
 800b768:	40000400 	.word	0x40000400
 800b76c:	40000800 	.word	0x40000800
 800b770:	40013400 	.word	0x40013400
 800b774:	40014000 	.word	0x40014000
 800b778:	40014400 	.word	0x40014400
 800b77c:	40014800 	.word	0x40014800

0800b780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	f023 0201 	bic.w	r2, r3, #1
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f023 0302 	bic.w	r3, r3, #2
 800b7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a2c      	ldr	r2, [pc, #176]	; (800b88c <TIM_OC1_SetConfig+0x10c>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d00f      	beq.n	800b800 <TIM_OC1_SetConfig+0x80>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a2b      	ldr	r2, [pc, #172]	; (800b890 <TIM_OC1_SetConfig+0x110>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d00b      	beq.n	800b800 <TIM_OC1_SetConfig+0x80>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a2a      	ldr	r2, [pc, #168]	; (800b894 <TIM_OC1_SetConfig+0x114>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d007      	beq.n	800b800 <TIM_OC1_SetConfig+0x80>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a29      	ldr	r2, [pc, #164]	; (800b898 <TIM_OC1_SetConfig+0x118>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d003      	beq.n	800b800 <TIM_OC1_SetConfig+0x80>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a28      	ldr	r2, [pc, #160]	; (800b89c <TIM_OC1_SetConfig+0x11c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d10c      	bne.n	800b81a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f023 0308 	bic.w	r3, r3, #8
 800b806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f023 0304 	bic.w	r3, r3, #4
 800b818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1b      	ldr	r2, [pc, #108]	; (800b88c <TIM_OC1_SetConfig+0x10c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <TIM_OC1_SetConfig+0xc2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a1a      	ldr	r2, [pc, #104]	; (800b890 <TIM_OC1_SetConfig+0x110>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <TIM_OC1_SetConfig+0xc2>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a19      	ldr	r2, [pc, #100]	; (800b894 <TIM_OC1_SetConfig+0x114>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <TIM_OC1_SetConfig+0xc2>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a18      	ldr	r2, [pc, #96]	; (800b898 <TIM_OC1_SetConfig+0x118>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <TIM_OC1_SetConfig+0xc2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a17      	ldr	r2, [pc, #92]	; (800b89c <TIM_OC1_SetConfig+0x11c>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d111      	bne.n	800b866 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	4313      	orrs	r3, r2
 800b85a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	4313      	orrs	r3, r2
 800b864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	40012c00 	.word	0x40012c00
 800b890:	40013400 	.word	0x40013400
 800b894:	40014000 	.word	0x40014000
 800b898:	40014400 	.word	0x40014400
 800b89c:	40014800 	.word	0x40014800

0800b8a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	f023 0210 	bic.w	r2, r3, #16
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f023 0320 	bic.w	r3, r3, #32
 800b8ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a28      	ldr	r2, [pc, #160]	; (800b9a0 <TIM_OC2_SetConfig+0x100>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d003      	beq.n	800b90c <TIM_OC2_SetConfig+0x6c>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a27      	ldr	r2, [pc, #156]	; (800b9a4 <TIM_OC2_SetConfig+0x104>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d10d      	bne.n	800b928 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a1d      	ldr	r2, [pc, #116]	; (800b9a0 <TIM_OC2_SetConfig+0x100>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00f      	beq.n	800b950 <TIM_OC2_SetConfig+0xb0>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a1c      	ldr	r2, [pc, #112]	; (800b9a4 <TIM_OC2_SetConfig+0x104>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d00b      	beq.n	800b950 <TIM_OC2_SetConfig+0xb0>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a1b      	ldr	r2, [pc, #108]	; (800b9a8 <TIM_OC2_SetConfig+0x108>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <TIM_OC2_SetConfig+0xb0>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1a      	ldr	r2, [pc, #104]	; (800b9ac <TIM_OC2_SetConfig+0x10c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d003      	beq.n	800b950 <TIM_OC2_SetConfig+0xb0>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a19      	ldr	r2, [pc, #100]	; (800b9b0 <TIM_OC2_SetConfig+0x110>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d113      	bne.n	800b978 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b95e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	4313      	orrs	r3, r2
 800b96a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4313      	orrs	r3, r2
 800b976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40012c00 	.word	0x40012c00
 800b9a4:	40013400 	.word	0x40013400
 800b9a8:	40014000 	.word	0x40014000
 800b9ac:	40014400 	.word	0x40014400
 800b9b0:	40014800 	.word	0x40014800

0800b9b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f023 0303 	bic.w	r3, r3, #3
 800b9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a27      	ldr	r2, [pc, #156]	; (800bab0 <TIM_OC3_SetConfig+0xfc>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d003      	beq.n	800ba1e <TIM_OC3_SetConfig+0x6a>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a26      	ldr	r2, [pc, #152]	; (800bab4 <TIM_OC3_SetConfig+0x100>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d10d      	bne.n	800ba3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a1c      	ldr	r2, [pc, #112]	; (800bab0 <TIM_OC3_SetConfig+0xfc>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00f      	beq.n	800ba62 <TIM_OC3_SetConfig+0xae>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a1b      	ldr	r2, [pc, #108]	; (800bab4 <TIM_OC3_SetConfig+0x100>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d00b      	beq.n	800ba62 <TIM_OC3_SetConfig+0xae>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1a      	ldr	r2, [pc, #104]	; (800bab8 <TIM_OC3_SetConfig+0x104>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d007      	beq.n	800ba62 <TIM_OC3_SetConfig+0xae>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a19      	ldr	r2, [pc, #100]	; (800babc <TIM_OC3_SetConfig+0x108>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d003      	beq.n	800ba62 <TIM_OC3_SetConfig+0xae>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a18      	ldr	r2, [pc, #96]	; (800bac0 <TIM_OC3_SetConfig+0x10c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d113      	bne.n	800ba8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	011b      	lsls	r3, r3, #4
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	621a      	str	r2, [r3, #32]
}
 800baa4:	bf00      	nop
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	40012c00 	.word	0x40012c00
 800bab4:	40013400 	.word	0x40013400
 800bab8:	40014000 	.word	0x40014000
 800babc:	40014400 	.word	0x40014400
 800bac0:	40014800 	.word	0x40014800

0800bac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800baf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	031b      	lsls	r3, r3, #12
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a28      	ldr	r2, [pc, #160]	; (800bbc4 <TIM_OC4_SetConfig+0x100>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d003      	beq.n	800bb30 <TIM_OC4_SetConfig+0x6c>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a27      	ldr	r2, [pc, #156]	; (800bbc8 <TIM_OC4_SetConfig+0x104>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d10d      	bne.n	800bb4c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	031b      	lsls	r3, r3, #12
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a1d      	ldr	r2, [pc, #116]	; (800bbc4 <TIM_OC4_SetConfig+0x100>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d00f      	beq.n	800bb74 <TIM_OC4_SetConfig+0xb0>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a1c      	ldr	r2, [pc, #112]	; (800bbc8 <TIM_OC4_SetConfig+0x104>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d00b      	beq.n	800bb74 <TIM_OC4_SetConfig+0xb0>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a1b      	ldr	r2, [pc, #108]	; (800bbcc <TIM_OC4_SetConfig+0x108>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d007      	beq.n	800bb74 <TIM_OC4_SetConfig+0xb0>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a1a      	ldr	r2, [pc, #104]	; (800bbd0 <TIM_OC4_SetConfig+0x10c>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d003      	beq.n	800bb74 <TIM_OC4_SetConfig+0xb0>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a19      	ldr	r2, [pc, #100]	; (800bbd4 <TIM_OC4_SetConfig+0x110>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d113      	bne.n	800bb9c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	019b      	lsls	r3, r3, #6
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	019b      	lsls	r3, r3, #6
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	621a      	str	r2, [r3, #32]
}
 800bbb6:	bf00      	nop
 800bbb8:	371c      	adds	r7, #28
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	40012c00 	.word	0x40012c00
 800bbc8:	40013400 	.word	0x40013400
 800bbcc:	40014000 	.word	0x40014000
 800bbd0:	40014400 	.word	0x40014400
 800bbd4:	40014800 	.word	0x40014800

0800bbd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	041b      	lsls	r3, r3, #16
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <TIM_OC5_SetConfig+0xb4>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d00f      	beq.n	800bc52 <TIM_OC5_SetConfig+0x7a>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <TIM_OC5_SetConfig+0xb8>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d00b      	beq.n	800bc52 <TIM_OC5_SetConfig+0x7a>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a15      	ldr	r2, [pc, #84]	; (800bc94 <TIM_OC5_SetConfig+0xbc>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d007      	beq.n	800bc52 <TIM_OC5_SetConfig+0x7a>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a14      	ldr	r2, [pc, #80]	; (800bc98 <TIM_OC5_SetConfig+0xc0>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d003      	beq.n	800bc52 <TIM_OC5_SetConfig+0x7a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a13      	ldr	r2, [pc, #76]	; (800bc9c <TIM_OC5_SetConfig+0xc4>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d109      	bne.n	800bc66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	021b      	lsls	r3, r3, #8
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	697a      	ldr	r2, [r7, #20]
 800bc6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	621a      	str	r2, [r3, #32]
}
 800bc80:	bf00      	nop
 800bc82:	371c      	adds	r7, #28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	40012c00 	.word	0x40012c00
 800bc90:	40013400 	.word	0x40013400
 800bc94:	40014000 	.word	0x40014000
 800bc98:	40014400 	.word	0x40014400
 800bc9c:	40014800 	.word	0x40014800

0800bca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	021b      	lsls	r3, r3, #8
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	051b      	lsls	r3, r3, #20
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a18      	ldr	r2, [pc, #96]	; (800bd58 <TIM_OC6_SetConfig+0xb8>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00f      	beq.n	800bd1c <TIM_OC6_SetConfig+0x7c>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a17      	ldr	r2, [pc, #92]	; (800bd5c <TIM_OC6_SetConfig+0xbc>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d00b      	beq.n	800bd1c <TIM_OC6_SetConfig+0x7c>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a16      	ldr	r2, [pc, #88]	; (800bd60 <TIM_OC6_SetConfig+0xc0>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d007      	beq.n	800bd1c <TIM_OC6_SetConfig+0x7c>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a15      	ldr	r2, [pc, #84]	; (800bd64 <TIM_OC6_SetConfig+0xc4>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d003      	beq.n	800bd1c <TIM_OC6_SetConfig+0x7c>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a14      	ldr	r2, [pc, #80]	; (800bd68 <TIM_OC6_SetConfig+0xc8>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d109      	bne.n	800bd30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	029b      	lsls	r3, r3, #10
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	621a      	str	r2, [r3, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	40012c00 	.word	0x40012c00
 800bd5c:	40013400 	.word	0x40013400
 800bd60:	40014000 	.word	0x40014000
 800bd64:	40014400 	.word	0x40014400
 800bd68:	40014800 	.word	0x40014800

0800bd6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6a1b      	ldr	r3, [r3, #32]
 800bd7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	f023 0201 	bic.w	r2, r3, #1
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	011b      	lsls	r3, r3, #4
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f023 030a 	bic.w	r3, r3, #10
 800bda8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	621a      	str	r2, [r3, #32]
}
 800bdbe:	bf00      	nop
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b087      	sub	sp, #28
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	f023 0210 	bic.w	r2, r3, #16
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	031b      	lsls	r3, r3, #12
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	011b      	lsls	r3, r3, #4
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	4313      	orrs	r3, r2
 800be10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	621a      	str	r2, [r3, #32]
}
 800be1e:	bf00      	nop
 800be20:	371c      	adds	r7, #28
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b085      	sub	sp, #20
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800be40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	f043 0307 	orr.w	r3, r3, #7
 800be50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	609a      	str	r2, [r3, #8]
}
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
 800be70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	021a      	lsls	r2, r3, #8
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	431a      	orrs	r2, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	4313      	orrs	r3, r2
 800be90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	609a      	str	r2, [r3, #8]
}
 800be98:	bf00      	nop
 800be9a:	371c      	adds	r7, #28
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b087      	sub	sp, #28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f003 031f 	and.w	r3, r3, #31
 800beb6:	2201      	movs	r2, #1
 800beb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a1a      	ldr	r2, [r3, #32]
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	43db      	mvns	r3, r3
 800bec6:	401a      	ands	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6a1a      	ldr	r2, [r3, #32]
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 031f 	and.w	r3, r3, #31
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	fa01 f303 	lsl.w	r3, r1, r3
 800bedc:	431a      	orrs	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	621a      	str	r2, [r3, #32]
}
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
	...

0800bef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d101      	bne.n	800bf08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf04:	2302      	movs	r3, #2
 800bf06:	e065      	b.n	800bfd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2202      	movs	r2, #2
 800bf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a2c      	ldr	r2, [pc, #176]	; (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d004      	beq.n	800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a2b      	ldr	r2, [pc, #172]	; (800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d108      	bne.n	800bf4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bf54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a1b      	ldr	r2, [pc, #108]	; (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d018      	beq.n	800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf7e:	d013      	beq.n	800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a18      	ldr	r2, [pc, #96]	; (800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d00e      	beq.n	800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a17      	ldr	r2, [pc, #92]	; (800bfec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d009      	beq.n	800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a12      	ldr	r2, [pc, #72]	; (800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d004      	beq.n	800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a13      	ldr	r2, [pc, #76]	; (800bff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d10c      	bne.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	40012c00 	.word	0x40012c00
 800bfe4:	40013400 	.word	0x40013400
 800bfe8:	40000400 	.word	0x40000400
 800bfec:	40000800 	.word	0x40000800
 800bff0:	40014000 	.word	0x40014000

0800bff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d101      	bne.n	800c010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c00c:	2302      	movs	r3, #2
 800c00e:	e087      	b.n	800c120 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	4313      	orrs	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	4313      	orrs	r3, r2
 800c040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a27      	ldr	r2, [pc, #156]	; (800c12c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d004      	beq.n	800c09e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a25      	ldr	r2, [pc, #148]	; (800c130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d106      	bne.n	800c0ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a1e      	ldr	r2, [pc, #120]	; (800c12c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d004      	beq.n	800c0c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a1d      	ldr	r2, [pc, #116]	; (800c130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d126      	bne.n	800c10e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ca:	051b      	lsls	r3, r3, #20
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a0e      	ldr	r2, [pc, #56]	; (800c12c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d004      	beq.n	800c100 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a0d      	ldr	r2, [pc, #52]	; (800c130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d106      	bne.n	800c10e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	40012c00 	.word	0x40012c00
 800c130:	40013400 	.word	0x40013400

0800c134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e042      	b.n	800c1cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d106      	bne.n	800c15e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7fc fa9b 	bl	8008694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2224      	movs	r2, #36	; 0x24
 800c162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f022 0201 	bic.w	r2, r2, #1
 800c174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fd44 	bl	800cc04 <UART_SetConfig>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d101      	bne.n	800c186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e022      	b.n	800c1cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 f804 	bl	800d19c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0201 	orr.w	r2, r2, #1
 800c1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f001 f88b 	bl	800d2e0 <UART_CheckIdleState>
 800c1ca:	4603      	mov	r3, r0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	; 0x28
 800c1d8:	af02      	add	r7, sp, #8
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ea:	2b20      	cmp	r3, #32
 800c1ec:	f040 8083 	bne.w	800c2f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <HAL_UART_Transmit+0x28>
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e07b      	b.n	800c2f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c206:	2b01      	cmp	r3, #1
 800c208:	d101      	bne.n	800c20e <HAL_UART_Transmit+0x3a>
 800c20a:	2302      	movs	r3, #2
 800c20c:	e074      	b.n	800c2f8 <HAL_UART_Transmit+0x124>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2221      	movs	r2, #33	; 0x21
 800c222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c226:	f7fc fddd 	bl	8008de4 <HAL_GetTick>
 800c22a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	88fa      	ldrh	r2, [r7, #6]
 800c230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	88fa      	ldrh	r2, [r7, #6]
 800c238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c244:	d108      	bne.n	800c258 <HAL_UART_Transmit+0x84>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d104      	bne.n	800c258 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c24e:	2300      	movs	r3, #0
 800c250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	e003      	b.n	800c260 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c268:	e02c      	b.n	800c2c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2200      	movs	r2, #0
 800c272:	2180      	movs	r1, #128	; 0x80
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f001 f87e 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d001      	beq.n	800c284 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c280:	2303      	movs	r3, #3
 800c282:	e039      	b.n	800c2f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10b      	bne.n	800c2a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	3302      	adds	r3, #2
 800c29e:	61bb      	str	r3, [r7, #24]
 800c2a0:	e007      	b.n	800c2b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	781a      	ldrb	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1cc      	bne.n	800c26a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2140      	movs	r1, #64	; 0x40
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f001 f84b 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e006      	b.n	800c2f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e000      	b.n	800c2f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c2f6:	2302      	movs	r3, #2
  }
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08a      	sub	sp, #40	; 0x28
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	4613      	mov	r3, r2
 800c30c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c314:	2b20      	cmp	r3, #32
 800c316:	d142      	bne.n	800c39e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <HAL_UART_Receive_IT+0x24>
 800c31e:	88fb      	ldrh	r3, [r7, #6]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	e03b      	b.n	800c3a0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d101      	bne.n	800c336 <HAL_UART_Receive_IT+0x36>
 800c332:	2302      	movs	r3, #2
 800c334:	e034      	b.n	800c3a0 <HAL_UART_Receive_IT+0xa0>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a17      	ldr	r2, [pc, #92]	; (800c3a8 <HAL_UART_Receive_IT+0xa8>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d01f      	beq.n	800c38e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d018      	beq.n	800c38e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	e853 3f00 	ldrex	r3, [r3]
 800c368:	613b      	str	r3, [r7, #16]
   return(result);
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	623b      	str	r3, [r7, #32]
 800c37c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37e:	69f9      	ldr	r1, [r7, #28]
 800c380:	6a3a      	ldr	r2, [r7, #32]
 800c382:	e841 2300 	strex	r3, r2, [r1]
 800c386:	61bb      	str	r3, [r7, #24]
   return(result);
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1e6      	bne.n	800c35c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c38e:	88fb      	ldrh	r3, [r7, #6]
 800c390:	461a      	mov	r2, r3
 800c392:	68b9      	ldr	r1, [r7, #8]
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f001 f8b7 	bl	800d508 <UART_Start_Receive_IT>
 800c39a:	4603      	mov	r3, r0
 800c39c:	e000      	b.n	800c3a0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c39e:	2302      	movs	r3, #2
  }
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3728      	adds	r7, #40	; 0x28
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	40008000 	.word	0x40008000

0800c3ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b08a      	sub	sp, #40	; 0x28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c0:	2b20      	cmp	r3, #32
 800c3c2:	d142      	bne.n	800c44a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <HAL_UART_Receive_DMA+0x24>
 800c3ca:	88fb      	ldrh	r3, [r7, #6]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e03b      	b.n	800c44c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_UART_Receive_DMA+0x36>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e034      	b.n	800c44c <HAL_UART_Receive_DMA+0xa0>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a17      	ldr	r2, [pc, #92]	; (800c454 <HAL_UART_Receive_DMA+0xa8>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d01f      	beq.n	800c43a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d018      	beq.n	800c43a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	613b      	str	r3, [r7, #16]
   return(result);
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	461a      	mov	r2, r3
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	623b      	str	r3, [r7, #32]
 800c428:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	69f9      	ldr	r1, [r7, #28]
 800c42c:	6a3a      	ldr	r2, [r7, #32]
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	61bb      	str	r3, [r7, #24]
   return(result);
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e6      	bne.n	800c408 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c43a:	88fb      	ldrh	r3, [r7, #6]
 800c43c:	461a      	mov	r2, r3
 800c43e:	68b9      	ldr	r1, [r7, #8]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f001 f98b 	bl	800d75c <UART_Start_Receive_DMA>
 800c446:	4603      	mov	r3, r0
 800c448:	e000      	b.n	800c44c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c44a:	2302      	movs	r3, #2
  }
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3728      	adds	r7, #40	; 0x28
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	40008000 	.word	0x40008000

0800c458 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b090      	sub	sp, #64	; 0x40
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c47a:	2b80      	cmp	r3, #128	; 0x80
 800c47c:	d139      	bne.n	800c4f2 <HAL_UART_DMAStop+0x9a>
 800c47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c480:	2b21      	cmp	r3, #33	; 0x21
 800c482:	d136      	bne.n	800c4f2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3308      	adds	r3, #8
 800c48a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	61fb      	str	r3, [r7, #28]
   return(result);
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c49a:	637b      	str	r3, [r7, #52]	; 0x34
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e5      	bne.n	800c484 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d015      	beq.n	800c4ec <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fd f8ec 	bl	80096a2 <HAL_DMA_Abort>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00d      	beq.n	800c4ec <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fd fa53 	bl	8009980 <HAL_DMA_GetError>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d105      	bne.n	800c4ec <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2210      	movs	r2, #16
 800c4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e044      	b.n	800c576 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 f9dd 	bl	800d8ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fc:	2b40      	cmp	r3, #64	; 0x40
 800c4fe:	d139      	bne.n	800c574 <HAL_UART_DMAStop+0x11c>
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	2b22      	cmp	r3, #34	; 0x22
 800c504:	d136      	bne.n	800c574 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3308      	adds	r3, #8
 800c50c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	60bb      	str	r3, [r7, #8]
   return(result);
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c51c:	633b      	str	r3, [r7, #48]	; 0x30
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3308      	adds	r3, #8
 800c524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c526:	61ba      	str	r2, [r7, #24]
 800c528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6979      	ldr	r1, [r7, #20]
 800c52c:	69ba      	ldr	r2, [r7, #24]
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	613b      	str	r3, [r7, #16]
   return(result);
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e5      	bne.n	800c506 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d015      	beq.n	800c56e <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c546:	4618      	mov	r0, r3
 800c548:	f7fd f8ab 	bl	80096a2 <HAL_DMA_Abort>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00d      	beq.n	800c56e <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c556:	4618      	mov	r0, r3
 800c558:	f7fd fa12 	bl	8009980 <HAL_DMA_GetError>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d105      	bne.n	800c56e <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2210      	movs	r2, #16
 800c566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e003      	b.n	800c576 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f001 f9dd 	bl	800d92e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3740      	adds	r7, #64	; 0x40
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b0ba      	sub	sp, #232	; 0xe8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c5aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d11b      	bne.n	800c5f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5c0:	f003 0320 	and.w	r3, r3, #32
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d015      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5cc:	f003 0320 	and.w	r3, r3, #32
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d105      	bne.n	800c5e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d009      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 82d6 	beq.w	800cb96 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
      }
      return;
 800c5f2:	e2d0      	b.n	800cb96 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c5f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 811f 	beq.w	800c83c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c5fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c602:	4b8b      	ldr	r3, [pc, #556]	; (800c830 <HAL_UART_IRQHandler+0x2b0>)
 800c604:	4013      	ands	r3, r2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d106      	bne.n	800c618 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c60a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c60e:	4b89      	ldr	r3, [pc, #548]	; (800c834 <HAL_UART_IRQHandler+0x2b4>)
 800c610:	4013      	ands	r3, r2
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8112 	beq.w	800c83c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d011      	beq.n	800c648 <HAL_UART_IRQHandler+0xc8>
 800c624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2201      	movs	r2, #1
 800c636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c63e:	f043 0201 	orr.w	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d011      	beq.n	800c678 <HAL_UART_IRQHandler+0xf8>
 800c654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00b      	beq.n	800c678 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2202      	movs	r2, #2
 800c666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c66e:	f043 0204 	orr.w	r2, r3, #4
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	d011      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x128>
 800c684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2204      	movs	r2, #4
 800c696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69e:	f043 0202 	orr.w	r2, r3, #2
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ac:	f003 0308 	and.w	r3, r3, #8
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d017      	beq.n	800c6e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6b8:	f003 0320 	and.w	r3, r3, #32
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d105      	bne.n	800c6cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6c4:	4b5a      	ldr	r3, [pc, #360]	; (800c830 <HAL_UART_IRQHandler+0x2b0>)
 800c6c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6da:	f043 0208 	orr.w	r2, r3, #8
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d012      	beq.n	800c716 <HAL_UART_IRQHandler+0x196>
 800c6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00c      	beq.n	800c716 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c70c:	f043 0220 	orr.w	r2, r3, #32
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 823c 	beq.w	800cb9a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c726:	f003 0320 	and.w	r3, r3, #32
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d013      	beq.n	800c756 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c732:	f003 0320 	and.w	r3, r3, #32
 800c736:	2b00      	cmp	r3, #0
 800c738:	d105      	bne.n	800c746 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c73e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c742:	2b00      	cmp	r3, #0
 800c744:	d007      	beq.n	800c756 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c75c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b40      	cmp	r3, #64	; 0x40
 800c76c:	d005      	beq.n	800c77a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c76e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c776:	2b00      	cmp	r3, #0
 800c778:	d04f      	beq.n	800c81a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f001 f8d7 	bl	800d92e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c78a:	2b40      	cmp	r3, #64	; 0x40
 800c78c:	d141      	bne.n	800c812 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3308      	adds	r3, #8
 800c794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c7a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c7ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c7be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c7c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1d9      	bne.n	800c78e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d013      	beq.n	800c80a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e6:	4a14      	ldr	r2, [pc, #80]	; (800c838 <HAL_UART_IRQHandler+0x2b8>)
 800c7e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fc ffb0 	bl	8009754 <HAL_DMA_Abort_IT>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d017      	beq.n	800c82a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c804:	4610      	mov	r0, r2
 800c806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c808:	e00f      	b.n	800c82a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f9e4 	bl	800cbd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c810:	e00b      	b.n	800c82a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f9e0 	bl	800cbd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c818:	e007      	b.n	800c82a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f9dc 	bl	800cbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c828:	e1b7      	b.n	800cb9a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c82a:	bf00      	nop
    return;
 800c82c:	e1b5      	b.n	800cb9a <HAL_UART_IRQHandler+0x61a>
 800c82e:	bf00      	nop
 800c830:	10000001 	.word	0x10000001
 800c834:	04000120 	.word	0x04000120
 800c838:	0800dbd9 	.word	0x0800dbd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c840:	2b01      	cmp	r3, #1
 800c842:	f040 814a 	bne.w	800cada <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84a:	f003 0310 	and.w	r3, r3, #16
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 8143 	beq.w	800cada <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 813c 	beq.w	800cada <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2210      	movs	r2, #16
 800c868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c874:	2b40      	cmp	r3, #64	; 0x40
 800c876:	f040 80b5 	bne.w	800c9e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c886:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 8187 	beq.w	800cb9e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c89a:	429a      	cmp	r2, r3
 800c89c:	f080 817f 	bcs.w	800cb9e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c8a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f040 8086 	bne.w	800c9c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c8d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c8ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c8f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c8f6:	e841 2300 	strex	r3, r2, [r1]
 800c8fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c8fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1da      	bne.n	800c8bc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3308      	adds	r3, #8
 800c90c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c910:	e853 3f00 	ldrex	r3, [r3]
 800c914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c918:	f023 0301 	bic.w	r3, r3, #1
 800c91c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3308      	adds	r3, #8
 800c926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c92a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c92e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e1      	bne.n	800c906 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3308      	adds	r3, #8
 800c948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c94c:	e853 3f00 	ldrex	r3, [r3]
 800c950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	3308      	adds	r3, #8
 800c962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c966:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c96c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e3      	bne.n	800c942 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c990:	e853 3f00 	ldrex	r3, [r3]
 800c994:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c998:	f023 0310 	bic.w	r3, r3, #16
 800c99c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c9aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9b2:	e841 2300 	strex	r3, r2, [r1]
 800c9b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1e4      	bne.n	800c988 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fc fe6d 	bl	80096a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f905 	bl	800cbec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9e2:	e0dc      	b.n	800cb9e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 80ce 	beq.w	800cba2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ca06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 80c9 	beq.w	800cba2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	e853 3f00 	ldrex	r3, [r3]
 800ca1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca32:	647b      	str	r3, [r7, #68]	; 0x44
 800ca34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca3a:	e841 2300 	strex	r3, r2, [r1]
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e4      	bne.n	800ca10 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	e853 3f00 	ldrex	r3, [r3]
 800ca54:	623b      	str	r3, [r7, #32]
   return(result);
 800ca56:	6a3b      	ldr	r3, [r7, #32]
 800ca58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca5c:	f023 0301 	bic.w	r3, r3, #1
 800ca60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3308      	adds	r3, #8
 800ca6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ca6e:	633a      	str	r2, [r7, #48]	; 0x30
 800ca70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca76:	e841 2300 	strex	r3, r2, [r1]
 800ca7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1e1      	bne.n	800ca46 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2220      	movs	r2, #32
 800ca86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	e853 3f00 	ldrex	r3, [r3]
 800caa2:	60fb      	str	r3, [r7, #12]
   return(result);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f023 0310 	bic.w	r3, r3, #16
 800caaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cab8:	61fb      	str	r3, [r7, #28]
 800caba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	69b9      	ldr	r1, [r7, #24]
 800cabe:	69fa      	ldr	r2, [r7, #28]
 800cac0:	e841 2300 	strex	r3, r2, [r1]
 800cac4:	617b      	str	r3, [r7, #20]
   return(result);
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e4      	bne.n	800ca96 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cacc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f88a 	bl	800cbec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cad8:	e063      	b.n	800cba2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00e      	beq.n	800cb04 <HAL_UART_IRQHandler+0x584>
 800cae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d008      	beq.n	800cb04 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cafa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 fd09 	bl	800e514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb02:	e051      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d014      	beq.n	800cb3a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d105      	bne.n	800cb28 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d008      	beq.n	800cb3a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d03a      	beq.n	800cba6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	4798      	blx	r3
    }
    return;
 800cb38:	e035      	b.n	800cba6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <HAL_UART_IRQHandler+0x5da>
 800cb46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f001 f856 	bl	800dc04 <UART_EndTransmit_IT>
    return;
 800cb58:	e026      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <HAL_UART_IRQHandler+0x5fa>
 800cb66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d003      	beq.n	800cb7a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f001 fce2 	bl	800e53c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb78:	e016      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d010      	beq.n	800cba8 <HAL_UART_IRQHandler+0x628>
 800cb86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	da0c      	bge.n	800cba8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 fcca 	bl	800e528 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb94:	e008      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
      return;
 800cb96:	bf00      	nop
 800cb98:	e006      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
    return;
 800cb9a:	bf00      	nop
 800cb9c:	e004      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
      return;
 800cb9e:	bf00      	nop
 800cba0:	e002      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
      return;
 800cba2:	bf00      	nop
 800cba4:	e000      	b.n	800cba8 <HAL_UART_IRQHandler+0x628>
    return;
 800cba6:	bf00      	nop
  }
}
 800cba8:	37e8      	adds	r7, #232	; 0xe8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop

0800cbb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc08:	b08c      	sub	sp, #48	; 0x30
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	689a      	ldr	r2, [r3, #8]
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	431a      	orrs	r2, r3
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4bab      	ldr	r3, [pc, #684]	; (800cee0 <UART_SetConfig+0x2dc>)
 800cc34:	4013      	ands	r3, r2
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc3c:	430b      	orrs	r3, r1
 800cc3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	68da      	ldr	r2, [r3, #12]
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4aa0      	ldr	r2, [pc, #640]	; (800cee4 <UART_SetConfig+0x2e0>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d004      	beq.n	800cc70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800cc7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	6812      	ldr	r2, [r2, #0]
 800cc82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc84:	430b      	orrs	r3, r1
 800cc86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8e:	f023 010f 	bic.w	r1, r3, #15
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a91      	ldr	r2, [pc, #580]	; (800cee8 <UART_SetConfig+0x2e4>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d125      	bne.n	800ccf4 <UART_SetConfig+0xf0>
 800cca8:	4b90      	ldr	r3, [pc, #576]	; (800ceec <UART_SetConfig+0x2e8>)
 800ccaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccae:	f003 0303 	and.w	r3, r3, #3
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d81a      	bhi.n	800ccec <UART_SetConfig+0xe8>
 800ccb6:	a201      	add	r2, pc, #4	; (adr r2, 800ccbc <UART_SetConfig+0xb8>)
 800ccb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbc:	0800cccd 	.word	0x0800cccd
 800ccc0:	0800ccdd 	.word	0x0800ccdd
 800ccc4:	0800ccd5 	.word	0x0800ccd5
 800ccc8:	0800cce5 	.word	0x0800cce5
 800cccc:	2301      	movs	r3, #1
 800ccce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccd2:	e0d6      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccda:	e0d2      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ccdc:	2304      	movs	r3, #4
 800ccde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cce2:	e0ce      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cce4:	2308      	movs	r3, #8
 800cce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccea:	e0ca      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ccec:	2310      	movs	r3, #16
 800ccee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccf2:	e0c6      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a7d      	ldr	r2, [pc, #500]	; (800cef0 <UART_SetConfig+0x2ec>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d138      	bne.n	800cd70 <UART_SetConfig+0x16c>
 800ccfe:	4b7b      	ldr	r3, [pc, #492]	; (800ceec <UART_SetConfig+0x2e8>)
 800cd00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd04:	f003 030c 	and.w	r3, r3, #12
 800cd08:	2b0c      	cmp	r3, #12
 800cd0a:	d82d      	bhi.n	800cd68 <UART_SetConfig+0x164>
 800cd0c:	a201      	add	r2, pc, #4	; (adr r2, 800cd14 <UART_SetConfig+0x110>)
 800cd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd12:	bf00      	nop
 800cd14:	0800cd49 	.word	0x0800cd49
 800cd18:	0800cd69 	.word	0x0800cd69
 800cd1c:	0800cd69 	.word	0x0800cd69
 800cd20:	0800cd69 	.word	0x0800cd69
 800cd24:	0800cd59 	.word	0x0800cd59
 800cd28:	0800cd69 	.word	0x0800cd69
 800cd2c:	0800cd69 	.word	0x0800cd69
 800cd30:	0800cd69 	.word	0x0800cd69
 800cd34:	0800cd51 	.word	0x0800cd51
 800cd38:	0800cd69 	.word	0x0800cd69
 800cd3c:	0800cd69 	.word	0x0800cd69
 800cd40:	0800cd69 	.word	0x0800cd69
 800cd44:	0800cd61 	.word	0x0800cd61
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd4e:	e098      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cd50:	2302      	movs	r3, #2
 800cd52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd56:	e094      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cd58:	2304      	movs	r3, #4
 800cd5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd5e:	e090      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cd60:	2308      	movs	r3, #8
 800cd62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd66:	e08c      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cd68:	2310      	movs	r3, #16
 800cd6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd6e:	e088      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a5f      	ldr	r2, [pc, #380]	; (800cef4 <UART_SetConfig+0x2f0>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d125      	bne.n	800cdc6 <UART_SetConfig+0x1c2>
 800cd7a:	4b5c      	ldr	r3, [pc, #368]	; (800ceec <UART_SetConfig+0x2e8>)
 800cd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd84:	2b30      	cmp	r3, #48	; 0x30
 800cd86:	d016      	beq.n	800cdb6 <UART_SetConfig+0x1b2>
 800cd88:	2b30      	cmp	r3, #48	; 0x30
 800cd8a:	d818      	bhi.n	800cdbe <UART_SetConfig+0x1ba>
 800cd8c:	2b20      	cmp	r3, #32
 800cd8e:	d00a      	beq.n	800cda6 <UART_SetConfig+0x1a2>
 800cd90:	2b20      	cmp	r3, #32
 800cd92:	d814      	bhi.n	800cdbe <UART_SetConfig+0x1ba>
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <UART_SetConfig+0x19a>
 800cd98:	2b10      	cmp	r3, #16
 800cd9a:	d008      	beq.n	800cdae <UART_SetConfig+0x1aa>
 800cd9c:	e00f      	b.n	800cdbe <UART_SetConfig+0x1ba>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cda4:	e06d      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cda6:	2302      	movs	r3, #2
 800cda8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdac:	e069      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cdae:	2304      	movs	r3, #4
 800cdb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdb4:	e065      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cdb6:	2308      	movs	r3, #8
 800cdb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdbc:	e061      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cdbe:	2310      	movs	r3, #16
 800cdc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdc4:	e05d      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a4b      	ldr	r2, [pc, #300]	; (800cef8 <UART_SetConfig+0x2f4>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d125      	bne.n	800ce1c <UART_SetConfig+0x218>
 800cdd0:	4b46      	ldr	r3, [pc, #280]	; (800ceec <UART_SetConfig+0x2e8>)
 800cdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cdda:	2bc0      	cmp	r3, #192	; 0xc0
 800cddc:	d016      	beq.n	800ce0c <UART_SetConfig+0x208>
 800cdde:	2bc0      	cmp	r3, #192	; 0xc0
 800cde0:	d818      	bhi.n	800ce14 <UART_SetConfig+0x210>
 800cde2:	2b80      	cmp	r3, #128	; 0x80
 800cde4:	d00a      	beq.n	800cdfc <UART_SetConfig+0x1f8>
 800cde6:	2b80      	cmp	r3, #128	; 0x80
 800cde8:	d814      	bhi.n	800ce14 <UART_SetConfig+0x210>
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <UART_SetConfig+0x1f0>
 800cdee:	2b40      	cmp	r3, #64	; 0x40
 800cdf0:	d008      	beq.n	800ce04 <UART_SetConfig+0x200>
 800cdf2:	e00f      	b.n	800ce14 <UART_SetConfig+0x210>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdfa:	e042      	b.n	800ce82 <UART_SetConfig+0x27e>
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce02:	e03e      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce04:	2304      	movs	r3, #4
 800ce06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce0a:	e03a      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce0c:	2308      	movs	r3, #8
 800ce0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce12:	e036      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce14:	2310      	movs	r3, #16
 800ce16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce1a:	e032      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a30      	ldr	r2, [pc, #192]	; (800cee4 <UART_SetConfig+0x2e0>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d12a      	bne.n	800ce7c <UART_SetConfig+0x278>
 800ce26:	4b31      	ldr	r3, [pc, #196]	; (800ceec <UART_SetConfig+0x2e8>)
 800ce28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ce30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce34:	d01a      	beq.n	800ce6c <UART_SetConfig+0x268>
 800ce36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce3a:	d81b      	bhi.n	800ce74 <UART_SetConfig+0x270>
 800ce3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce40:	d00c      	beq.n	800ce5c <UART_SetConfig+0x258>
 800ce42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce46:	d815      	bhi.n	800ce74 <UART_SetConfig+0x270>
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d003      	beq.n	800ce54 <UART_SetConfig+0x250>
 800ce4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce50:	d008      	beq.n	800ce64 <UART_SetConfig+0x260>
 800ce52:	e00f      	b.n	800ce74 <UART_SetConfig+0x270>
 800ce54:	2300      	movs	r3, #0
 800ce56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce5a:	e012      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce62:	e00e      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce64:	2304      	movs	r3, #4
 800ce66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce6a:	e00a      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce6c:	2308      	movs	r3, #8
 800ce6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce72:	e006      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce74:	2310      	movs	r3, #16
 800ce76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce7a:	e002      	b.n	800ce82 <UART_SetConfig+0x27e>
 800ce7c:	2310      	movs	r3, #16
 800ce7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a17      	ldr	r2, [pc, #92]	; (800cee4 <UART_SetConfig+0x2e0>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	f040 80a8 	bne.w	800cfde <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce92:	2b08      	cmp	r3, #8
 800ce94:	d834      	bhi.n	800cf00 <UART_SetConfig+0x2fc>
 800ce96:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <UART_SetConfig+0x298>)
 800ce98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cf01 	.word	0x0800cf01
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800cf01 	.word	0x0800cf01
 800ceac:	0800cecf 	.word	0x0800cecf
 800ceb0:	0800cf01 	.word	0x0800cf01
 800ceb4:	0800cf01 	.word	0x0800cf01
 800ceb8:	0800cf01 	.word	0x0800cf01
 800cebc:	0800ced7 	.word	0x0800ced7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cec0:	f7fd fd1a 	bl	800a8f8 <HAL_RCC_GetPCLK1Freq>
 800cec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cec6:	e021      	b.n	800cf0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <UART_SetConfig+0x2f8>)
 800ceca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cecc:	e01e      	b.n	800cf0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cece:	f7fd fca5 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800ced2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ced4:	e01a      	b.n	800cf0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ced6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cedc:	e016      	b.n	800cf0c <UART_SetConfig+0x308>
 800cede:	bf00      	nop
 800cee0:	cfff69f3 	.word	0xcfff69f3
 800cee4:	40008000 	.word	0x40008000
 800cee8:	40013800 	.word	0x40013800
 800ceec:	40021000 	.word	0x40021000
 800cef0:	40004400 	.word	0x40004400
 800cef4:	40004800 	.word	0x40004800
 800cef8:	40004c00 	.word	0x40004c00
 800cefc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800cf00:	2300      	movs	r3, #0
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cf0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 812a 	beq.w	800d168 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	4a9e      	ldr	r2, [pc, #632]	; (800d194 <UART_SetConfig+0x590>)
 800cf1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	4413      	add	r3, r2
 800cf32:	69ba      	ldr	r2, [r7, #24]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d305      	bcc.n	800cf44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d903      	bls.n	800cf4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cf4a:	e10d      	b.n	800d168 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	2200      	movs	r2, #0
 800cf50:	60bb      	str	r3, [r7, #8]
 800cf52:	60fa      	str	r2, [r7, #12]
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	4a8e      	ldr	r2, [pc, #568]	; (800d194 <UART_SetConfig+0x590>)
 800cf5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	2200      	movs	r2, #0
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	607a      	str	r2, [r7, #4]
 800cf66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf6e:	f7f3 feb3 	bl	8000cd8 <__aeabi_uldivmod>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4610      	mov	r0, r2
 800cf78:	4619      	mov	r1, r3
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	f04f 0300 	mov.w	r3, #0
 800cf82:	020b      	lsls	r3, r1, #8
 800cf84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf88:	0202      	lsls	r2, r0, #8
 800cf8a:	6979      	ldr	r1, [r7, #20]
 800cf8c:	6849      	ldr	r1, [r1, #4]
 800cf8e:	0849      	lsrs	r1, r1, #1
 800cf90:	2000      	movs	r0, #0
 800cf92:	460c      	mov	r4, r1
 800cf94:	4605      	mov	r5, r0
 800cf96:	eb12 0804 	adds.w	r8, r2, r4
 800cf9a:	eb43 0905 	adc.w	r9, r3, r5
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	469a      	mov	sl, r3
 800cfa6:	4693      	mov	fp, r2
 800cfa8:	4652      	mov	r2, sl
 800cfaa:	465b      	mov	r3, fp
 800cfac:	4640      	mov	r0, r8
 800cfae:	4649      	mov	r1, r9
 800cfb0:	f7f3 fe92 	bl	8000cd8 <__aeabi_uldivmod>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4613      	mov	r3, r2
 800cfba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfc2:	d308      	bcc.n	800cfd6 <UART_SetConfig+0x3d2>
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfca:	d204      	bcs.n	800cfd6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6a3a      	ldr	r2, [r7, #32]
 800cfd2:	60da      	str	r2, [r3, #12]
 800cfd4:	e0c8      	b.n	800d168 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cfdc:	e0c4      	b.n	800d168 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfe6:	d167      	bne.n	800d0b8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800cfe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfec:	2b08      	cmp	r3, #8
 800cfee:	d828      	bhi.n	800d042 <UART_SetConfig+0x43e>
 800cff0:	a201      	add	r2, pc, #4	; (adr r2, 800cff8 <UART_SetConfig+0x3f4>)
 800cff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff6:	bf00      	nop
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d025 	.word	0x0800d025
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	0800d043 	.word	0x0800d043
 800d008:	0800d033 	.word	0x0800d033
 800d00c:	0800d043 	.word	0x0800d043
 800d010:	0800d043 	.word	0x0800d043
 800d014:	0800d043 	.word	0x0800d043
 800d018:	0800d03b 	.word	0x0800d03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d01c:	f7fd fc6c 	bl	800a8f8 <HAL_RCC_GetPCLK1Freq>
 800d020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d022:	e014      	b.n	800d04e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d024:	f7fd fc7e 	bl	800a924 <HAL_RCC_GetPCLK2Freq>
 800d028:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d02a:	e010      	b.n	800d04e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d02c:	4b5a      	ldr	r3, [pc, #360]	; (800d198 <UART_SetConfig+0x594>)
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d030:	e00d      	b.n	800d04e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d032:	f7fd fbf3 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800d036:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d038:	e009      	b.n	800d04e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d040:	e005      	b.n	800d04e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d042:	2300      	movs	r3, #0
 800d044:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d04c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 8089 	beq.w	800d168 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05a:	4a4e      	ldr	r2, [pc, #312]	; (800d194 <UART_SetConfig+0x590>)
 800d05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d060:	461a      	mov	r2, r3
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	fbb3 f3f2 	udiv	r3, r3, r2
 800d068:	005a      	lsls	r2, r3, #1
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	085b      	lsrs	r3, r3, #1
 800d070:	441a      	add	r2, r3
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	fbb2 f3f3 	udiv	r3, r2, r3
 800d07a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d07c:	6a3b      	ldr	r3, [r7, #32]
 800d07e:	2b0f      	cmp	r3, #15
 800d080:	d916      	bls.n	800d0b0 <UART_SetConfig+0x4ac>
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d088:	d212      	bcs.n	800d0b0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	f023 030f 	bic.w	r3, r3, #15
 800d092:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	b29b      	uxth	r3, r3
 800d09a:	f003 0307 	and.w	r3, r3, #7
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	8bfb      	ldrh	r3, [r7, #30]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	8bfa      	ldrh	r2, [r7, #30]
 800d0ac:	60da      	str	r2, [r3, #12]
 800d0ae:	e05b      	b.n	800d168 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d0b6:	e057      	b.n	800d168 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d828      	bhi.n	800d112 <UART_SetConfig+0x50e>
 800d0c0:	a201      	add	r2, pc, #4	; (adr r2, 800d0c8 <UART_SetConfig+0x4c4>)
 800d0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c6:	bf00      	nop
 800d0c8:	0800d0ed 	.word	0x0800d0ed
 800d0cc:	0800d0f5 	.word	0x0800d0f5
 800d0d0:	0800d0fd 	.word	0x0800d0fd
 800d0d4:	0800d113 	.word	0x0800d113
 800d0d8:	0800d103 	.word	0x0800d103
 800d0dc:	0800d113 	.word	0x0800d113
 800d0e0:	0800d113 	.word	0x0800d113
 800d0e4:	0800d113 	.word	0x0800d113
 800d0e8:	0800d10b 	.word	0x0800d10b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0ec:	f7fd fc04 	bl	800a8f8 <HAL_RCC_GetPCLK1Freq>
 800d0f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d0f2:	e014      	b.n	800d11e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0f4:	f7fd fc16 	bl	800a924 <HAL_RCC_GetPCLK2Freq>
 800d0f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d0fa:	e010      	b.n	800d11e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0fc:	4b26      	ldr	r3, [pc, #152]	; (800d198 <UART_SetConfig+0x594>)
 800d0fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d100:	e00d      	b.n	800d11e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d102:	f7fd fb8b 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800d106:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d108:	e009      	b.n	800d11e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d10e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d110:	e005      	b.n	800d11e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d112:	2300      	movs	r3, #0
 800d114:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d11c:	bf00      	nop
    }

    if (pclk != 0U)
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	2b00      	cmp	r3, #0
 800d122:	d021      	beq.n	800d168 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	4a1a      	ldr	r2, [pc, #104]	; (800d194 <UART_SetConfig+0x590>)
 800d12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d12e:	461a      	mov	r2, r3
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	fbb3 f2f2 	udiv	r2, r3, r2
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	085b      	lsrs	r3, r3, #1
 800d13c:	441a      	add	r2, r3
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	fbb2 f3f3 	udiv	r3, r2, r3
 800d146:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	2b0f      	cmp	r3, #15
 800d14c:	d909      	bls.n	800d162 <UART_SetConfig+0x55e>
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d154:	d205      	bcs.n	800d162 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	b29a      	uxth	r2, r3
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	60da      	str	r2, [r3, #12]
 800d160:	e002      	b.n	800d168 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2201      	movs	r2, #1
 800d174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2200      	movs	r2, #0
 800d17c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2200      	movs	r2, #0
 800d182:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d184:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3730      	adds	r7, #48	; 0x30
 800d18c:	46bd      	mov	sp, r7
 800d18e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d192:	bf00      	nop
 800d194:	0801349c 	.word	0x0801349c
 800d198:	00f42400 	.word	0x00f42400

0800d19c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a8:	f003 0301 	and.w	r3, r3, #1
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00a      	beq.n	800d1c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	430a      	orrs	r2, r1
 800d1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00a      	beq.n	800d1e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	430a      	orrs	r2, r1
 800d1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ec:	f003 0304 	and.w	r3, r3, #4
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00a      	beq.n	800d20a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20e:	f003 0308 	and.w	r3, r3, #8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d230:	f003 0310 	and.w	r3, r3, #16
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00a      	beq.n	800d24e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	f003 0320 	and.w	r3, r3, #32
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01a      	beq.n	800d2b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	430a      	orrs	r2, r1
 800d290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d29a:	d10a      	bne.n	800d2b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	430a      	orrs	r2, r1
 800d2b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	605a      	str	r2, [r3, #4]
  }
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2f0:	f7fb fd78 	bl	8008de4 <HAL_GetTick>
 800d2f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0308 	and.w	r3, r3, #8
 800d300:	2b08      	cmp	r3, #8
 800d302:	d10e      	bne.n	800d322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f82f 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e025      	b.n	800d36e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d10e      	bne.n	800d34e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f819 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e00f      	b.n	800d36e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2220      	movs	r2, #32
 800d352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b09c      	sub	sp, #112	; 0x70
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	60f8      	str	r0, [r7, #12]
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d386:	e0a9      	b.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38e:	f000 80a5 	beq.w	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d392:	f7fb fd27 	bl	8008de4 <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d302      	bcc.n	800d3a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d140      	bne.n	800d42a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b0:	e853 3f00 	ldrex	r3, [r3]
 800d3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d3bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3ce:	e841 2300 	strex	r3, r2, [r1]
 800d3d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d3d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e6      	bne.n	800d3a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3308      	adds	r3, #8
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e4:	e853 3f00 	ldrex	r3, [r3]
 800d3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	f023 0301 	bic.w	r3, r3, #1
 800d3f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d3fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d402:	e841 2300 	strex	r3, r2, [r1]
 800d406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1e5      	bne.n	800d3da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2220      	movs	r2, #32
 800d412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2220      	movs	r2, #32
 800d41a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e069      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	2b00      	cmp	r3, #0
 800d436:	d051      	beq.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d446:	d149      	bne.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	e853 3f00 	ldrex	r3, [r3]
 800d45e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d466:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d470:	637b      	str	r3, [r7, #52]	; 0x34
 800d472:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d478:	e841 2300 	strex	r3, r2, [r1]
 800d47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1e6      	bne.n	800d452 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3308      	adds	r3, #8
 800d48a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	e853 3f00 	ldrex	r3, [r3]
 800d492:	613b      	str	r3, [r7, #16]
   return(result);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	f023 0301 	bic.w	r3, r3, #1
 800d49a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4a4:	623a      	str	r2, [r7, #32]
 800d4a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a8:	69f9      	ldr	r1, [r7, #28]
 800d4aa:	6a3a      	ldr	r2, [r7, #32]
 800d4ac:	e841 2300 	strex	r3, r2, [r1]
 800d4b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1e5      	bne.n	800d484 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e010      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	69da      	ldr	r2, [r3, #28]
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	bf0c      	ite	eq
 800d4ec:	2301      	moveq	r3, #1
 800d4ee:	2300      	movne	r3, #0
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	f43f af46 	beq.w	800d388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3770      	adds	r7, #112	; 0x70
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
	...

0800d508 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d508:	b480      	push	{r7}
 800d50a:	b0a3      	sub	sp, #140	; 0x8c
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	4613      	mov	r3, r2
 800d514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	88fa      	ldrh	r2, [r7, #6]
 800d520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	88fa      	ldrh	r2, [r7, #6]
 800d528:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d53a:	d10e      	bne.n	800d55a <UART_Start_Receive_IT+0x52>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d105      	bne.n	800d550 <UART_Start_Receive_IT+0x48>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d54a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d54e:	e02d      	b.n	800d5ac <UART_Start_Receive_IT+0xa4>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	22ff      	movs	r2, #255	; 0xff
 800d554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d558:	e028      	b.n	800d5ac <UART_Start_Receive_IT+0xa4>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10d      	bne.n	800d57e <UART_Start_Receive_IT+0x76>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d104      	bne.n	800d574 <UART_Start_Receive_IT+0x6c>
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	22ff      	movs	r2, #255	; 0xff
 800d56e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d572:	e01b      	b.n	800d5ac <UART_Start_Receive_IT+0xa4>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	227f      	movs	r2, #127	; 0x7f
 800d578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d57c:	e016      	b.n	800d5ac <UART_Start_Receive_IT+0xa4>
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d586:	d10d      	bne.n	800d5a4 <UART_Start_Receive_IT+0x9c>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d104      	bne.n	800d59a <UART_Start_Receive_IT+0x92>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	227f      	movs	r2, #127	; 0x7f
 800d594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d598:	e008      	b.n	800d5ac <UART_Start_Receive_IT+0xa4>
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	223f      	movs	r2, #63	; 0x3f
 800d59e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5a2:	e003      	b.n	800d5ac <UART_Start_Receive_IT+0xa4>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2222      	movs	r2, #34	; 0x22
 800d5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5c6:	e853 3f00 	ldrex	r3, [r3]
 800d5ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d5cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5ce:	f043 0301 	orr.w	r3, r3, #1
 800d5d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3308      	adds	r3, #8
 800d5dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d5e0:	673a      	str	r2, [r7, #112]	; 0x70
 800d5e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d5e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5e8:	e841 2300 	strex	r3, r2, [r1]
 800d5ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1e3      	bne.n	800d5bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5fc:	d153      	bne.n	800d6a6 <UART_Start_Receive_IT+0x19e>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d604:	88fa      	ldrh	r2, [r7, #6]
 800d606:	429a      	cmp	r2, r3
 800d608:	d34d      	bcc.n	800d6a6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d612:	d107      	bne.n	800d624 <UART_Start_Receive_IT+0x11c>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d103      	bne.n	800d624 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4a4b      	ldr	r2, [pc, #300]	; (800d74c <UART_Start_Receive_IT+0x244>)
 800d620:	671a      	str	r2, [r3, #112]	; 0x70
 800d622:	e002      	b.n	800d62a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	4a4a      	ldr	r2, [pc, #296]	; (800d750 <UART_Start_Receive_IT+0x248>)
 800d628:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d01a      	beq.n	800d670 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d642:	e853 3f00 	ldrex	r3, [r3]
 800d646:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d64e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	461a      	mov	r2, r3
 800d658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d65c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d65e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d660:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d662:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d664:	e841 2300 	strex	r3, r2, [r1]
 800d668:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1e4      	bne.n	800d63a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3308      	adds	r3, #8
 800d676:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d686:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3308      	adds	r3, #8
 800d68e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d690:	64ba      	str	r2, [r7, #72]	; 0x48
 800d692:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e5      	bne.n	800d670 <UART_Start_Receive_IT+0x168>
 800d6a4:	e04a      	b.n	800d73c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ae:	d107      	bne.n	800d6c0 <UART_Start_Receive_IT+0x1b8>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d103      	bne.n	800d6c0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	4a26      	ldr	r2, [pc, #152]	; (800d754 <UART_Start_Receive_IT+0x24c>)
 800d6bc:	671a      	str	r2, [r3, #112]	; 0x70
 800d6be:	e002      	b.n	800d6c6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4a25      	ldr	r2, [pc, #148]	; (800d758 <UART_Start_Receive_IT+0x250>)
 800d6c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d019      	beq.n	800d70a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	e853 3f00 	ldrex	r3, [r3]
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d6ea:	677b      	str	r3, [r7, #116]	; 0x74
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6fc:	e841 2300 	strex	r3, r2, [r1]
 800d700:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e6      	bne.n	800d6d6 <UART_Start_Receive_IT+0x1ce>
 800d708:	e018      	b.n	800d73c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	e853 3f00 	ldrex	r3, [r3]
 800d716:	613b      	str	r3, [r7, #16]
   return(result);
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	f043 0320 	orr.w	r3, r3, #32
 800d71e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d728:	623b      	str	r3, [r7, #32]
 800d72a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	69f9      	ldr	r1, [r7, #28]
 800d72e:	6a3a      	ldr	r2, [r7, #32]
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	61bb      	str	r3, [r7, #24]
   return(result);
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e6      	bne.n	800d70a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	378c      	adds	r7, #140	; 0x8c
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	0800e215 	.word	0x0800e215
 800d750:	0800df1d 	.word	0x0800df1d
 800d754:	0800ddbb 	.word	0x0800ddbb
 800d758:	0800dc5b 	.word	0x0800dc5b

0800d75c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b096      	sub	sp, #88	; 0x58
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	4613      	mov	r3, r2
 800d768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	88fa      	ldrh	r2, [r7, #6]
 800d774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2222      	movs	r2, #34	; 0x22
 800d784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d02c      	beq.n	800d7ea <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d794:	4a42      	ldr	r2, [pc, #264]	; (800d8a0 <UART_Start_Receive_DMA+0x144>)
 800d796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d79c:	4a41      	ldr	r2, [pc, #260]	; (800d8a4 <UART_Start_Receive_DMA+0x148>)
 800d79e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7a4:	4a40      	ldr	r2, [pc, #256]	; (800d8a8 <UART_Start_Receive_DMA+0x14c>)
 800d7a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3324      	adds	r3, #36	; 0x24
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	88fb      	ldrh	r3, [r7, #6]
 800d7c4:	f7fb fef2 	bl	80095ac <HAL_DMA_Start_IT>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00d      	beq.n	800d7ea <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2210      	movs	r2, #16
 800d7d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e055      	b.n	800d896 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d018      	beq.n	800d82c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d802:	e853 3f00 	ldrex	r3, [r3]
 800d806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d80e:	657b      	str	r3, [r7, #84]	; 0x54
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	461a      	mov	r2, r3
 800d816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d818:	64bb      	str	r3, [r7, #72]	; 0x48
 800d81a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d81e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d820:	e841 2300 	strex	r3, r2, [r1]
 800d824:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1e6      	bne.n	800d7fa <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3308      	adds	r3, #8
 800d832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	e853 3f00 	ldrex	r3, [r3]
 800d83a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	f043 0301 	orr.w	r3, r3, #1
 800d842:	653b      	str	r3, [r7, #80]	; 0x50
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3308      	adds	r3, #8
 800d84a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d84c:	637a      	str	r2, [r7, #52]	; 0x34
 800d84e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d854:	e841 2300 	strex	r3, r2, [r1]
 800d858:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1e5      	bne.n	800d82c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3308      	adds	r3, #8
 800d866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	e853 3f00 	ldrex	r3, [r3]
 800d86e:	613b      	str	r3, [r7, #16]
   return(result);
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d876:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3308      	adds	r3, #8
 800d87e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d880:	623a      	str	r2, [r7, #32]
 800d882:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d884:	69f9      	ldr	r1, [r7, #28]
 800d886:	6a3a      	ldr	r2, [r7, #32]
 800d888:	e841 2300 	strex	r3, r2, [r1]
 800d88c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1e5      	bne.n	800d860 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3758      	adds	r7, #88	; 0x58
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	0800d9fb 	.word	0x0800d9fb
 800d8a4:	0800db21 	.word	0x0800db21
 800d8a8:	0800db59 	.word	0x0800db59

0800d8ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b08f      	sub	sp, #60	; 0x3c
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e6      	bne.n	800d8b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	e853 3f00 	ldrex	r3, [r3]
 800d8f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d8fc:	633b      	str	r3, [r7, #48]	; 0x30
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3308      	adds	r3, #8
 800d904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d906:	61ba      	str	r2, [r7, #24]
 800d908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90a:	6979      	ldr	r1, [r7, #20]
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	613b      	str	r3, [r7, #16]
   return(result);
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1e5      	bne.n	800d8e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d922:	bf00      	nop
 800d924:	373c      	adds	r7, #60	; 0x3c
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d92e:	b480      	push	{r7}
 800d930:	b095      	sub	sp, #84	; 0x54
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d93e:	e853 3f00 	ldrex	r3, [r3]
 800d942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d94a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	461a      	mov	r2, r3
 800d952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d954:	643b      	str	r3, [r7, #64]	; 0x40
 800d956:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d95a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d95c:	e841 2300 	strex	r3, r2, [r1]
 800d960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1e6      	bne.n	800d936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3308      	adds	r3, #8
 800d96e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d970:	6a3b      	ldr	r3, [r7, #32]
 800d972:	e853 3f00 	ldrex	r3, [r3]
 800d976:	61fb      	str	r3, [r7, #28]
   return(result);
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d97e:	f023 0301 	bic.w	r3, r3, #1
 800d982:	64bb      	str	r3, [r7, #72]	; 0x48
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	3308      	adds	r3, #8
 800d98a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d98c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d98e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d994:	e841 2300 	strex	r3, r2, [r1]
 800d998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1e3      	bne.n	800d968 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d118      	bne.n	800d9da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	e853 3f00 	ldrex	r3, [r3]
 800d9b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	f023 0310 	bic.w	r3, r3, #16
 800d9bc:	647b      	str	r3, [r7, #68]	; 0x44
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9c6:	61bb      	str	r3, [r7, #24]
 800d9c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ca:	6979      	ldr	r1, [r7, #20]
 800d9cc:	69ba      	ldr	r2, [r7, #24]
 800d9ce:	e841 2300 	strex	r3, r2, [r1]
 800d9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1e6      	bne.n	800d9a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2220      	movs	r2, #32
 800d9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d9ee:	bf00      	nop
 800d9f0:	3754      	adds	r7, #84	; 0x54
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b09c      	sub	sp, #112	; 0x70
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 0320 	and.w	r3, r3, #32
 800da12:	2b00      	cmp	r3, #0
 800da14:	d171      	bne.n	800dafa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800da16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da18:	2200      	movs	r2, #0
 800da1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da26:	e853 3f00 	ldrex	r3, [r3]
 800da2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da32:	66bb      	str	r3, [r7, #104]	; 0x68
 800da34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	461a      	mov	r2, r3
 800da3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800da3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da44:	e841 2300 	strex	r3, r2, [r1]
 800da48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e6      	bne.n	800da1e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3308      	adds	r3, #8
 800da56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5a:	e853 3f00 	ldrex	r3, [r3]
 800da5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da62:	f023 0301 	bic.w	r3, r3, #1
 800da66:	667b      	str	r3, [r7, #100]	; 0x64
 800da68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3308      	adds	r3, #8
 800da6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da70:	647a      	str	r2, [r7, #68]	; 0x44
 800da72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da78:	e841 2300 	strex	r3, r2, [r1]
 800da7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1e5      	bne.n	800da50 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	3308      	adds	r3, #8
 800da8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	e853 3f00 	ldrex	r3, [r3]
 800da92:	623b      	str	r3, [r7, #32]
   return(result);
 800da94:	6a3b      	ldr	r3, [r7, #32]
 800da96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da9a:	663b      	str	r3, [r7, #96]	; 0x60
 800da9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3308      	adds	r3, #8
 800daa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800daa4:	633a      	str	r2, [r7, #48]	; 0x30
 800daa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daac:	e841 2300 	strex	r3, r2, [r1]
 800dab0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1e5      	bne.n	800da84 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daba:	2220      	movs	r2, #32
 800dabc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d118      	bne.n	800dafa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	e853 3f00 	ldrex	r3, [r3]
 800dad4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f023 0310 	bic.w	r3, r3, #16
 800dadc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dae6:	61fb      	str	r3, [r7, #28]
 800dae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	69b9      	ldr	r1, [r7, #24]
 800daec:	69fa      	ldr	r2, [r7, #28]
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	617b      	str	r3, [r7, #20]
   return(result);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e6      	bne.n	800dac8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d107      	bne.n	800db12 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db08:	4619      	mov	r1, r3
 800db0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db0c:	f7ff f86e 	bl	800cbec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db10:	e002      	b.n	800db18 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800db12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db14:	f7f8 fd28 	bl	8006568 <HAL_UART_RxCpltCallback>
}
 800db18:	bf00      	nop
 800db1a:	3770      	adds	r7, #112	; 0x70
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db32:	2b01      	cmp	r3, #1
 800db34:	d109      	bne.n	800db4a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db3c:	085b      	lsrs	r3, r3, #1
 800db3e:	b29b      	uxth	r3, r3
 800db40:	4619      	mov	r1, r3
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7ff f852 	bl	800cbec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db48:	e002      	b.n	800db50 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff f83a 	bl	800cbc4 <HAL_UART_RxHalfCpltCallback>
}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db80:	2b80      	cmp	r3, #128	; 0x80
 800db82:	d109      	bne.n	800db98 <UART_DMAError+0x40>
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	2b21      	cmp	r3, #33	; 0x21
 800db88:	d106      	bne.n	800db98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db92:	6978      	ldr	r0, [r7, #20]
 800db94:	f7ff fe8a 	bl	800d8ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba2:	2b40      	cmp	r3, #64	; 0x40
 800dba4:	d109      	bne.n	800dbba <UART_DMAError+0x62>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2b22      	cmp	r3, #34	; 0x22
 800dbaa:	d106      	bne.n	800dbba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dbb4:	6978      	ldr	r0, [r7, #20]
 800dbb6:	f7ff feba 	bl	800d92e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbc0:	f043 0210 	orr.w	r2, r3, #16
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbca:	6978      	ldr	r0, [r7, #20]
 800dbcc:	f7ff f804 	bl	800cbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbd0:	bf00      	nop
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f7fe ffee 	bl	800cbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbfc:	bf00      	nop
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc20:	61fb      	str	r3, [r7, #28]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	61bb      	str	r3, [r7, #24]
 800dc2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2e:	6979      	ldr	r1, [r7, #20]
 800dc30:	69ba      	ldr	r2, [r7, #24]
 800dc32:	e841 2300 	strex	r3, r2, [r1]
 800dc36:	613b      	str	r3, [r7, #16]
   return(result);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1e6      	bne.n	800dc0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2220      	movs	r2, #32
 800dc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7fe ffaf 	bl	800cbb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc52:	bf00      	nop
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b096      	sub	sp, #88	; 0x58
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc72:	2b22      	cmp	r3, #34	; 0x22
 800dc74:	f040 8095 	bne.w	800dda2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc82:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800dc86:	b2d9      	uxtb	r1, r3
 800dc88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc92:	400a      	ands	r2, r1
 800dc94:	b2d2      	uxtb	r2, r2
 800dc96:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d178      	bne.n	800ddb2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcd4:	653b      	str	r3, [r7, #80]	; 0x50
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcde:	647b      	str	r3, [r7, #68]	; 0x44
 800dce0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dce6:	e841 2300 	strex	r3, r2, [r1]
 800dcea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e6      	bne.n	800dcc0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	623b      	str	r3, [r7, #32]
   return(result);
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	f023 0301 	bic.w	r3, r3, #1
 800dd08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd12:	633a      	str	r2, [r7, #48]	; 0x30
 800dd14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e5      	bne.n	800dcf2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d12e      	bne.n	800dd9a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	e853 3f00 	ldrex	r3, [r3]
 800dd4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f023 0310 	bic.w	r3, r3, #16
 800dd56:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd60:	61fb      	str	r3, [r7, #28]
 800dd62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd64:	69b9      	ldr	r1, [r7, #24]
 800dd66:	69fa      	ldr	r2, [r7, #28]
 800dd68:	e841 2300 	strex	r3, r2, [r1]
 800dd6c:	617b      	str	r3, [r7, #20]
   return(result);
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1e6      	bne.n	800dd42 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	f003 0310 	and.w	r3, r3, #16
 800dd7e:	2b10      	cmp	r3, #16
 800dd80:	d103      	bne.n	800dd8a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2210      	movs	r2, #16
 800dd88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7fe ff2a 	bl	800cbec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd98:	e00b      	b.n	800ddb2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7f8 fbe4 	bl	8006568 <HAL_UART_RxCpltCallback>
}
 800dda0:	e007      	b.n	800ddb2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	699a      	ldr	r2, [r3, #24]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f042 0208 	orr.w	r2, r2, #8
 800ddb0:	619a      	str	r2, [r3, #24]
}
 800ddb2:	bf00      	nop
 800ddb4:	3758      	adds	r7, #88	; 0x58
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b096      	sub	sp, #88	; 0x58
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddd2:	2b22      	cmp	r3, #34	; 0x22
 800ddd4:	f040 8095 	bne.w	800df02 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dde6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dde8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ddec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddf6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddfc:	1c9a      	adds	r2, r3, #2
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de08:	b29b      	uxth	r3, r3
 800de0a:	3b01      	subs	r3, #1
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d178      	bne.n	800df12 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de28:	e853 3f00 	ldrex	r3, [r3]
 800de2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	461a      	mov	r2, r3
 800de3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3e:	643b      	str	r3, [r7, #64]	; 0x40
 800de40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de46:	e841 2300 	strex	r3, r2, [r1]
 800de4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1e6      	bne.n	800de20 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3308      	adds	r3, #8
 800de58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	e853 3f00 	ldrex	r3, [r3]
 800de60:	61fb      	str	r3, [r7, #28]
   return(result);
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	f023 0301 	bic.w	r3, r3, #1
 800de68:	64bb      	str	r3, [r7, #72]	; 0x48
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3308      	adds	r3, #8
 800de70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de7a:	e841 2300 	strex	r3, r2, [r1]
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e5      	bne.n	800de52 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d12e      	bne.n	800defa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	e853 3f00 	ldrex	r3, [r3]
 800deae:	60bb      	str	r3, [r7, #8]
   return(result);
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f023 0310 	bic.w	r3, r3, #16
 800deb6:	647b      	str	r3, [r7, #68]	; 0x44
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec0:	61bb      	str	r3, [r7, #24]
 800dec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	6979      	ldr	r1, [r7, #20]
 800dec6:	69ba      	ldr	r2, [r7, #24]
 800dec8:	e841 2300 	strex	r3, r2, [r1]
 800decc:	613b      	str	r3, [r7, #16]
   return(result);
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e6      	bne.n	800dea2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	69db      	ldr	r3, [r3, #28]
 800deda:	f003 0310 	and.w	r3, r3, #16
 800dede:	2b10      	cmp	r3, #16
 800dee0:	d103      	bne.n	800deea <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2210      	movs	r2, #16
 800dee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800def0:	4619      	mov	r1, r3
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7fe fe7a 	bl	800cbec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800def8:	e00b      	b.n	800df12 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7f8 fb34 	bl	8006568 <HAL_UART_RxCpltCallback>
}
 800df00:	e007      	b.n	800df12 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699a      	ldr	r2, [r3, #24]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f042 0208 	orr.w	r2, r2, #8
 800df10:	619a      	str	r2, [r3, #24]
}
 800df12:	bf00      	nop
 800df14:	3758      	adds	r7, #88	; 0x58
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
	...

0800df1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b0a6      	sub	sp, #152	; 0x98
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df2a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	69db      	ldr	r3, [r3, #28]
 800df34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df52:	2b22      	cmp	r3, #34	; 0x22
 800df54:	f040 814f 	bne.w	800e1f6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df5e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df62:	e0f6      	b.n	800e152 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800df6e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800df72:	b2d9      	uxtb	r1, r3
 800df74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df7e:	400a      	ands	r2, r1
 800df80:	b2d2      	uxtb	r2, r2
 800df82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df94:	b29b      	uxth	r3, r3
 800df96:	3b01      	subs	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	69db      	ldr	r3, [r3, #28]
 800dfa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dfaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfae:	f003 0307 	and.w	r3, r3, #7
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d053      	beq.n	800e05e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dfb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfba:	f003 0301 	and.w	r3, r3, #1
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d011      	beq.n	800dfe6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800dfc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00b      	beq.n	800dfe6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfdc:	f043 0201 	orr.w	r2, r3, #1
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d011      	beq.n	800e016 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dff6:	f003 0301 	and.w	r3, r3, #1
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00b      	beq.n	800e016 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2202      	movs	r2, #2
 800e004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e00c:	f043 0204 	orr.w	r2, r3, #4
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e016:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e01a:	f003 0304 	and.w	r3, r3, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d011      	beq.n	800e046 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00b      	beq.n	800e046 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2204      	movs	r2, #4
 800e034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e03c:	f043 0202 	orr.w	r2, r3, #2
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d006      	beq.n	800e05e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7fe fdc1 	bl	800cbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e064:	b29b      	uxth	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d173      	bne.n	800e152 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e072:	e853 3f00 	ldrex	r3, [r3]
 800e076:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e07a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e07e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	461a      	mov	r2, r3
 800e088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e08c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e08e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e090:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e094:	e841 2300 	strex	r3, r2, [r1]
 800e098:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e09a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1e4      	bne.n	800e06a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	3308      	adds	r3, #8
 800e0a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0aa:	e853 3f00 	ldrex	r3, [r3]
 800e0ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e0b6:	f023 0301 	bic.w	r3, r3, #1
 800e0ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e0c4:	657a      	str	r2, [r7, #84]	; 0x54
 800e0c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0cc:	e841 2300 	strex	r3, r2, [r1]
 800e0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1e3      	bne.n	800e0a0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2220      	movs	r2, #32
 800e0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d12e      	bne.n	800e14c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fc:	e853 3f00 	ldrex	r3, [r3]
 800e100:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	f023 0310 	bic.w	r3, r3, #16
 800e108:	67bb      	str	r3, [r7, #120]	; 0x78
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e112:	643b      	str	r3, [r7, #64]	; 0x40
 800e114:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e11a:	e841 2300 	strex	r3, r2, [r1]
 800e11e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1e6      	bne.n	800e0f4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	69db      	ldr	r3, [r3, #28]
 800e12c:	f003 0310 	and.w	r3, r3, #16
 800e130:	2b10      	cmp	r3, #16
 800e132:	d103      	bne.n	800e13c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2210      	movs	r2, #16
 800e13a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e142:	4619      	mov	r1, r3
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7fe fd51 	bl	800cbec <HAL_UARTEx_RxEventCallback>
 800e14a:	e002      	b.n	800e152 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7f8 fa0b 	bl	8006568 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800e15a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e15e:	f003 0320 	and.w	r3, r3, #32
 800e162:	2b00      	cmp	r3, #0
 800e164:	f47f aefe 	bne.w	800df64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e16e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e172:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e176:	2b00      	cmp	r3, #0
 800e178:	d045      	beq.n	800e206 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e180:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e184:	429a      	cmp	r2, r3
 800e186:	d23e      	bcs.n	800e206 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3308      	adds	r3, #8
 800e18e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	e853 3f00 	ldrex	r3, [r3]
 800e196:	61fb      	str	r3, [r7, #28]
   return(result);
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e19e:	673b      	str	r3, [r7, #112]	; 0x70
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e1a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1b0:	e841 2300 	strex	r3, r2, [r1]
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1e5      	bne.n	800e188 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4a14      	ldr	r2, [pc, #80]	; (800e210 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e1c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	e853 3f00 	ldrex	r3, [r3]
 800e1ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	f043 0320 	orr.w	r3, r3, #32
 800e1d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	461a      	mov	r2, r3
 800e1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1e0:	61bb      	str	r3, [r7, #24]
 800e1e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e4:	6979      	ldr	r1, [r7, #20]
 800e1e6:	69ba      	ldr	r2, [r7, #24]
 800e1e8:	e841 2300 	strex	r3, r2, [r1]
 800e1ec:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1e6      	bne.n	800e1c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e1f4:	e007      	b.n	800e206 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	699a      	ldr	r2, [r3, #24]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f042 0208 	orr.w	r2, r2, #8
 800e204:	619a      	str	r2, [r3, #24]
}
 800e206:	bf00      	nop
 800e208:	3798      	adds	r7, #152	; 0x98
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	0800dc5b 	.word	0x0800dc5b

0800e214 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b0a8      	sub	sp, #160	; 0xa0
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e222:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	69db      	ldr	r3, [r3, #28]
 800e22c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e24a:	2b22      	cmp	r3, #34	; 0x22
 800e24c:	f040 8153 	bne.w	800e4f6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e256:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e25a:	e0fa      	b.n	800e452 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e262:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e26a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e26e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e272:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e276:	4013      	ands	r3, r2
 800e278:	b29a      	uxth	r2, r3
 800e27a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e27e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e284:	1c9a      	adds	r2, r3, #2
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e290:	b29b      	uxth	r3, r3
 800e292:	3b01      	subs	r3, #1
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e2a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2aa:	f003 0307 	and.w	r3, r3, #7
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d053      	beq.n	800e35a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e2b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2b6:	f003 0301 	and.w	r3, r3, #1
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d011      	beq.n	800e2e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e2be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00b      	beq.n	800e2e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2d8:	f043 0201 	orr.w	r2, r3, #1
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2e6:	f003 0302 	and.w	r3, r3, #2
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d011      	beq.n	800e312 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e2ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2f2:	f003 0301 	and.w	r3, r3, #1
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2202      	movs	r2, #2
 800e300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e308:	f043 0204 	orr.w	r2, r3, #4
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e316:	f003 0304 	and.w	r3, r3, #4
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d011      	beq.n	800e342 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e31e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00b      	beq.n	800e342 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2204      	movs	r2, #4
 800e330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e338:	f043 0202 	orr.w	r2, r3, #2
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d006      	beq.n	800e35a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7fe fc43 	bl	800cbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e360:	b29b      	uxth	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d175      	bne.n	800e452 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e36e:	e853 3f00 	ldrex	r3, [r3]
 800e372:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e37a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	461a      	mov	r2, r3
 800e384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e38a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e38e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e390:	e841 2300 	strex	r3, r2, [r1]
 800e394:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1e4      	bne.n	800e366 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3a6:	e853 3f00 	ldrex	r3, [r3]
 800e3aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e3b2:	f023 0301 	bic.w	r3, r3, #1
 800e3b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e3c4:	65ba      	str	r2, [r7, #88]	; 0x58
 800e3c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3cc:	e841 2300 	strex	r3, r2, [r1]
 800e3d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1e1      	bne.n	800e39c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2220      	movs	r2, #32
 800e3dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d12e      	bne.n	800e44c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fc:	e853 3f00 	ldrex	r3, [r3]
 800e400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e404:	f023 0310 	bic.w	r3, r3, #16
 800e408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e412:	647b      	str	r3, [r7, #68]	; 0x44
 800e414:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1e6      	bne.n	800e3f4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	69db      	ldr	r3, [r3, #28]
 800e42c:	f003 0310 	and.w	r3, r3, #16
 800e430:	2b10      	cmp	r3, #16
 800e432:	d103      	bne.n	800e43c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2210      	movs	r2, #16
 800e43a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fe fbd1 	bl	800cbec <HAL_UARTEx_RxEventCallback>
 800e44a:	e002      	b.n	800e452 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7f8 f88b 	bl	8006568 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e452:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e456:	2b00      	cmp	r3, #0
 800e458:	d006      	beq.n	800e468 <UART_RxISR_16BIT_FIFOEN+0x254>
 800e45a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e45e:	f003 0320 	and.w	r3, r3, #32
 800e462:	2b00      	cmp	r3, #0
 800e464:	f47f aefa 	bne.w	800e25c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e46e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e472:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e476:	2b00      	cmp	r3, #0
 800e478:	d045      	beq.n	800e506 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e480:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e484:	429a      	cmp	r2, r3
 800e486:	d23e      	bcs.n	800e506 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3308      	adds	r3, #8
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	e853 3f00 	ldrex	r3, [r3]
 800e496:	623b      	str	r3, [r7, #32]
   return(result);
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e49e:	677b      	str	r3, [r7, #116]	; 0x74
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3308      	adds	r3, #8
 800e4a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e4a8:	633a      	str	r2, [r7, #48]	; 0x30
 800e4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b0:	e841 2300 	strex	r3, r2, [r1]
 800e4b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1e5      	bne.n	800e488 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a14      	ldr	r2, [pc, #80]	; (800e510 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e4c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	e853 3f00 	ldrex	r3, [r3]
 800e4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f043 0320 	orr.w	r3, r3, #32
 800e4d6:	673b      	str	r3, [r7, #112]	; 0x70
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4e0:	61fb      	str	r3, [r7, #28]
 800e4e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e4:	69b9      	ldr	r1, [r7, #24]
 800e4e6:	69fa      	ldr	r2, [r7, #28]
 800e4e8:	e841 2300 	strex	r3, r2, [r1]
 800e4ec:	617b      	str	r3, [r7, #20]
   return(result);
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1e6      	bne.n	800e4c2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e4f4:	e007      	b.n	800e506 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	699a      	ldr	r2, [r3, #24]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f042 0208 	orr.w	r2, r2, #8
 800e504:	619a      	str	r2, [r3, #24]
}
 800e506:	bf00      	nop
 800e508:	37a0      	adds	r7, #160	; 0xa0
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	0800ddbb 	.word	0x0800ddbb

0800e514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e544:	bf00      	nop
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d101      	bne.n	800e566 <HAL_UARTEx_DisableFifoMode+0x16>
 800e562:	2302      	movs	r3, #2
 800e564:	e027      	b.n	800e5b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2224      	movs	r2, #36	; 0x24
 800e572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f022 0201 	bic.w	r2, r2, #1
 800e58c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e594:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2220      	movs	r2, #32
 800e5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d101      	bne.n	800e5da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	e02d      	b.n	800e636 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2224      	movs	r2, #36	; 0x24
 800e5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f022 0201 	bic.w	r2, r2, #1
 800e600:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	430a      	orrs	r2, r1
 800e614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 f850 	bl	800e6bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2220      	movs	r2, #32
 800e628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d101      	bne.n	800e656 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e652:	2302      	movs	r3, #2
 800e654:	e02d      	b.n	800e6b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2224      	movs	r2, #36	; 0x24
 800e662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f022 0201 	bic.w	r2, r2, #1
 800e67c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	689b      	ldr	r3, [r3, #8]
 800e684:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	430a      	orrs	r2, r1
 800e690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f812 	bl	800e6bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2220      	movs	r2, #32
 800e6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
	...

0800e6bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d108      	bne.n	800e6de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e6dc:	e031      	b.n	800e742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e6de:	2308      	movs	r3, #8
 800e6e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e6e2:	2308      	movs	r3, #8
 800e6e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	0e5b      	lsrs	r3, r3, #25
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	f003 0307 	and.w	r3, r3, #7
 800e6f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	0f5b      	lsrs	r3, r3, #29
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	f003 0307 	and.w	r3, r3, #7
 800e704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e706:	7bbb      	ldrb	r3, [r7, #14]
 800e708:	7b3a      	ldrb	r2, [r7, #12]
 800e70a:	4911      	ldr	r1, [pc, #68]	; (800e750 <UARTEx_SetNbDataToProcess+0x94>)
 800e70c:	5c8a      	ldrb	r2, [r1, r2]
 800e70e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e712:	7b3a      	ldrb	r2, [r7, #12]
 800e714:	490f      	ldr	r1, [pc, #60]	; (800e754 <UARTEx_SetNbDataToProcess+0x98>)
 800e716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e718:	fb93 f3f2 	sdiv	r3, r3, r2
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e724:	7bfb      	ldrb	r3, [r7, #15]
 800e726:	7b7a      	ldrb	r2, [r7, #13]
 800e728:	4909      	ldr	r1, [pc, #36]	; (800e750 <UARTEx_SetNbDataToProcess+0x94>)
 800e72a:	5c8a      	ldrb	r2, [r1, r2]
 800e72c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e730:	7b7a      	ldrb	r2, [r7, #13]
 800e732:	4908      	ldr	r1, [pc, #32]	; (800e754 <UARTEx_SetNbDataToProcess+0x98>)
 800e734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e736:	fb93 f3f2 	sdiv	r3, r3, r2
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e742:	bf00      	nop
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	080134b4 	.word	0x080134b4
 800e754:	080134bc 	.word	0x080134bc

0800e758 <atoi>:
 800e758:	220a      	movs	r2, #10
 800e75a:	2100      	movs	r1, #0
 800e75c:	f000 b884 	b.w	800e868 <strtol>

0800e760 <_strtol_l.constprop.0>:
 800e760:	2b01      	cmp	r3, #1
 800e762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e766:	d001      	beq.n	800e76c <_strtol_l.constprop.0+0xc>
 800e768:	2b24      	cmp	r3, #36	; 0x24
 800e76a:	d906      	bls.n	800e77a <_strtol_l.constprop.0+0x1a>
 800e76c:	f001 f88a 	bl	800f884 <__errno>
 800e770:	2316      	movs	r3, #22
 800e772:	6003      	str	r3, [r0, #0]
 800e774:	2000      	movs	r0, #0
 800e776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e860 <_strtol_l.constprop.0+0x100>
 800e77e:	460d      	mov	r5, r1
 800e780:	462e      	mov	r6, r5
 800e782:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e786:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e78a:	f017 0708 	ands.w	r7, r7, #8
 800e78e:	d1f7      	bne.n	800e780 <_strtol_l.constprop.0+0x20>
 800e790:	2c2d      	cmp	r4, #45	; 0x2d
 800e792:	d132      	bne.n	800e7fa <_strtol_l.constprop.0+0x9a>
 800e794:	782c      	ldrb	r4, [r5, #0]
 800e796:	2701      	movs	r7, #1
 800e798:	1cb5      	adds	r5, r6, #2
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d05b      	beq.n	800e856 <_strtol_l.constprop.0+0xf6>
 800e79e:	2b10      	cmp	r3, #16
 800e7a0:	d109      	bne.n	800e7b6 <_strtol_l.constprop.0+0x56>
 800e7a2:	2c30      	cmp	r4, #48	; 0x30
 800e7a4:	d107      	bne.n	800e7b6 <_strtol_l.constprop.0+0x56>
 800e7a6:	782c      	ldrb	r4, [r5, #0]
 800e7a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e7ac:	2c58      	cmp	r4, #88	; 0x58
 800e7ae:	d14d      	bne.n	800e84c <_strtol_l.constprop.0+0xec>
 800e7b0:	786c      	ldrb	r4, [r5, #1]
 800e7b2:	2310      	movs	r3, #16
 800e7b4:	3502      	adds	r5, #2
 800e7b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e7ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7be:	f04f 0e00 	mov.w	lr, #0
 800e7c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800e7c6:	4676      	mov	r6, lr
 800e7c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800e7cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e7d0:	f1bc 0f09 	cmp.w	ip, #9
 800e7d4:	d816      	bhi.n	800e804 <_strtol_l.constprop.0+0xa4>
 800e7d6:	4664      	mov	r4, ip
 800e7d8:	42a3      	cmp	r3, r4
 800e7da:	dd24      	ble.n	800e826 <_strtol_l.constprop.0+0xc6>
 800e7dc:	f1be 3fff 	cmp.w	lr, #4294967295
 800e7e0:	d008      	beq.n	800e7f4 <_strtol_l.constprop.0+0x94>
 800e7e2:	45b1      	cmp	r9, r6
 800e7e4:	d31c      	bcc.n	800e820 <_strtol_l.constprop.0+0xc0>
 800e7e6:	d101      	bne.n	800e7ec <_strtol_l.constprop.0+0x8c>
 800e7e8:	45a2      	cmp	sl, r4
 800e7ea:	db19      	blt.n	800e820 <_strtol_l.constprop.0+0xc0>
 800e7ec:	fb06 4603 	mla	r6, r6, r3, r4
 800e7f0:	f04f 0e01 	mov.w	lr, #1
 800e7f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7f8:	e7e8      	b.n	800e7cc <_strtol_l.constprop.0+0x6c>
 800e7fa:	2c2b      	cmp	r4, #43	; 0x2b
 800e7fc:	bf04      	itt	eq
 800e7fe:	782c      	ldrbeq	r4, [r5, #0]
 800e800:	1cb5      	addeq	r5, r6, #2
 800e802:	e7ca      	b.n	800e79a <_strtol_l.constprop.0+0x3a>
 800e804:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e808:	f1bc 0f19 	cmp.w	ip, #25
 800e80c:	d801      	bhi.n	800e812 <_strtol_l.constprop.0+0xb2>
 800e80e:	3c37      	subs	r4, #55	; 0x37
 800e810:	e7e2      	b.n	800e7d8 <_strtol_l.constprop.0+0x78>
 800e812:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e816:	f1bc 0f19 	cmp.w	ip, #25
 800e81a:	d804      	bhi.n	800e826 <_strtol_l.constprop.0+0xc6>
 800e81c:	3c57      	subs	r4, #87	; 0x57
 800e81e:	e7db      	b.n	800e7d8 <_strtol_l.constprop.0+0x78>
 800e820:	f04f 3eff 	mov.w	lr, #4294967295
 800e824:	e7e6      	b.n	800e7f4 <_strtol_l.constprop.0+0x94>
 800e826:	f1be 3fff 	cmp.w	lr, #4294967295
 800e82a:	d105      	bne.n	800e838 <_strtol_l.constprop.0+0xd8>
 800e82c:	2322      	movs	r3, #34	; 0x22
 800e82e:	6003      	str	r3, [r0, #0]
 800e830:	4646      	mov	r6, r8
 800e832:	b942      	cbnz	r2, 800e846 <_strtol_l.constprop.0+0xe6>
 800e834:	4630      	mov	r0, r6
 800e836:	e79e      	b.n	800e776 <_strtol_l.constprop.0+0x16>
 800e838:	b107      	cbz	r7, 800e83c <_strtol_l.constprop.0+0xdc>
 800e83a:	4276      	negs	r6, r6
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	d0f9      	beq.n	800e834 <_strtol_l.constprop.0+0xd4>
 800e840:	f1be 0f00 	cmp.w	lr, #0
 800e844:	d000      	beq.n	800e848 <_strtol_l.constprop.0+0xe8>
 800e846:	1e69      	subs	r1, r5, #1
 800e848:	6011      	str	r1, [r2, #0]
 800e84a:	e7f3      	b.n	800e834 <_strtol_l.constprop.0+0xd4>
 800e84c:	2430      	movs	r4, #48	; 0x30
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1b1      	bne.n	800e7b6 <_strtol_l.constprop.0+0x56>
 800e852:	2308      	movs	r3, #8
 800e854:	e7af      	b.n	800e7b6 <_strtol_l.constprop.0+0x56>
 800e856:	2c30      	cmp	r4, #48	; 0x30
 800e858:	d0a5      	beq.n	800e7a6 <_strtol_l.constprop.0+0x46>
 800e85a:	230a      	movs	r3, #10
 800e85c:	e7ab      	b.n	800e7b6 <_strtol_l.constprop.0+0x56>
 800e85e:	bf00      	nop
 800e860:	080134c5 	.word	0x080134c5

0800e864 <_strtol_r>:
 800e864:	f7ff bf7c 	b.w	800e760 <_strtol_l.constprop.0>

0800e868 <strtol>:
 800e868:	4613      	mov	r3, r2
 800e86a:	460a      	mov	r2, r1
 800e86c:	4601      	mov	r1, r0
 800e86e:	4802      	ldr	r0, [pc, #8]	; (800e878 <strtol+0x10>)
 800e870:	6800      	ldr	r0, [r0, #0]
 800e872:	f7ff bf75 	b.w	800e760 <_strtol_l.constprop.0>
 800e876:	bf00      	nop
 800e878:	20000064 	.word	0x20000064

0800e87c <__cvt>:
 800e87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e880:	ec55 4b10 	vmov	r4, r5, d0
 800e884:	2d00      	cmp	r5, #0
 800e886:	460e      	mov	r6, r1
 800e888:	4619      	mov	r1, r3
 800e88a:	462b      	mov	r3, r5
 800e88c:	bfbb      	ittet	lt
 800e88e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e892:	461d      	movlt	r5, r3
 800e894:	2300      	movge	r3, #0
 800e896:	232d      	movlt	r3, #45	; 0x2d
 800e898:	700b      	strb	r3, [r1, #0]
 800e89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e89c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e8a0:	4691      	mov	r9, r2
 800e8a2:	f023 0820 	bic.w	r8, r3, #32
 800e8a6:	bfbc      	itt	lt
 800e8a8:	4622      	movlt	r2, r4
 800e8aa:	4614      	movlt	r4, r2
 800e8ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8b0:	d005      	beq.n	800e8be <__cvt+0x42>
 800e8b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e8b6:	d100      	bne.n	800e8ba <__cvt+0x3e>
 800e8b8:	3601      	adds	r6, #1
 800e8ba:	2102      	movs	r1, #2
 800e8bc:	e000      	b.n	800e8c0 <__cvt+0x44>
 800e8be:	2103      	movs	r1, #3
 800e8c0:	ab03      	add	r3, sp, #12
 800e8c2:	9301      	str	r3, [sp, #4]
 800e8c4:	ab02      	add	r3, sp, #8
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	ec45 4b10 	vmov	d0, r4, r5
 800e8cc:	4653      	mov	r3, sl
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	f001 f8a2 	bl	800fa18 <_dtoa_r>
 800e8d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e8d8:	4607      	mov	r7, r0
 800e8da:	d102      	bne.n	800e8e2 <__cvt+0x66>
 800e8dc:	f019 0f01 	tst.w	r9, #1
 800e8e0:	d022      	beq.n	800e928 <__cvt+0xac>
 800e8e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8e6:	eb07 0906 	add.w	r9, r7, r6
 800e8ea:	d110      	bne.n	800e90e <__cvt+0x92>
 800e8ec:	783b      	ldrb	r3, [r7, #0]
 800e8ee:	2b30      	cmp	r3, #48	; 0x30
 800e8f0:	d10a      	bne.n	800e908 <__cvt+0x8c>
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f2 f90d 	bl	8000b18 <__aeabi_dcmpeq>
 800e8fe:	b918      	cbnz	r0, 800e908 <__cvt+0x8c>
 800e900:	f1c6 0601 	rsb	r6, r6, #1
 800e904:	f8ca 6000 	str.w	r6, [sl]
 800e908:	f8da 3000 	ldr.w	r3, [sl]
 800e90c:	4499      	add	r9, r3
 800e90e:	2200      	movs	r2, #0
 800e910:	2300      	movs	r3, #0
 800e912:	4620      	mov	r0, r4
 800e914:	4629      	mov	r1, r5
 800e916:	f7f2 f8ff 	bl	8000b18 <__aeabi_dcmpeq>
 800e91a:	b108      	cbz	r0, 800e920 <__cvt+0xa4>
 800e91c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e920:	2230      	movs	r2, #48	; 0x30
 800e922:	9b03      	ldr	r3, [sp, #12]
 800e924:	454b      	cmp	r3, r9
 800e926:	d307      	bcc.n	800e938 <__cvt+0xbc>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e92c:	1bdb      	subs	r3, r3, r7
 800e92e:	4638      	mov	r0, r7
 800e930:	6013      	str	r3, [r2, #0]
 800e932:	b004      	add	sp, #16
 800e934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e938:	1c59      	adds	r1, r3, #1
 800e93a:	9103      	str	r1, [sp, #12]
 800e93c:	701a      	strb	r2, [r3, #0]
 800e93e:	e7f0      	b.n	800e922 <__cvt+0xa6>

0800e940 <__exponent>:
 800e940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e942:	4603      	mov	r3, r0
 800e944:	2900      	cmp	r1, #0
 800e946:	bfb8      	it	lt
 800e948:	4249      	neglt	r1, r1
 800e94a:	f803 2b02 	strb.w	r2, [r3], #2
 800e94e:	bfb4      	ite	lt
 800e950:	222d      	movlt	r2, #45	; 0x2d
 800e952:	222b      	movge	r2, #43	; 0x2b
 800e954:	2909      	cmp	r1, #9
 800e956:	7042      	strb	r2, [r0, #1]
 800e958:	dd2a      	ble.n	800e9b0 <__exponent+0x70>
 800e95a:	f10d 0207 	add.w	r2, sp, #7
 800e95e:	4617      	mov	r7, r2
 800e960:	260a      	movs	r6, #10
 800e962:	4694      	mov	ip, r2
 800e964:	fb91 f5f6 	sdiv	r5, r1, r6
 800e968:	fb06 1415 	mls	r4, r6, r5, r1
 800e96c:	3430      	adds	r4, #48	; 0x30
 800e96e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e972:	460c      	mov	r4, r1
 800e974:	2c63      	cmp	r4, #99	; 0x63
 800e976:	f102 32ff 	add.w	r2, r2, #4294967295
 800e97a:	4629      	mov	r1, r5
 800e97c:	dcf1      	bgt.n	800e962 <__exponent+0x22>
 800e97e:	3130      	adds	r1, #48	; 0x30
 800e980:	f1ac 0402 	sub.w	r4, ip, #2
 800e984:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e988:	1c41      	adds	r1, r0, #1
 800e98a:	4622      	mov	r2, r4
 800e98c:	42ba      	cmp	r2, r7
 800e98e:	d30a      	bcc.n	800e9a6 <__exponent+0x66>
 800e990:	f10d 0209 	add.w	r2, sp, #9
 800e994:	eba2 020c 	sub.w	r2, r2, ip
 800e998:	42bc      	cmp	r4, r7
 800e99a:	bf88      	it	hi
 800e99c:	2200      	movhi	r2, #0
 800e99e:	4413      	add	r3, r2
 800e9a0:	1a18      	subs	r0, r3, r0
 800e9a2:	b003      	add	sp, #12
 800e9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e9aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e9ae:	e7ed      	b.n	800e98c <__exponent+0x4c>
 800e9b0:	2330      	movs	r3, #48	; 0x30
 800e9b2:	3130      	adds	r1, #48	; 0x30
 800e9b4:	7083      	strb	r3, [r0, #2]
 800e9b6:	70c1      	strb	r1, [r0, #3]
 800e9b8:	1d03      	adds	r3, r0, #4
 800e9ba:	e7f1      	b.n	800e9a0 <__exponent+0x60>

0800e9bc <_printf_float>:
 800e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	ed2d 8b02 	vpush	{d8}
 800e9c4:	b08d      	sub	sp, #52	; 0x34
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e9cc:	4616      	mov	r6, r2
 800e9ce:	461f      	mov	r7, r3
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	f000 ff0d 	bl	800f7f0 <_localeconv_r>
 800e9d6:	f8d0 a000 	ldr.w	sl, [r0]
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f7f1 fc70 	bl	80002c0 <strlen>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	9305      	str	r3, [sp, #20]
 800e9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e9f0:	3307      	adds	r3, #7
 800e9f2:	f023 0307 	bic.w	r3, r3, #7
 800e9f6:	f103 0208 	add.w	r2, r3, #8
 800e9fa:	f8c8 2000 	str.w	r2, [r8]
 800e9fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea06:	9307      	str	r3, [sp, #28]
 800ea08:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea0c:	ee08 0a10 	vmov	s16, r0
 800ea10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ea14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea18:	4b9e      	ldr	r3, [pc, #632]	; (800ec94 <_printf_float+0x2d8>)
 800ea1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1e:	f7f2 f8ad 	bl	8000b7c <__aeabi_dcmpun>
 800ea22:	bb88      	cbnz	r0, 800ea88 <_printf_float+0xcc>
 800ea24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea28:	4b9a      	ldr	r3, [pc, #616]	; (800ec94 <_printf_float+0x2d8>)
 800ea2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2e:	f7f2 f887 	bl	8000b40 <__aeabi_dcmple>
 800ea32:	bb48      	cbnz	r0, 800ea88 <_printf_float+0xcc>
 800ea34:	2200      	movs	r2, #0
 800ea36:	2300      	movs	r3, #0
 800ea38:	4640      	mov	r0, r8
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	f7f2 f876 	bl	8000b2c <__aeabi_dcmplt>
 800ea40:	b110      	cbz	r0, 800ea48 <_printf_float+0x8c>
 800ea42:	232d      	movs	r3, #45	; 0x2d
 800ea44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea48:	4a93      	ldr	r2, [pc, #588]	; (800ec98 <_printf_float+0x2dc>)
 800ea4a:	4b94      	ldr	r3, [pc, #592]	; (800ec9c <_printf_float+0x2e0>)
 800ea4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ea50:	bf94      	ite	ls
 800ea52:	4690      	movls	r8, r2
 800ea54:	4698      	movhi	r8, r3
 800ea56:	2303      	movs	r3, #3
 800ea58:	6123      	str	r3, [r4, #16]
 800ea5a:	9b05      	ldr	r3, [sp, #20]
 800ea5c:	f023 0304 	bic.w	r3, r3, #4
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	f04f 0900 	mov.w	r9, #0
 800ea66:	9700      	str	r7, [sp, #0]
 800ea68:	4633      	mov	r3, r6
 800ea6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f000 f9da 	bl	800ee28 <_printf_common>
 800ea74:	3001      	adds	r0, #1
 800ea76:	f040 8090 	bne.w	800eb9a <_printf_float+0x1de>
 800ea7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7e:	b00d      	add	sp, #52	; 0x34
 800ea80:	ecbd 8b02 	vpop	{d8}
 800ea84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea88:	4642      	mov	r2, r8
 800ea8a:	464b      	mov	r3, r9
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4649      	mov	r1, r9
 800ea90:	f7f2 f874 	bl	8000b7c <__aeabi_dcmpun>
 800ea94:	b140      	cbz	r0, 800eaa8 <_printf_float+0xec>
 800ea96:	464b      	mov	r3, r9
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bfbc      	itt	lt
 800ea9c:	232d      	movlt	r3, #45	; 0x2d
 800ea9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eaa2:	4a7f      	ldr	r2, [pc, #508]	; (800eca0 <_printf_float+0x2e4>)
 800eaa4:	4b7f      	ldr	r3, [pc, #508]	; (800eca4 <_printf_float+0x2e8>)
 800eaa6:	e7d1      	b.n	800ea4c <_printf_float+0x90>
 800eaa8:	6863      	ldr	r3, [r4, #4]
 800eaaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eaae:	9206      	str	r2, [sp, #24]
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	d13f      	bne.n	800eb34 <_printf_float+0x178>
 800eab4:	2306      	movs	r3, #6
 800eab6:	6063      	str	r3, [r4, #4]
 800eab8:	9b05      	ldr	r3, [sp, #20]
 800eaba:	6861      	ldr	r1, [r4, #4]
 800eabc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eac0:	2300      	movs	r3, #0
 800eac2:	9303      	str	r3, [sp, #12]
 800eac4:	ab0a      	add	r3, sp, #40	; 0x28
 800eac6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eaca:	ab09      	add	r3, sp, #36	; 0x24
 800eacc:	ec49 8b10 	vmov	d0, r8, r9
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	6022      	str	r2, [r4, #0]
 800ead4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ead8:	4628      	mov	r0, r5
 800eada:	f7ff fecf 	bl	800e87c <__cvt>
 800eade:	9b06      	ldr	r3, [sp, #24]
 800eae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eae2:	2b47      	cmp	r3, #71	; 0x47
 800eae4:	4680      	mov	r8, r0
 800eae6:	d108      	bne.n	800eafa <_printf_float+0x13e>
 800eae8:	1cc8      	adds	r0, r1, #3
 800eaea:	db02      	blt.n	800eaf2 <_printf_float+0x136>
 800eaec:	6863      	ldr	r3, [r4, #4]
 800eaee:	4299      	cmp	r1, r3
 800eaf0:	dd41      	ble.n	800eb76 <_printf_float+0x1ba>
 800eaf2:	f1ab 0302 	sub.w	r3, fp, #2
 800eaf6:	fa5f fb83 	uxtb.w	fp, r3
 800eafa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eafe:	d820      	bhi.n	800eb42 <_printf_float+0x186>
 800eb00:	3901      	subs	r1, #1
 800eb02:	465a      	mov	r2, fp
 800eb04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb08:	9109      	str	r1, [sp, #36]	; 0x24
 800eb0a:	f7ff ff19 	bl	800e940 <__exponent>
 800eb0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb10:	1813      	adds	r3, r2, r0
 800eb12:	2a01      	cmp	r2, #1
 800eb14:	4681      	mov	r9, r0
 800eb16:	6123      	str	r3, [r4, #16]
 800eb18:	dc02      	bgt.n	800eb20 <_printf_float+0x164>
 800eb1a:	6822      	ldr	r2, [r4, #0]
 800eb1c:	07d2      	lsls	r2, r2, #31
 800eb1e:	d501      	bpl.n	800eb24 <_printf_float+0x168>
 800eb20:	3301      	adds	r3, #1
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d09c      	beq.n	800ea66 <_printf_float+0xaa>
 800eb2c:	232d      	movs	r3, #45	; 0x2d
 800eb2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb32:	e798      	b.n	800ea66 <_printf_float+0xaa>
 800eb34:	9a06      	ldr	r2, [sp, #24]
 800eb36:	2a47      	cmp	r2, #71	; 0x47
 800eb38:	d1be      	bne.n	800eab8 <_printf_float+0xfc>
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1bc      	bne.n	800eab8 <_printf_float+0xfc>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e7b9      	b.n	800eab6 <_printf_float+0xfa>
 800eb42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eb46:	d118      	bne.n	800eb7a <_printf_float+0x1be>
 800eb48:	2900      	cmp	r1, #0
 800eb4a:	6863      	ldr	r3, [r4, #4]
 800eb4c:	dd0b      	ble.n	800eb66 <_printf_float+0x1aa>
 800eb4e:	6121      	str	r1, [r4, #16]
 800eb50:	b913      	cbnz	r3, 800eb58 <_printf_float+0x19c>
 800eb52:	6822      	ldr	r2, [r4, #0]
 800eb54:	07d0      	lsls	r0, r2, #31
 800eb56:	d502      	bpl.n	800eb5e <_printf_float+0x1a2>
 800eb58:	3301      	adds	r3, #1
 800eb5a:	440b      	add	r3, r1
 800eb5c:	6123      	str	r3, [r4, #16]
 800eb5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb60:	f04f 0900 	mov.w	r9, #0
 800eb64:	e7de      	b.n	800eb24 <_printf_float+0x168>
 800eb66:	b913      	cbnz	r3, 800eb6e <_printf_float+0x1b2>
 800eb68:	6822      	ldr	r2, [r4, #0]
 800eb6a:	07d2      	lsls	r2, r2, #31
 800eb6c:	d501      	bpl.n	800eb72 <_printf_float+0x1b6>
 800eb6e:	3302      	adds	r3, #2
 800eb70:	e7f4      	b.n	800eb5c <_printf_float+0x1a0>
 800eb72:	2301      	movs	r3, #1
 800eb74:	e7f2      	b.n	800eb5c <_printf_float+0x1a0>
 800eb76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb7c:	4299      	cmp	r1, r3
 800eb7e:	db05      	blt.n	800eb8c <_printf_float+0x1d0>
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	6121      	str	r1, [r4, #16]
 800eb84:	07d8      	lsls	r0, r3, #31
 800eb86:	d5ea      	bpl.n	800eb5e <_printf_float+0x1a2>
 800eb88:	1c4b      	adds	r3, r1, #1
 800eb8a:	e7e7      	b.n	800eb5c <_printf_float+0x1a0>
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	bfd4      	ite	le
 800eb90:	f1c1 0202 	rsble	r2, r1, #2
 800eb94:	2201      	movgt	r2, #1
 800eb96:	4413      	add	r3, r2
 800eb98:	e7e0      	b.n	800eb5c <_printf_float+0x1a0>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	055a      	lsls	r2, r3, #21
 800eb9e:	d407      	bmi.n	800ebb0 <_printf_float+0x1f4>
 800eba0:	6923      	ldr	r3, [r4, #16]
 800eba2:	4642      	mov	r2, r8
 800eba4:	4631      	mov	r1, r6
 800eba6:	4628      	mov	r0, r5
 800eba8:	47b8      	blx	r7
 800ebaa:	3001      	adds	r0, #1
 800ebac:	d12c      	bne.n	800ec08 <_printf_float+0x24c>
 800ebae:	e764      	b.n	800ea7a <_printf_float+0xbe>
 800ebb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ebb4:	f240 80e0 	bls.w	800ed78 <_printf_float+0x3bc>
 800ebb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f7f1 ffaa 	bl	8000b18 <__aeabi_dcmpeq>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d034      	beq.n	800ec32 <_printf_float+0x276>
 800ebc8:	4a37      	ldr	r2, [pc, #220]	; (800eca8 <_printf_float+0x2ec>)
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4631      	mov	r1, r6
 800ebce:	4628      	mov	r0, r5
 800ebd0:	47b8      	blx	r7
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	f43f af51 	beq.w	800ea7a <_printf_float+0xbe>
 800ebd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	db02      	blt.n	800ebe6 <_printf_float+0x22a>
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	07d8      	lsls	r0, r3, #31
 800ebe4:	d510      	bpl.n	800ec08 <_printf_float+0x24c>
 800ebe6:	ee18 3a10 	vmov	r3, s16
 800ebea:	4652      	mov	r2, sl
 800ebec:	4631      	mov	r1, r6
 800ebee:	4628      	mov	r0, r5
 800ebf0:	47b8      	blx	r7
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	f43f af41 	beq.w	800ea7a <_printf_float+0xbe>
 800ebf8:	f04f 0800 	mov.w	r8, #0
 800ebfc:	f104 091a 	add.w	r9, r4, #26
 800ec00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec02:	3b01      	subs	r3, #1
 800ec04:	4543      	cmp	r3, r8
 800ec06:	dc09      	bgt.n	800ec1c <_printf_float+0x260>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	079b      	lsls	r3, r3, #30
 800ec0c:	f100 8107 	bmi.w	800ee1e <_printf_float+0x462>
 800ec10:	68e0      	ldr	r0, [r4, #12]
 800ec12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec14:	4298      	cmp	r0, r3
 800ec16:	bfb8      	it	lt
 800ec18:	4618      	movlt	r0, r3
 800ec1a:	e730      	b.n	800ea7e <_printf_float+0xc2>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	464a      	mov	r2, r9
 800ec20:	4631      	mov	r1, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b8      	blx	r7
 800ec26:	3001      	adds	r0, #1
 800ec28:	f43f af27 	beq.w	800ea7a <_printf_float+0xbe>
 800ec2c:	f108 0801 	add.w	r8, r8, #1
 800ec30:	e7e6      	b.n	800ec00 <_printf_float+0x244>
 800ec32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	dc39      	bgt.n	800ecac <_printf_float+0x2f0>
 800ec38:	4a1b      	ldr	r2, [pc, #108]	; (800eca8 <_printf_float+0x2ec>)
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	4628      	mov	r0, r5
 800ec40:	47b8      	blx	r7
 800ec42:	3001      	adds	r0, #1
 800ec44:	f43f af19 	beq.w	800ea7a <_printf_float+0xbe>
 800ec48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	d102      	bne.n	800ec56 <_printf_float+0x29a>
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	07d9      	lsls	r1, r3, #31
 800ec54:	d5d8      	bpl.n	800ec08 <_printf_float+0x24c>
 800ec56:	ee18 3a10 	vmov	r3, s16
 800ec5a:	4652      	mov	r2, sl
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b8      	blx	r7
 800ec62:	3001      	adds	r0, #1
 800ec64:	f43f af09 	beq.w	800ea7a <_printf_float+0xbe>
 800ec68:	f04f 0900 	mov.w	r9, #0
 800ec6c:	f104 0a1a 	add.w	sl, r4, #26
 800ec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec72:	425b      	negs	r3, r3
 800ec74:	454b      	cmp	r3, r9
 800ec76:	dc01      	bgt.n	800ec7c <_printf_float+0x2c0>
 800ec78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7a:	e792      	b.n	800eba2 <_printf_float+0x1e6>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	4652      	mov	r2, sl
 800ec80:	4631      	mov	r1, r6
 800ec82:	4628      	mov	r0, r5
 800ec84:	47b8      	blx	r7
 800ec86:	3001      	adds	r0, #1
 800ec88:	f43f aef7 	beq.w	800ea7a <_printf_float+0xbe>
 800ec8c:	f109 0901 	add.w	r9, r9, #1
 800ec90:	e7ee      	b.n	800ec70 <_printf_float+0x2b4>
 800ec92:	bf00      	nop
 800ec94:	7fefffff 	.word	0x7fefffff
 800ec98:	080135c5 	.word	0x080135c5
 800ec9c:	080135c9 	.word	0x080135c9
 800eca0:	080135cd 	.word	0x080135cd
 800eca4:	080135d1 	.word	0x080135d1
 800eca8:	080135d5 	.word	0x080135d5
 800ecac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	bfa8      	it	ge
 800ecb4:	461a      	movge	r2, r3
 800ecb6:	2a00      	cmp	r2, #0
 800ecb8:	4691      	mov	r9, r2
 800ecba:	dc37      	bgt.n	800ed2c <_printf_float+0x370>
 800ecbc:	f04f 0b00 	mov.w	fp, #0
 800ecc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecc4:	f104 021a 	add.w	r2, r4, #26
 800ecc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecca:	9305      	str	r3, [sp, #20]
 800eccc:	eba3 0309 	sub.w	r3, r3, r9
 800ecd0:	455b      	cmp	r3, fp
 800ecd2:	dc33      	bgt.n	800ed3c <_printf_float+0x380>
 800ecd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	db3b      	blt.n	800ed54 <_printf_float+0x398>
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	07da      	lsls	r2, r3, #31
 800ece0:	d438      	bmi.n	800ed54 <_printf_float+0x398>
 800ece2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ece6:	eba2 0903 	sub.w	r9, r2, r3
 800ecea:	9b05      	ldr	r3, [sp, #20]
 800ecec:	1ad2      	subs	r2, r2, r3
 800ecee:	4591      	cmp	r9, r2
 800ecf0:	bfa8      	it	ge
 800ecf2:	4691      	movge	r9, r2
 800ecf4:	f1b9 0f00 	cmp.w	r9, #0
 800ecf8:	dc35      	bgt.n	800ed66 <_printf_float+0x3aa>
 800ecfa:	f04f 0800 	mov.w	r8, #0
 800ecfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed02:	f104 0a1a 	add.w	sl, r4, #26
 800ed06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed0a:	1a9b      	subs	r3, r3, r2
 800ed0c:	eba3 0309 	sub.w	r3, r3, r9
 800ed10:	4543      	cmp	r3, r8
 800ed12:	f77f af79 	ble.w	800ec08 <_printf_float+0x24c>
 800ed16:	2301      	movs	r3, #1
 800ed18:	4652      	mov	r2, sl
 800ed1a:	4631      	mov	r1, r6
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	47b8      	blx	r7
 800ed20:	3001      	adds	r0, #1
 800ed22:	f43f aeaa 	beq.w	800ea7a <_printf_float+0xbe>
 800ed26:	f108 0801 	add.w	r8, r8, #1
 800ed2a:	e7ec      	b.n	800ed06 <_printf_float+0x34a>
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	4631      	mov	r1, r6
 800ed30:	4642      	mov	r2, r8
 800ed32:	4628      	mov	r0, r5
 800ed34:	47b8      	blx	r7
 800ed36:	3001      	adds	r0, #1
 800ed38:	d1c0      	bne.n	800ecbc <_printf_float+0x300>
 800ed3a:	e69e      	b.n	800ea7a <_printf_float+0xbe>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	4631      	mov	r1, r6
 800ed40:	4628      	mov	r0, r5
 800ed42:	9205      	str	r2, [sp, #20]
 800ed44:	47b8      	blx	r7
 800ed46:	3001      	adds	r0, #1
 800ed48:	f43f ae97 	beq.w	800ea7a <_printf_float+0xbe>
 800ed4c:	9a05      	ldr	r2, [sp, #20]
 800ed4e:	f10b 0b01 	add.w	fp, fp, #1
 800ed52:	e7b9      	b.n	800ecc8 <_printf_float+0x30c>
 800ed54:	ee18 3a10 	vmov	r3, s16
 800ed58:	4652      	mov	r2, sl
 800ed5a:	4631      	mov	r1, r6
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	47b8      	blx	r7
 800ed60:	3001      	adds	r0, #1
 800ed62:	d1be      	bne.n	800ece2 <_printf_float+0x326>
 800ed64:	e689      	b.n	800ea7a <_printf_float+0xbe>
 800ed66:	9a05      	ldr	r2, [sp, #20]
 800ed68:	464b      	mov	r3, r9
 800ed6a:	4442      	add	r2, r8
 800ed6c:	4631      	mov	r1, r6
 800ed6e:	4628      	mov	r0, r5
 800ed70:	47b8      	blx	r7
 800ed72:	3001      	adds	r0, #1
 800ed74:	d1c1      	bne.n	800ecfa <_printf_float+0x33e>
 800ed76:	e680      	b.n	800ea7a <_printf_float+0xbe>
 800ed78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed7a:	2a01      	cmp	r2, #1
 800ed7c:	dc01      	bgt.n	800ed82 <_printf_float+0x3c6>
 800ed7e:	07db      	lsls	r3, r3, #31
 800ed80:	d53a      	bpl.n	800edf8 <_printf_float+0x43c>
 800ed82:	2301      	movs	r3, #1
 800ed84:	4642      	mov	r2, r8
 800ed86:	4631      	mov	r1, r6
 800ed88:	4628      	mov	r0, r5
 800ed8a:	47b8      	blx	r7
 800ed8c:	3001      	adds	r0, #1
 800ed8e:	f43f ae74 	beq.w	800ea7a <_printf_float+0xbe>
 800ed92:	ee18 3a10 	vmov	r3, s16
 800ed96:	4652      	mov	r2, sl
 800ed98:	4631      	mov	r1, r6
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	47b8      	blx	r7
 800ed9e:	3001      	adds	r0, #1
 800eda0:	f43f ae6b 	beq.w	800ea7a <_printf_float+0xbe>
 800eda4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eda8:	2200      	movs	r2, #0
 800edaa:	2300      	movs	r3, #0
 800edac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800edb0:	f7f1 feb2 	bl	8000b18 <__aeabi_dcmpeq>
 800edb4:	b9d8      	cbnz	r0, 800edee <_printf_float+0x432>
 800edb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800edba:	f108 0201 	add.w	r2, r8, #1
 800edbe:	4631      	mov	r1, r6
 800edc0:	4628      	mov	r0, r5
 800edc2:	47b8      	blx	r7
 800edc4:	3001      	adds	r0, #1
 800edc6:	d10e      	bne.n	800ede6 <_printf_float+0x42a>
 800edc8:	e657      	b.n	800ea7a <_printf_float+0xbe>
 800edca:	2301      	movs	r3, #1
 800edcc:	4652      	mov	r2, sl
 800edce:	4631      	mov	r1, r6
 800edd0:	4628      	mov	r0, r5
 800edd2:	47b8      	blx	r7
 800edd4:	3001      	adds	r0, #1
 800edd6:	f43f ae50 	beq.w	800ea7a <_printf_float+0xbe>
 800edda:	f108 0801 	add.w	r8, r8, #1
 800edde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ede0:	3b01      	subs	r3, #1
 800ede2:	4543      	cmp	r3, r8
 800ede4:	dcf1      	bgt.n	800edca <_printf_float+0x40e>
 800ede6:	464b      	mov	r3, r9
 800ede8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800edec:	e6da      	b.n	800eba4 <_printf_float+0x1e8>
 800edee:	f04f 0800 	mov.w	r8, #0
 800edf2:	f104 0a1a 	add.w	sl, r4, #26
 800edf6:	e7f2      	b.n	800edde <_printf_float+0x422>
 800edf8:	2301      	movs	r3, #1
 800edfa:	4642      	mov	r2, r8
 800edfc:	e7df      	b.n	800edbe <_printf_float+0x402>
 800edfe:	2301      	movs	r3, #1
 800ee00:	464a      	mov	r2, r9
 800ee02:	4631      	mov	r1, r6
 800ee04:	4628      	mov	r0, r5
 800ee06:	47b8      	blx	r7
 800ee08:	3001      	adds	r0, #1
 800ee0a:	f43f ae36 	beq.w	800ea7a <_printf_float+0xbe>
 800ee0e:	f108 0801 	add.w	r8, r8, #1
 800ee12:	68e3      	ldr	r3, [r4, #12]
 800ee14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee16:	1a5b      	subs	r3, r3, r1
 800ee18:	4543      	cmp	r3, r8
 800ee1a:	dcf0      	bgt.n	800edfe <_printf_float+0x442>
 800ee1c:	e6f8      	b.n	800ec10 <_printf_float+0x254>
 800ee1e:	f04f 0800 	mov.w	r8, #0
 800ee22:	f104 0919 	add.w	r9, r4, #25
 800ee26:	e7f4      	b.n	800ee12 <_printf_float+0x456>

0800ee28 <_printf_common>:
 800ee28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee2c:	4616      	mov	r6, r2
 800ee2e:	4699      	mov	r9, r3
 800ee30:	688a      	ldr	r2, [r1, #8]
 800ee32:	690b      	ldr	r3, [r1, #16]
 800ee34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	bfb8      	it	lt
 800ee3c:	4613      	movlt	r3, r2
 800ee3e:	6033      	str	r3, [r6, #0]
 800ee40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee44:	4607      	mov	r7, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	b10a      	cbz	r2, 800ee4e <_printf_common+0x26>
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	6033      	str	r3, [r6, #0]
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	0699      	lsls	r1, r3, #26
 800ee52:	bf42      	ittt	mi
 800ee54:	6833      	ldrmi	r3, [r6, #0]
 800ee56:	3302      	addmi	r3, #2
 800ee58:	6033      	strmi	r3, [r6, #0]
 800ee5a:	6825      	ldr	r5, [r4, #0]
 800ee5c:	f015 0506 	ands.w	r5, r5, #6
 800ee60:	d106      	bne.n	800ee70 <_printf_common+0x48>
 800ee62:	f104 0a19 	add.w	sl, r4, #25
 800ee66:	68e3      	ldr	r3, [r4, #12]
 800ee68:	6832      	ldr	r2, [r6, #0]
 800ee6a:	1a9b      	subs	r3, r3, r2
 800ee6c:	42ab      	cmp	r3, r5
 800ee6e:	dc26      	bgt.n	800eebe <_printf_common+0x96>
 800ee70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee74:	1e13      	subs	r3, r2, #0
 800ee76:	6822      	ldr	r2, [r4, #0]
 800ee78:	bf18      	it	ne
 800ee7a:	2301      	movne	r3, #1
 800ee7c:	0692      	lsls	r2, r2, #26
 800ee7e:	d42b      	bmi.n	800eed8 <_printf_common+0xb0>
 800ee80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee84:	4649      	mov	r1, r9
 800ee86:	4638      	mov	r0, r7
 800ee88:	47c0      	blx	r8
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d01e      	beq.n	800eecc <_printf_common+0xa4>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	6922      	ldr	r2, [r4, #16]
 800ee92:	f003 0306 	and.w	r3, r3, #6
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	bf02      	ittt	eq
 800ee9a:	68e5      	ldreq	r5, [r4, #12]
 800ee9c:	6833      	ldreq	r3, [r6, #0]
 800ee9e:	1aed      	subeq	r5, r5, r3
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	bf0c      	ite	eq
 800eea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eea8:	2500      	movne	r5, #0
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	bfc4      	itt	gt
 800eeae:	1a9b      	subgt	r3, r3, r2
 800eeb0:	18ed      	addgt	r5, r5, r3
 800eeb2:	2600      	movs	r6, #0
 800eeb4:	341a      	adds	r4, #26
 800eeb6:	42b5      	cmp	r5, r6
 800eeb8:	d11a      	bne.n	800eef0 <_printf_common+0xc8>
 800eeba:	2000      	movs	r0, #0
 800eebc:	e008      	b.n	800eed0 <_printf_common+0xa8>
 800eebe:	2301      	movs	r3, #1
 800eec0:	4652      	mov	r2, sl
 800eec2:	4649      	mov	r1, r9
 800eec4:	4638      	mov	r0, r7
 800eec6:	47c0      	blx	r8
 800eec8:	3001      	adds	r0, #1
 800eeca:	d103      	bne.n	800eed4 <_printf_common+0xac>
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed4:	3501      	adds	r5, #1
 800eed6:	e7c6      	b.n	800ee66 <_printf_common+0x3e>
 800eed8:	18e1      	adds	r1, r4, r3
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	2030      	movs	r0, #48	; 0x30
 800eede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eee2:	4422      	add	r2, r4
 800eee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeec:	3302      	adds	r3, #2
 800eeee:	e7c7      	b.n	800ee80 <_printf_common+0x58>
 800eef0:	2301      	movs	r3, #1
 800eef2:	4622      	mov	r2, r4
 800eef4:	4649      	mov	r1, r9
 800eef6:	4638      	mov	r0, r7
 800eef8:	47c0      	blx	r8
 800eefa:	3001      	adds	r0, #1
 800eefc:	d0e6      	beq.n	800eecc <_printf_common+0xa4>
 800eefe:	3601      	adds	r6, #1
 800ef00:	e7d9      	b.n	800eeb6 <_printf_common+0x8e>
	...

0800ef04 <_printf_i>:
 800ef04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef08:	7e0f      	ldrb	r7, [r1, #24]
 800ef0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef0c:	2f78      	cmp	r7, #120	; 0x78
 800ef0e:	4691      	mov	r9, r2
 800ef10:	4680      	mov	r8, r0
 800ef12:	460c      	mov	r4, r1
 800ef14:	469a      	mov	sl, r3
 800ef16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef1a:	d807      	bhi.n	800ef2c <_printf_i+0x28>
 800ef1c:	2f62      	cmp	r7, #98	; 0x62
 800ef1e:	d80a      	bhi.n	800ef36 <_printf_i+0x32>
 800ef20:	2f00      	cmp	r7, #0
 800ef22:	f000 80d4 	beq.w	800f0ce <_printf_i+0x1ca>
 800ef26:	2f58      	cmp	r7, #88	; 0x58
 800ef28:	f000 80c0 	beq.w	800f0ac <_printf_i+0x1a8>
 800ef2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef34:	e03a      	b.n	800efac <_printf_i+0xa8>
 800ef36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef3a:	2b15      	cmp	r3, #21
 800ef3c:	d8f6      	bhi.n	800ef2c <_printf_i+0x28>
 800ef3e:	a101      	add	r1, pc, #4	; (adr r1, 800ef44 <_printf_i+0x40>)
 800ef40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef44:	0800ef9d 	.word	0x0800ef9d
 800ef48:	0800efb1 	.word	0x0800efb1
 800ef4c:	0800ef2d 	.word	0x0800ef2d
 800ef50:	0800ef2d 	.word	0x0800ef2d
 800ef54:	0800ef2d 	.word	0x0800ef2d
 800ef58:	0800ef2d 	.word	0x0800ef2d
 800ef5c:	0800efb1 	.word	0x0800efb1
 800ef60:	0800ef2d 	.word	0x0800ef2d
 800ef64:	0800ef2d 	.word	0x0800ef2d
 800ef68:	0800ef2d 	.word	0x0800ef2d
 800ef6c:	0800ef2d 	.word	0x0800ef2d
 800ef70:	0800f0b5 	.word	0x0800f0b5
 800ef74:	0800efdd 	.word	0x0800efdd
 800ef78:	0800f06f 	.word	0x0800f06f
 800ef7c:	0800ef2d 	.word	0x0800ef2d
 800ef80:	0800ef2d 	.word	0x0800ef2d
 800ef84:	0800f0d7 	.word	0x0800f0d7
 800ef88:	0800ef2d 	.word	0x0800ef2d
 800ef8c:	0800efdd 	.word	0x0800efdd
 800ef90:	0800ef2d 	.word	0x0800ef2d
 800ef94:	0800ef2d 	.word	0x0800ef2d
 800ef98:	0800f077 	.word	0x0800f077
 800ef9c:	682b      	ldr	r3, [r5, #0]
 800ef9e:	1d1a      	adds	r2, r3, #4
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	602a      	str	r2, [r5, #0]
 800efa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efac:	2301      	movs	r3, #1
 800efae:	e09f      	b.n	800f0f0 <_printf_i+0x1ec>
 800efb0:	6820      	ldr	r0, [r4, #0]
 800efb2:	682b      	ldr	r3, [r5, #0]
 800efb4:	0607      	lsls	r7, r0, #24
 800efb6:	f103 0104 	add.w	r1, r3, #4
 800efba:	6029      	str	r1, [r5, #0]
 800efbc:	d501      	bpl.n	800efc2 <_printf_i+0xbe>
 800efbe:	681e      	ldr	r6, [r3, #0]
 800efc0:	e003      	b.n	800efca <_printf_i+0xc6>
 800efc2:	0646      	lsls	r6, r0, #25
 800efc4:	d5fb      	bpl.n	800efbe <_printf_i+0xba>
 800efc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800efca:	2e00      	cmp	r6, #0
 800efcc:	da03      	bge.n	800efd6 <_printf_i+0xd2>
 800efce:	232d      	movs	r3, #45	; 0x2d
 800efd0:	4276      	negs	r6, r6
 800efd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efd6:	485a      	ldr	r0, [pc, #360]	; (800f140 <_printf_i+0x23c>)
 800efd8:	230a      	movs	r3, #10
 800efda:	e012      	b.n	800f002 <_printf_i+0xfe>
 800efdc:	682b      	ldr	r3, [r5, #0]
 800efde:	6820      	ldr	r0, [r4, #0]
 800efe0:	1d19      	adds	r1, r3, #4
 800efe2:	6029      	str	r1, [r5, #0]
 800efe4:	0605      	lsls	r5, r0, #24
 800efe6:	d501      	bpl.n	800efec <_printf_i+0xe8>
 800efe8:	681e      	ldr	r6, [r3, #0]
 800efea:	e002      	b.n	800eff2 <_printf_i+0xee>
 800efec:	0641      	lsls	r1, r0, #25
 800efee:	d5fb      	bpl.n	800efe8 <_printf_i+0xe4>
 800eff0:	881e      	ldrh	r6, [r3, #0]
 800eff2:	4853      	ldr	r0, [pc, #332]	; (800f140 <_printf_i+0x23c>)
 800eff4:	2f6f      	cmp	r7, #111	; 0x6f
 800eff6:	bf0c      	ite	eq
 800eff8:	2308      	moveq	r3, #8
 800effa:	230a      	movne	r3, #10
 800effc:	2100      	movs	r1, #0
 800effe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f002:	6865      	ldr	r5, [r4, #4]
 800f004:	60a5      	str	r5, [r4, #8]
 800f006:	2d00      	cmp	r5, #0
 800f008:	bfa2      	ittt	ge
 800f00a:	6821      	ldrge	r1, [r4, #0]
 800f00c:	f021 0104 	bicge.w	r1, r1, #4
 800f010:	6021      	strge	r1, [r4, #0]
 800f012:	b90e      	cbnz	r6, 800f018 <_printf_i+0x114>
 800f014:	2d00      	cmp	r5, #0
 800f016:	d04b      	beq.n	800f0b0 <_printf_i+0x1ac>
 800f018:	4615      	mov	r5, r2
 800f01a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f01e:	fb03 6711 	mls	r7, r3, r1, r6
 800f022:	5dc7      	ldrb	r7, [r0, r7]
 800f024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f028:	4637      	mov	r7, r6
 800f02a:	42bb      	cmp	r3, r7
 800f02c:	460e      	mov	r6, r1
 800f02e:	d9f4      	bls.n	800f01a <_printf_i+0x116>
 800f030:	2b08      	cmp	r3, #8
 800f032:	d10b      	bne.n	800f04c <_printf_i+0x148>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	07de      	lsls	r6, r3, #31
 800f038:	d508      	bpl.n	800f04c <_printf_i+0x148>
 800f03a:	6923      	ldr	r3, [r4, #16]
 800f03c:	6861      	ldr	r1, [r4, #4]
 800f03e:	4299      	cmp	r1, r3
 800f040:	bfde      	ittt	le
 800f042:	2330      	movle	r3, #48	; 0x30
 800f044:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f04c:	1b52      	subs	r2, r2, r5
 800f04e:	6122      	str	r2, [r4, #16]
 800f050:	f8cd a000 	str.w	sl, [sp]
 800f054:	464b      	mov	r3, r9
 800f056:	aa03      	add	r2, sp, #12
 800f058:	4621      	mov	r1, r4
 800f05a:	4640      	mov	r0, r8
 800f05c:	f7ff fee4 	bl	800ee28 <_printf_common>
 800f060:	3001      	adds	r0, #1
 800f062:	d14a      	bne.n	800f0fa <_printf_i+0x1f6>
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	b004      	add	sp, #16
 800f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	f043 0320 	orr.w	r3, r3, #32
 800f074:	6023      	str	r3, [r4, #0]
 800f076:	4833      	ldr	r0, [pc, #204]	; (800f144 <_printf_i+0x240>)
 800f078:	2778      	movs	r7, #120	; 0x78
 800f07a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	6829      	ldr	r1, [r5, #0]
 800f082:	061f      	lsls	r7, r3, #24
 800f084:	f851 6b04 	ldr.w	r6, [r1], #4
 800f088:	d402      	bmi.n	800f090 <_printf_i+0x18c>
 800f08a:	065f      	lsls	r7, r3, #25
 800f08c:	bf48      	it	mi
 800f08e:	b2b6      	uxthmi	r6, r6
 800f090:	07df      	lsls	r7, r3, #31
 800f092:	bf48      	it	mi
 800f094:	f043 0320 	orrmi.w	r3, r3, #32
 800f098:	6029      	str	r1, [r5, #0]
 800f09a:	bf48      	it	mi
 800f09c:	6023      	strmi	r3, [r4, #0]
 800f09e:	b91e      	cbnz	r6, 800f0a8 <_printf_i+0x1a4>
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	f023 0320 	bic.w	r3, r3, #32
 800f0a6:	6023      	str	r3, [r4, #0]
 800f0a8:	2310      	movs	r3, #16
 800f0aa:	e7a7      	b.n	800effc <_printf_i+0xf8>
 800f0ac:	4824      	ldr	r0, [pc, #144]	; (800f140 <_printf_i+0x23c>)
 800f0ae:	e7e4      	b.n	800f07a <_printf_i+0x176>
 800f0b0:	4615      	mov	r5, r2
 800f0b2:	e7bd      	b.n	800f030 <_printf_i+0x12c>
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	6826      	ldr	r6, [r4, #0]
 800f0b8:	6961      	ldr	r1, [r4, #20]
 800f0ba:	1d18      	adds	r0, r3, #4
 800f0bc:	6028      	str	r0, [r5, #0]
 800f0be:	0635      	lsls	r5, r6, #24
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	d501      	bpl.n	800f0c8 <_printf_i+0x1c4>
 800f0c4:	6019      	str	r1, [r3, #0]
 800f0c6:	e002      	b.n	800f0ce <_printf_i+0x1ca>
 800f0c8:	0670      	lsls	r0, r6, #25
 800f0ca:	d5fb      	bpl.n	800f0c4 <_printf_i+0x1c0>
 800f0cc:	8019      	strh	r1, [r3, #0]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	6123      	str	r3, [r4, #16]
 800f0d2:	4615      	mov	r5, r2
 800f0d4:	e7bc      	b.n	800f050 <_printf_i+0x14c>
 800f0d6:	682b      	ldr	r3, [r5, #0]
 800f0d8:	1d1a      	adds	r2, r3, #4
 800f0da:	602a      	str	r2, [r5, #0]
 800f0dc:	681d      	ldr	r5, [r3, #0]
 800f0de:	6862      	ldr	r2, [r4, #4]
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f7f1 f89c 	bl	8000220 <memchr>
 800f0e8:	b108      	cbz	r0, 800f0ee <_printf_i+0x1ea>
 800f0ea:	1b40      	subs	r0, r0, r5
 800f0ec:	6060      	str	r0, [r4, #4]
 800f0ee:	6863      	ldr	r3, [r4, #4]
 800f0f0:	6123      	str	r3, [r4, #16]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0f8:	e7aa      	b.n	800f050 <_printf_i+0x14c>
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	462a      	mov	r2, r5
 800f0fe:	4649      	mov	r1, r9
 800f100:	4640      	mov	r0, r8
 800f102:	47d0      	blx	sl
 800f104:	3001      	adds	r0, #1
 800f106:	d0ad      	beq.n	800f064 <_printf_i+0x160>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	079b      	lsls	r3, r3, #30
 800f10c:	d413      	bmi.n	800f136 <_printf_i+0x232>
 800f10e:	68e0      	ldr	r0, [r4, #12]
 800f110:	9b03      	ldr	r3, [sp, #12]
 800f112:	4298      	cmp	r0, r3
 800f114:	bfb8      	it	lt
 800f116:	4618      	movlt	r0, r3
 800f118:	e7a6      	b.n	800f068 <_printf_i+0x164>
 800f11a:	2301      	movs	r3, #1
 800f11c:	4632      	mov	r2, r6
 800f11e:	4649      	mov	r1, r9
 800f120:	4640      	mov	r0, r8
 800f122:	47d0      	blx	sl
 800f124:	3001      	adds	r0, #1
 800f126:	d09d      	beq.n	800f064 <_printf_i+0x160>
 800f128:	3501      	adds	r5, #1
 800f12a:	68e3      	ldr	r3, [r4, #12]
 800f12c:	9903      	ldr	r1, [sp, #12]
 800f12e:	1a5b      	subs	r3, r3, r1
 800f130:	42ab      	cmp	r3, r5
 800f132:	dcf2      	bgt.n	800f11a <_printf_i+0x216>
 800f134:	e7eb      	b.n	800f10e <_printf_i+0x20a>
 800f136:	2500      	movs	r5, #0
 800f138:	f104 0619 	add.w	r6, r4, #25
 800f13c:	e7f5      	b.n	800f12a <_printf_i+0x226>
 800f13e:	bf00      	nop
 800f140:	080135d7 	.word	0x080135d7
 800f144:	080135e8 	.word	0x080135e8

0800f148 <_scanf_float>:
 800f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	b087      	sub	sp, #28
 800f14e:	4617      	mov	r7, r2
 800f150:	9303      	str	r3, [sp, #12]
 800f152:	688b      	ldr	r3, [r1, #8]
 800f154:	1e5a      	subs	r2, r3, #1
 800f156:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f15a:	bf83      	ittte	hi
 800f15c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f160:	195b      	addhi	r3, r3, r5
 800f162:	9302      	strhi	r3, [sp, #8]
 800f164:	2300      	movls	r3, #0
 800f166:	bf86      	itte	hi
 800f168:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f16c:	608b      	strhi	r3, [r1, #8]
 800f16e:	9302      	strls	r3, [sp, #8]
 800f170:	680b      	ldr	r3, [r1, #0]
 800f172:	468b      	mov	fp, r1
 800f174:	2500      	movs	r5, #0
 800f176:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f17a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f17e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f182:	4680      	mov	r8, r0
 800f184:	460c      	mov	r4, r1
 800f186:	465e      	mov	r6, fp
 800f188:	46aa      	mov	sl, r5
 800f18a:	46a9      	mov	r9, r5
 800f18c:	9501      	str	r5, [sp, #4]
 800f18e:	68a2      	ldr	r2, [r4, #8]
 800f190:	b152      	cbz	r2, 800f1a8 <_scanf_float+0x60>
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	2b4e      	cmp	r3, #78	; 0x4e
 800f198:	d864      	bhi.n	800f264 <_scanf_float+0x11c>
 800f19a:	2b40      	cmp	r3, #64	; 0x40
 800f19c:	d83c      	bhi.n	800f218 <_scanf_float+0xd0>
 800f19e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f1a2:	b2c8      	uxtb	r0, r1
 800f1a4:	280e      	cmp	r0, #14
 800f1a6:	d93a      	bls.n	800f21e <_scanf_float+0xd6>
 800f1a8:	f1b9 0f00 	cmp.w	r9, #0
 800f1ac:	d003      	beq.n	800f1b6 <_scanf_float+0x6e>
 800f1ae:	6823      	ldr	r3, [r4, #0]
 800f1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1b4:	6023      	str	r3, [r4, #0]
 800f1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1ba:	f1ba 0f01 	cmp.w	sl, #1
 800f1be:	f200 8113 	bhi.w	800f3e8 <_scanf_float+0x2a0>
 800f1c2:	455e      	cmp	r6, fp
 800f1c4:	f200 8105 	bhi.w	800f3d2 <_scanf_float+0x28a>
 800f1c8:	2501      	movs	r5, #1
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	b007      	add	sp, #28
 800f1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f1d6:	2a0d      	cmp	r2, #13
 800f1d8:	d8e6      	bhi.n	800f1a8 <_scanf_float+0x60>
 800f1da:	a101      	add	r1, pc, #4	; (adr r1, 800f1e0 <_scanf_float+0x98>)
 800f1dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1e0:	0800f31f 	.word	0x0800f31f
 800f1e4:	0800f1a9 	.word	0x0800f1a9
 800f1e8:	0800f1a9 	.word	0x0800f1a9
 800f1ec:	0800f1a9 	.word	0x0800f1a9
 800f1f0:	0800f37f 	.word	0x0800f37f
 800f1f4:	0800f357 	.word	0x0800f357
 800f1f8:	0800f1a9 	.word	0x0800f1a9
 800f1fc:	0800f1a9 	.word	0x0800f1a9
 800f200:	0800f32d 	.word	0x0800f32d
 800f204:	0800f1a9 	.word	0x0800f1a9
 800f208:	0800f1a9 	.word	0x0800f1a9
 800f20c:	0800f1a9 	.word	0x0800f1a9
 800f210:	0800f1a9 	.word	0x0800f1a9
 800f214:	0800f2e5 	.word	0x0800f2e5
 800f218:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f21c:	e7db      	b.n	800f1d6 <_scanf_float+0x8e>
 800f21e:	290e      	cmp	r1, #14
 800f220:	d8c2      	bhi.n	800f1a8 <_scanf_float+0x60>
 800f222:	a001      	add	r0, pc, #4	; (adr r0, 800f228 <_scanf_float+0xe0>)
 800f224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f228:	0800f2d7 	.word	0x0800f2d7
 800f22c:	0800f1a9 	.word	0x0800f1a9
 800f230:	0800f2d7 	.word	0x0800f2d7
 800f234:	0800f36b 	.word	0x0800f36b
 800f238:	0800f1a9 	.word	0x0800f1a9
 800f23c:	0800f285 	.word	0x0800f285
 800f240:	0800f2c1 	.word	0x0800f2c1
 800f244:	0800f2c1 	.word	0x0800f2c1
 800f248:	0800f2c1 	.word	0x0800f2c1
 800f24c:	0800f2c1 	.word	0x0800f2c1
 800f250:	0800f2c1 	.word	0x0800f2c1
 800f254:	0800f2c1 	.word	0x0800f2c1
 800f258:	0800f2c1 	.word	0x0800f2c1
 800f25c:	0800f2c1 	.word	0x0800f2c1
 800f260:	0800f2c1 	.word	0x0800f2c1
 800f264:	2b6e      	cmp	r3, #110	; 0x6e
 800f266:	d809      	bhi.n	800f27c <_scanf_float+0x134>
 800f268:	2b60      	cmp	r3, #96	; 0x60
 800f26a:	d8b2      	bhi.n	800f1d2 <_scanf_float+0x8a>
 800f26c:	2b54      	cmp	r3, #84	; 0x54
 800f26e:	d077      	beq.n	800f360 <_scanf_float+0x218>
 800f270:	2b59      	cmp	r3, #89	; 0x59
 800f272:	d199      	bne.n	800f1a8 <_scanf_float+0x60>
 800f274:	2d07      	cmp	r5, #7
 800f276:	d197      	bne.n	800f1a8 <_scanf_float+0x60>
 800f278:	2508      	movs	r5, #8
 800f27a:	e029      	b.n	800f2d0 <_scanf_float+0x188>
 800f27c:	2b74      	cmp	r3, #116	; 0x74
 800f27e:	d06f      	beq.n	800f360 <_scanf_float+0x218>
 800f280:	2b79      	cmp	r3, #121	; 0x79
 800f282:	e7f6      	b.n	800f272 <_scanf_float+0x12a>
 800f284:	6821      	ldr	r1, [r4, #0]
 800f286:	05c8      	lsls	r0, r1, #23
 800f288:	d51a      	bpl.n	800f2c0 <_scanf_float+0x178>
 800f28a:	9b02      	ldr	r3, [sp, #8]
 800f28c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f290:	6021      	str	r1, [r4, #0]
 800f292:	f109 0901 	add.w	r9, r9, #1
 800f296:	b11b      	cbz	r3, 800f2a0 <_scanf_float+0x158>
 800f298:	3b01      	subs	r3, #1
 800f29a:	3201      	adds	r2, #1
 800f29c:	9302      	str	r3, [sp, #8]
 800f29e:	60a2      	str	r2, [r4, #8]
 800f2a0:	68a3      	ldr	r3, [r4, #8]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	60a3      	str	r3, [r4, #8]
 800f2a6:	6923      	ldr	r3, [r4, #16]
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	6123      	str	r3, [r4, #16]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	607b      	str	r3, [r7, #4]
 800f2b4:	f340 8084 	ble.w	800f3c0 <_scanf_float+0x278>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	603b      	str	r3, [r7, #0]
 800f2be:	e766      	b.n	800f18e <_scanf_float+0x46>
 800f2c0:	eb1a 0f05 	cmn.w	sl, r5
 800f2c4:	f47f af70 	bne.w	800f1a8 <_scanf_float+0x60>
 800f2c8:	6822      	ldr	r2, [r4, #0]
 800f2ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f2ce:	6022      	str	r2, [r4, #0]
 800f2d0:	f806 3b01 	strb.w	r3, [r6], #1
 800f2d4:	e7e4      	b.n	800f2a0 <_scanf_float+0x158>
 800f2d6:	6822      	ldr	r2, [r4, #0]
 800f2d8:	0610      	lsls	r0, r2, #24
 800f2da:	f57f af65 	bpl.w	800f1a8 <_scanf_float+0x60>
 800f2de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f2e2:	e7f4      	b.n	800f2ce <_scanf_float+0x186>
 800f2e4:	f1ba 0f00 	cmp.w	sl, #0
 800f2e8:	d10e      	bne.n	800f308 <_scanf_float+0x1c0>
 800f2ea:	f1b9 0f00 	cmp.w	r9, #0
 800f2ee:	d10e      	bne.n	800f30e <_scanf_float+0x1c6>
 800f2f0:	6822      	ldr	r2, [r4, #0]
 800f2f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f2f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f2fa:	d108      	bne.n	800f30e <_scanf_float+0x1c6>
 800f2fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f300:	6022      	str	r2, [r4, #0]
 800f302:	f04f 0a01 	mov.w	sl, #1
 800f306:	e7e3      	b.n	800f2d0 <_scanf_float+0x188>
 800f308:	f1ba 0f02 	cmp.w	sl, #2
 800f30c:	d055      	beq.n	800f3ba <_scanf_float+0x272>
 800f30e:	2d01      	cmp	r5, #1
 800f310:	d002      	beq.n	800f318 <_scanf_float+0x1d0>
 800f312:	2d04      	cmp	r5, #4
 800f314:	f47f af48 	bne.w	800f1a8 <_scanf_float+0x60>
 800f318:	3501      	adds	r5, #1
 800f31a:	b2ed      	uxtb	r5, r5
 800f31c:	e7d8      	b.n	800f2d0 <_scanf_float+0x188>
 800f31e:	f1ba 0f01 	cmp.w	sl, #1
 800f322:	f47f af41 	bne.w	800f1a8 <_scanf_float+0x60>
 800f326:	f04f 0a02 	mov.w	sl, #2
 800f32a:	e7d1      	b.n	800f2d0 <_scanf_float+0x188>
 800f32c:	b97d      	cbnz	r5, 800f34e <_scanf_float+0x206>
 800f32e:	f1b9 0f00 	cmp.w	r9, #0
 800f332:	f47f af3c 	bne.w	800f1ae <_scanf_float+0x66>
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f33c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f340:	f47f af39 	bne.w	800f1b6 <_scanf_float+0x6e>
 800f344:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f348:	6022      	str	r2, [r4, #0]
 800f34a:	2501      	movs	r5, #1
 800f34c:	e7c0      	b.n	800f2d0 <_scanf_float+0x188>
 800f34e:	2d03      	cmp	r5, #3
 800f350:	d0e2      	beq.n	800f318 <_scanf_float+0x1d0>
 800f352:	2d05      	cmp	r5, #5
 800f354:	e7de      	b.n	800f314 <_scanf_float+0x1cc>
 800f356:	2d02      	cmp	r5, #2
 800f358:	f47f af26 	bne.w	800f1a8 <_scanf_float+0x60>
 800f35c:	2503      	movs	r5, #3
 800f35e:	e7b7      	b.n	800f2d0 <_scanf_float+0x188>
 800f360:	2d06      	cmp	r5, #6
 800f362:	f47f af21 	bne.w	800f1a8 <_scanf_float+0x60>
 800f366:	2507      	movs	r5, #7
 800f368:	e7b2      	b.n	800f2d0 <_scanf_float+0x188>
 800f36a:	6822      	ldr	r2, [r4, #0]
 800f36c:	0591      	lsls	r1, r2, #22
 800f36e:	f57f af1b 	bpl.w	800f1a8 <_scanf_float+0x60>
 800f372:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f376:	6022      	str	r2, [r4, #0]
 800f378:	f8cd 9004 	str.w	r9, [sp, #4]
 800f37c:	e7a8      	b.n	800f2d0 <_scanf_float+0x188>
 800f37e:	6822      	ldr	r2, [r4, #0]
 800f380:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f388:	d006      	beq.n	800f398 <_scanf_float+0x250>
 800f38a:	0550      	lsls	r0, r2, #21
 800f38c:	f57f af0c 	bpl.w	800f1a8 <_scanf_float+0x60>
 800f390:	f1b9 0f00 	cmp.w	r9, #0
 800f394:	f43f af0f 	beq.w	800f1b6 <_scanf_float+0x6e>
 800f398:	0591      	lsls	r1, r2, #22
 800f39a:	bf58      	it	pl
 800f39c:	9901      	ldrpl	r1, [sp, #4]
 800f39e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3a2:	bf58      	it	pl
 800f3a4:	eba9 0101 	subpl.w	r1, r9, r1
 800f3a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f3ac:	bf58      	it	pl
 800f3ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3b2:	6022      	str	r2, [r4, #0]
 800f3b4:	f04f 0900 	mov.w	r9, #0
 800f3b8:	e78a      	b.n	800f2d0 <_scanf_float+0x188>
 800f3ba:	f04f 0a03 	mov.w	sl, #3
 800f3be:	e787      	b.n	800f2d0 <_scanf_float+0x188>
 800f3c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	4640      	mov	r0, r8
 800f3c8:	4798      	blx	r3
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	f43f aedf 	beq.w	800f18e <_scanf_float+0x46>
 800f3d0:	e6ea      	b.n	800f1a8 <_scanf_float+0x60>
 800f3d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3da:	463a      	mov	r2, r7
 800f3dc:	4640      	mov	r0, r8
 800f3de:	4798      	blx	r3
 800f3e0:	6923      	ldr	r3, [r4, #16]
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	6123      	str	r3, [r4, #16]
 800f3e6:	e6ec      	b.n	800f1c2 <_scanf_float+0x7a>
 800f3e8:	1e6b      	subs	r3, r5, #1
 800f3ea:	2b06      	cmp	r3, #6
 800f3ec:	d825      	bhi.n	800f43a <_scanf_float+0x2f2>
 800f3ee:	2d02      	cmp	r5, #2
 800f3f0:	d836      	bhi.n	800f460 <_scanf_float+0x318>
 800f3f2:	455e      	cmp	r6, fp
 800f3f4:	f67f aee8 	bls.w	800f1c8 <_scanf_float+0x80>
 800f3f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f400:	463a      	mov	r2, r7
 800f402:	4640      	mov	r0, r8
 800f404:	4798      	blx	r3
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	3b01      	subs	r3, #1
 800f40a:	6123      	str	r3, [r4, #16]
 800f40c:	e7f1      	b.n	800f3f2 <_scanf_float+0x2aa>
 800f40e:	9802      	ldr	r0, [sp, #8]
 800f410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f414:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f418:	9002      	str	r0, [sp, #8]
 800f41a:	463a      	mov	r2, r7
 800f41c:	4640      	mov	r0, r8
 800f41e:	4798      	blx	r3
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	3b01      	subs	r3, #1
 800f424:	6123      	str	r3, [r4, #16]
 800f426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f42a:	fa5f fa8a 	uxtb.w	sl, sl
 800f42e:	f1ba 0f02 	cmp.w	sl, #2
 800f432:	d1ec      	bne.n	800f40e <_scanf_float+0x2c6>
 800f434:	3d03      	subs	r5, #3
 800f436:	b2ed      	uxtb	r5, r5
 800f438:	1b76      	subs	r6, r6, r5
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	05da      	lsls	r2, r3, #23
 800f43e:	d52f      	bpl.n	800f4a0 <_scanf_float+0x358>
 800f440:	055b      	lsls	r3, r3, #21
 800f442:	d510      	bpl.n	800f466 <_scanf_float+0x31e>
 800f444:	455e      	cmp	r6, fp
 800f446:	f67f aebf 	bls.w	800f1c8 <_scanf_float+0x80>
 800f44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f44e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f452:	463a      	mov	r2, r7
 800f454:	4640      	mov	r0, r8
 800f456:	4798      	blx	r3
 800f458:	6923      	ldr	r3, [r4, #16]
 800f45a:	3b01      	subs	r3, #1
 800f45c:	6123      	str	r3, [r4, #16]
 800f45e:	e7f1      	b.n	800f444 <_scanf_float+0x2fc>
 800f460:	46aa      	mov	sl, r5
 800f462:	9602      	str	r6, [sp, #8]
 800f464:	e7df      	b.n	800f426 <_scanf_float+0x2de>
 800f466:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f46a:	6923      	ldr	r3, [r4, #16]
 800f46c:	2965      	cmp	r1, #101	; 0x65
 800f46e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f472:	f106 35ff 	add.w	r5, r6, #4294967295
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	d00c      	beq.n	800f494 <_scanf_float+0x34c>
 800f47a:	2945      	cmp	r1, #69	; 0x45
 800f47c:	d00a      	beq.n	800f494 <_scanf_float+0x34c>
 800f47e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f482:	463a      	mov	r2, r7
 800f484:	4640      	mov	r0, r8
 800f486:	4798      	blx	r3
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f48e:	3b01      	subs	r3, #1
 800f490:	1eb5      	subs	r5, r6, #2
 800f492:	6123      	str	r3, [r4, #16]
 800f494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f498:	463a      	mov	r2, r7
 800f49a:	4640      	mov	r0, r8
 800f49c:	4798      	blx	r3
 800f49e:	462e      	mov	r6, r5
 800f4a0:	6825      	ldr	r5, [r4, #0]
 800f4a2:	f015 0510 	ands.w	r5, r5, #16
 800f4a6:	d158      	bne.n	800f55a <_scanf_float+0x412>
 800f4a8:	7035      	strb	r5, [r6, #0]
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4b4:	d11c      	bne.n	800f4f0 <_scanf_float+0x3a8>
 800f4b6:	9b01      	ldr	r3, [sp, #4]
 800f4b8:	454b      	cmp	r3, r9
 800f4ba:	eba3 0209 	sub.w	r2, r3, r9
 800f4be:	d124      	bne.n	800f50a <_scanf_float+0x3c2>
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	4659      	mov	r1, fp
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	f002 fc53 	bl	8011d70 <_strtod_r>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	6821      	ldr	r1, [r4, #0]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f011 0f02 	tst.w	r1, #2
 800f4d4:	ec57 6b10 	vmov	r6, r7, d0
 800f4d8:	f103 0204 	add.w	r2, r3, #4
 800f4dc:	d020      	beq.n	800f520 <_scanf_float+0x3d8>
 800f4de:	9903      	ldr	r1, [sp, #12]
 800f4e0:	600a      	str	r2, [r1, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	e9c3 6700 	strd	r6, r7, [r3]
 800f4e8:	68e3      	ldr	r3, [r4, #12]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	60e3      	str	r3, [r4, #12]
 800f4ee:	e66c      	b.n	800f1ca <_scanf_float+0x82>
 800f4f0:	9b04      	ldr	r3, [sp, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d0e4      	beq.n	800f4c0 <_scanf_float+0x378>
 800f4f6:	9905      	ldr	r1, [sp, #20]
 800f4f8:	230a      	movs	r3, #10
 800f4fa:	462a      	mov	r2, r5
 800f4fc:	3101      	adds	r1, #1
 800f4fe:	4640      	mov	r0, r8
 800f500:	f7ff f9b0 	bl	800e864 <_strtol_r>
 800f504:	9b04      	ldr	r3, [sp, #16]
 800f506:	9e05      	ldr	r6, [sp, #20]
 800f508:	1ac2      	subs	r2, r0, r3
 800f50a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f50e:	429e      	cmp	r6, r3
 800f510:	bf28      	it	cs
 800f512:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f516:	4912      	ldr	r1, [pc, #72]	; (800f560 <_scanf_float+0x418>)
 800f518:	4630      	mov	r0, r6
 800f51a:	f000 f8e7 	bl	800f6ec <siprintf>
 800f51e:	e7cf      	b.n	800f4c0 <_scanf_float+0x378>
 800f520:	f011 0f04 	tst.w	r1, #4
 800f524:	9903      	ldr	r1, [sp, #12]
 800f526:	600a      	str	r2, [r1, #0]
 800f528:	d1db      	bne.n	800f4e2 <_scanf_float+0x39a>
 800f52a:	f8d3 8000 	ldr.w	r8, [r3]
 800f52e:	ee10 2a10 	vmov	r2, s0
 800f532:	ee10 0a10 	vmov	r0, s0
 800f536:	463b      	mov	r3, r7
 800f538:	4639      	mov	r1, r7
 800f53a:	f7f1 fb1f 	bl	8000b7c <__aeabi_dcmpun>
 800f53e:	b128      	cbz	r0, 800f54c <_scanf_float+0x404>
 800f540:	4808      	ldr	r0, [pc, #32]	; (800f564 <_scanf_float+0x41c>)
 800f542:	f000 f9db 	bl	800f8fc <nanf>
 800f546:	ed88 0a00 	vstr	s0, [r8]
 800f54a:	e7cd      	b.n	800f4e8 <_scanf_float+0x3a0>
 800f54c:	4630      	mov	r0, r6
 800f54e:	4639      	mov	r1, r7
 800f550:	f7f1 fb72 	bl	8000c38 <__aeabi_d2f>
 800f554:	f8c8 0000 	str.w	r0, [r8]
 800f558:	e7c6      	b.n	800f4e8 <_scanf_float+0x3a0>
 800f55a:	2500      	movs	r5, #0
 800f55c:	e635      	b.n	800f1ca <_scanf_float+0x82>
 800f55e:	bf00      	nop
 800f560:	080135f9 	.word	0x080135f9
 800f564:	0801388c 	.word	0x0801388c

0800f568 <std>:
 800f568:	2300      	movs	r3, #0
 800f56a:	b510      	push	{r4, lr}
 800f56c:	4604      	mov	r4, r0
 800f56e:	e9c0 3300 	strd	r3, r3, [r0]
 800f572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f576:	6083      	str	r3, [r0, #8]
 800f578:	8181      	strh	r1, [r0, #12]
 800f57a:	6643      	str	r3, [r0, #100]	; 0x64
 800f57c:	81c2      	strh	r2, [r0, #14]
 800f57e:	6183      	str	r3, [r0, #24]
 800f580:	4619      	mov	r1, r3
 800f582:	2208      	movs	r2, #8
 800f584:	305c      	adds	r0, #92	; 0x5c
 800f586:	f000 f914 	bl	800f7b2 <memset>
 800f58a:	4b0d      	ldr	r3, [pc, #52]	; (800f5c0 <std+0x58>)
 800f58c:	6263      	str	r3, [r4, #36]	; 0x24
 800f58e:	4b0d      	ldr	r3, [pc, #52]	; (800f5c4 <std+0x5c>)
 800f590:	62a3      	str	r3, [r4, #40]	; 0x28
 800f592:	4b0d      	ldr	r3, [pc, #52]	; (800f5c8 <std+0x60>)
 800f594:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f596:	4b0d      	ldr	r3, [pc, #52]	; (800f5cc <std+0x64>)
 800f598:	6323      	str	r3, [r4, #48]	; 0x30
 800f59a:	4b0d      	ldr	r3, [pc, #52]	; (800f5d0 <std+0x68>)
 800f59c:	6224      	str	r4, [r4, #32]
 800f59e:	429c      	cmp	r4, r3
 800f5a0:	d006      	beq.n	800f5b0 <std+0x48>
 800f5a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f5a6:	4294      	cmp	r4, r2
 800f5a8:	d002      	beq.n	800f5b0 <std+0x48>
 800f5aa:	33d0      	adds	r3, #208	; 0xd0
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	d105      	bne.n	800f5bc <std+0x54>
 800f5b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5b8:	f000 b98e 	b.w	800f8d8 <__retarget_lock_init_recursive>
 800f5bc:	bd10      	pop	{r4, pc}
 800f5be:	bf00      	nop
 800f5c0:	0800f72d 	.word	0x0800f72d
 800f5c4:	0800f74f 	.word	0x0800f74f
 800f5c8:	0800f787 	.word	0x0800f787
 800f5cc:	0800f7ab 	.word	0x0800f7ab
 800f5d0:	200012f4 	.word	0x200012f4

0800f5d4 <stdio_exit_handler>:
 800f5d4:	4a02      	ldr	r2, [pc, #8]	; (800f5e0 <stdio_exit_handler+0xc>)
 800f5d6:	4903      	ldr	r1, [pc, #12]	; (800f5e4 <stdio_exit_handler+0x10>)
 800f5d8:	4803      	ldr	r0, [pc, #12]	; (800f5e8 <stdio_exit_handler+0x14>)
 800f5da:	f000 b869 	b.w	800f6b0 <_fwalk_sglue>
 800f5de:	bf00      	nop
 800f5e0:	2000000c 	.word	0x2000000c
 800f5e4:	08012139 	.word	0x08012139
 800f5e8:	20000018 	.word	0x20000018

0800f5ec <cleanup_stdio>:
 800f5ec:	6841      	ldr	r1, [r0, #4]
 800f5ee:	4b0c      	ldr	r3, [pc, #48]	; (800f620 <cleanup_stdio+0x34>)
 800f5f0:	4299      	cmp	r1, r3
 800f5f2:	b510      	push	{r4, lr}
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	d001      	beq.n	800f5fc <cleanup_stdio+0x10>
 800f5f8:	f002 fd9e 	bl	8012138 <_fflush_r>
 800f5fc:	68a1      	ldr	r1, [r4, #8]
 800f5fe:	4b09      	ldr	r3, [pc, #36]	; (800f624 <cleanup_stdio+0x38>)
 800f600:	4299      	cmp	r1, r3
 800f602:	d002      	beq.n	800f60a <cleanup_stdio+0x1e>
 800f604:	4620      	mov	r0, r4
 800f606:	f002 fd97 	bl	8012138 <_fflush_r>
 800f60a:	68e1      	ldr	r1, [r4, #12]
 800f60c:	4b06      	ldr	r3, [pc, #24]	; (800f628 <cleanup_stdio+0x3c>)
 800f60e:	4299      	cmp	r1, r3
 800f610:	d004      	beq.n	800f61c <cleanup_stdio+0x30>
 800f612:	4620      	mov	r0, r4
 800f614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f618:	f002 bd8e 	b.w	8012138 <_fflush_r>
 800f61c:	bd10      	pop	{r4, pc}
 800f61e:	bf00      	nop
 800f620:	200012f4 	.word	0x200012f4
 800f624:	2000135c 	.word	0x2000135c
 800f628:	200013c4 	.word	0x200013c4

0800f62c <global_stdio_init.part.0>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	4b0b      	ldr	r3, [pc, #44]	; (800f65c <global_stdio_init.part.0+0x30>)
 800f630:	4c0b      	ldr	r4, [pc, #44]	; (800f660 <global_stdio_init.part.0+0x34>)
 800f632:	4a0c      	ldr	r2, [pc, #48]	; (800f664 <global_stdio_init.part.0+0x38>)
 800f634:	601a      	str	r2, [r3, #0]
 800f636:	4620      	mov	r0, r4
 800f638:	2200      	movs	r2, #0
 800f63a:	2104      	movs	r1, #4
 800f63c:	f7ff ff94 	bl	800f568 <std>
 800f640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f644:	2201      	movs	r2, #1
 800f646:	2109      	movs	r1, #9
 800f648:	f7ff ff8e 	bl	800f568 <std>
 800f64c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f650:	2202      	movs	r2, #2
 800f652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f656:	2112      	movs	r1, #18
 800f658:	f7ff bf86 	b.w	800f568 <std>
 800f65c:	2000142c 	.word	0x2000142c
 800f660:	200012f4 	.word	0x200012f4
 800f664:	0800f5d5 	.word	0x0800f5d5

0800f668 <__sfp_lock_acquire>:
 800f668:	4801      	ldr	r0, [pc, #4]	; (800f670 <__sfp_lock_acquire+0x8>)
 800f66a:	f000 b936 	b.w	800f8da <__retarget_lock_acquire_recursive>
 800f66e:	bf00      	nop
 800f670:	20001435 	.word	0x20001435

0800f674 <__sfp_lock_release>:
 800f674:	4801      	ldr	r0, [pc, #4]	; (800f67c <__sfp_lock_release+0x8>)
 800f676:	f000 b931 	b.w	800f8dc <__retarget_lock_release_recursive>
 800f67a:	bf00      	nop
 800f67c:	20001435 	.word	0x20001435

0800f680 <__sinit>:
 800f680:	b510      	push	{r4, lr}
 800f682:	4604      	mov	r4, r0
 800f684:	f7ff fff0 	bl	800f668 <__sfp_lock_acquire>
 800f688:	6a23      	ldr	r3, [r4, #32]
 800f68a:	b11b      	cbz	r3, 800f694 <__sinit+0x14>
 800f68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f690:	f7ff bff0 	b.w	800f674 <__sfp_lock_release>
 800f694:	4b04      	ldr	r3, [pc, #16]	; (800f6a8 <__sinit+0x28>)
 800f696:	6223      	str	r3, [r4, #32]
 800f698:	4b04      	ldr	r3, [pc, #16]	; (800f6ac <__sinit+0x2c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1f5      	bne.n	800f68c <__sinit+0xc>
 800f6a0:	f7ff ffc4 	bl	800f62c <global_stdio_init.part.0>
 800f6a4:	e7f2      	b.n	800f68c <__sinit+0xc>
 800f6a6:	bf00      	nop
 800f6a8:	0800f5ed 	.word	0x0800f5ed
 800f6ac:	2000142c 	.word	0x2000142c

0800f6b0 <_fwalk_sglue>:
 800f6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	4688      	mov	r8, r1
 800f6b8:	4614      	mov	r4, r2
 800f6ba:	2600      	movs	r6, #0
 800f6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800f6c4:	d505      	bpl.n	800f6d2 <_fwalk_sglue+0x22>
 800f6c6:	6824      	ldr	r4, [r4, #0]
 800f6c8:	2c00      	cmp	r4, #0
 800f6ca:	d1f7      	bne.n	800f6bc <_fwalk_sglue+0xc>
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6d2:	89ab      	ldrh	r3, [r5, #12]
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d907      	bls.n	800f6e8 <_fwalk_sglue+0x38>
 800f6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	d003      	beq.n	800f6e8 <_fwalk_sglue+0x38>
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	4638      	mov	r0, r7
 800f6e4:	47c0      	blx	r8
 800f6e6:	4306      	orrs	r6, r0
 800f6e8:	3568      	adds	r5, #104	; 0x68
 800f6ea:	e7e9      	b.n	800f6c0 <_fwalk_sglue+0x10>

0800f6ec <siprintf>:
 800f6ec:	b40e      	push	{r1, r2, r3}
 800f6ee:	b500      	push	{lr}
 800f6f0:	b09c      	sub	sp, #112	; 0x70
 800f6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f6f4:	9002      	str	r0, [sp, #8]
 800f6f6:	9006      	str	r0, [sp, #24]
 800f6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6fc:	4809      	ldr	r0, [pc, #36]	; (800f724 <siprintf+0x38>)
 800f6fe:	9107      	str	r1, [sp, #28]
 800f700:	9104      	str	r1, [sp, #16]
 800f702:	4909      	ldr	r1, [pc, #36]	; (800f728 <siprintf+0x3c>)
 800f704:	f853 2b04 	ldr.w	r2, [r3], #4
 800f708:	9105      	str	r1, [sp, #20]
 800f70a:	6800      	ldr	r0, [r0, #0]
 800f70c:	9301      	str	r3, [sp, #4]
 800f70e:	a902      	add	r1, sp, #8
 800f710:	f002 fb8e 	bl	8011e30 <_svfiprintf_r>
 800f714:	9b02      	ldr	r3, [sp, #8]
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
 800f71a:	b01c      	add	sp, #112	; 0x70
 800f71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f720:	b003      	add	sp, #12
 800f722:	4770      	bx	lr
 800f724:	20000064 	.word	0x20000064
 800f728:	ffff0208 	.word	0xffff0208

0800f72c <__sread>:
 800f72c:	b510      	push	{r4, lr}
 800f72e:	460c      	mov	r4, r1
 800f730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f734:	f000 f882 	bl	800f83c <_read_r>
 800f738:	2800      	cmp	r0, #0
 800f73a:	bfab      	itete	ge
 800f73c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f73e:	89a3      	ldrhlt	r3, [r4, #12]
 800f740:	181b      	addge	r3, r3, r0
 800f742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f746:	bfac      	ite	ge
 800f748:	6563      	strge	r3, [r4, #84]	; 0x54
 800f74a:	81a3      	strhlt	r3, [r4, #12]
 800f74c:	bd10      	pop	{r4, pc}

0800f74e <__swrite>:
 800f74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f752:	461f      	mov	r7, r3
 800f754:	898b      	ldrh	r3, [r1, #12]
 800f756:	05db      	lsls	r3, r3, #23
 800f758:	4605      	mov	r5, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	4616      	mov	r6, r2
 800f75e:	d505      	bpl.n	800f76c <__swrite+0x1e>
 800f760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f764:	2302      	movs	r3, #2
 800f766:	2200      	movs	r2, #0
 800f768:	f000 f856 	bl	800f818 <_lseek_r>
 800f76c:	89a3      	ldrh	r3, [r4, #12]
 800f76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f776:	81a3      	strh	r3, [r4, #12]
 800f778:	4632      	mov	r2, r6
 800f77a:	463b      	mov	r3, r7
 800f77c:	4628      	mov	r0, r5
 800f77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f782:	f000 b86d 	b.w	800f860 <_write_r>

0800f786 <__sseek>:
 800f786:	b510      	push	{r4, lr}
 800f788:	460c      	mov	r4, r1
 800f78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f78e:	f000 f843 	bl	800f818 <_lseek_r>
 800f792:	1c43      	adds	r3, r0, #1
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	bf15      	itete	ne
 800f798:	6560      	strne	r0, [r4, #84]	; 0x54
 800f79a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f79e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7a2:	81a3      	strheq	r3, [r4, #12]
 800f7a4:	bf18      	it	ne
 800f7a6:	81a3      	strhne	r3, [r4, #12]
 800f7a8:	bd10      	pop	{r4, pc}

0800f7aa <__sclose>:
 800f7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ae:	f000 b823 	b.w	800f7f8 <_close_r>

0800f7b2 <memset>:
 800f7b2:	4402      	add	r2, r0
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d100      	bne.n	800f7bc <memset+0xa>
 800f7ba:	4770      	bx	lr
 800f7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800f7c0:	e7f9      	b.n	800f7b6 <memset+0x4>

0800f7c2 <strstr>:
 800f7c2:	780a      	ldrb	r2, [r1, #0]
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	b96a      	cbnz	r2, 800f7e4 <strstr+0x22>
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d109      	bne.n	800f7e2 <strstr+0x20>
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	4605      	mov	r5, r0
 800f7d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d0f6      	beq.n	800f7c8 <strstr+0x6>
 800f7da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f7de:	429e      	cmp	r6, r3
 800f7e0:	d0f7      	beq.n	800f7d2 <strstr+0x10>
 800f7e2:	3001      	adds	r0, #1
 800f7e4:	7803      	ldrb	r3, [r0, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1ef      	bne.n	800f7ca <strstr+0x8>
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	e7ec      	b.n	800f7c8 <strstr+0x6>
	...

0800f7f0 <_localeconv_r>:
 800f7f0:	4800      	ldr	r0, [pc, #0]	; (800f7f4 <_localeconv_r+0x4>)
 800f7f2:	4770      	bx	lr
 800f7f4:	20000158 	.word	0x20000158

0800f7f8 <_close_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d06      	ldr	r5, [pc, #24]	; (800f814 <_close_r+0x1c>)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	4604      	mov	r4, r0
 800f800:	4608      	mov	r0, r1
 800f802:	602b      	str	r3, [r5, #0]
 800f804:	f7f9 f979 	bl	8008afa <_close>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_close_r+0x1a>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_close_r+0x1a>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	20001430 	.word	0x20001430

0800f818 <_lseek_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4d07      	ldr	r5, [pc, #28]	; (800f838 <_lseek_r+0x20>)
 800f81c:	4604      	mov	r4, r0
 800f81e:	4608      	mov	r0, r1
 800f820:	4611      	mov	r1, r2
 800f822:	2200      	movs	r2, #0
 800f824:	602a      	str	r2, [r5, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	f7f9 f98e 	bl	8008b48 <_lseek>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_lseek_r+0x1e>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_lseek_r+0x1e>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	20001430 	.word	0x20001430

0800f83c <_read_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4d07      	ldr	r5, [pc, #28]	; (800f85c <_read_r+0x20>)
 800f840:	4604      	mov	r4, r0
 800f842:	4608      	mov	r0, r1
 800f844:	4611      	mov	r1, r2
 800f846:	2200      	movs	r2, #0
 800f848:	602a      	str	r2, [r5, #0]
 800f84a:	461a      	mov	r2, r3
 800f84c:	f7f9 f938 	bl	8008ac0 <_read>
 800f850:	1c43      	adds	r3, r0, #1
 800f852:	d102      	bne.n	800f85a <_read_r+0x1e>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	b103      	cbz	r3, 800f85a <_read_r+0x1e>
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	bd38      	pop	{r3, r4, r5, pc}
 800f85c:	20001430 	.word	0x20001430

0800f860 <_write_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4d07      	ldr	r5, [pc, #28]	; (800f880 <_write_r+0x20>)
 800f864:	4604      	mov	r4, r0
 800f866:	4608      	mov	r0, r1
 800f868:	4611      	mov	r1, r2
 800f86a:	2200      	movs	r2, #0
 800f86c:	602a      	str	r2, [r5, #0]
 800f86e:	461a      	mov	r2, r3
 800f870:	f7f1 fe6e 	bl	8001550 <_write>
 800f874:	1c43      	adds	r3, r0, #1
 800f876:	d102      	bne.n	800f87e <_write_r+0x1e>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	b103      	cbz	r3, 800f87e <_write_r+0x1e>
 800f87c:	6023      	str	r3, [r4, #0]
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	20001430 	.word	0x20001430

0800f884 <__errno>:
 800f884:	4b01      	ldr	r3, [pc, #4]	; (800f88c <__errno+0x8>)
 800f886:	6818      	ldr	r0, [r3, #0]
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	20000064 	.word	0x20000064

0800f890 <__libc_init_array>:
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	4d0d      	ldr	r5, [pc, #52]	; (800f8c8 <__libc_init_array+0x38>)
 800f894:	4c0d      	ldr	r4, [pc, #52]	; (800f8cc <__libc_init_array+0x3c>)
 800f896:	1b64      	subs	r4, r4, r5
 800f898:	10a4      	asrs	r4, r4, #2
 800f89a:	2600      	movs	r6, #0
 800f89c:	42a6      	cmp	r6, r4
 800f89e:	d109      	bne.n	800f8b4 <__libc_init_array+0x24>
 800f8a0:	4d0b      	ldr	r5, [pc, #44]	; (800f8d0 <__libc_init_array+0x40>)
 800f8a2:	4c0c      	ldr	r4, [pc, #48]	; (800f8d4 <__libc_init_array+0x44>)
 800f8a4:	f003 fb50 	bl	8012f48 <_init>
 800f8a8:	1b64      	subs	r4, r4, r5
 800f8aa:	10a4      	asrs	r4, r4, #2
 800f8ac:	2600      	movs	r6, #0
 800f8ae:	42a6      	cmp	r6, r4
 800f8b0:	d105      	bne.n	800f8be <__libc_init_array+0x2e>
 800f8b2:	bd70      	pop	{r4, r5, r6, pc}
 800f8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8b8:	4798      	blx	r3
 800f8ba:	3601      	adds	r6, #1
 800f8bc:	e7ee      	b.n	800f89c <__libc_init_array+0xc>
 800f8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8c2:	4798      	blx	r3
 800f8c4:	3601      	adds	r6, #1
 800f8c6:	e7f2      	b.n	800f8ae <__libc_init_array+0x1e>
 800f8c8:	080138f8 	.word	0x080138f8
 800f8cc:	080138f8 	.word	0x080138f8
 800f8d0:	080138f8 	.word	0x080138f8
 800f8d4:	080138fc 	.word	0x080138fc

0800f8d8 <__retarget_lock_init_recursive>:
 800f8d8:	4770      	bx	lr

0800f8da <__retarget_lock_acquire_recursive>:
 800f8da:	4770      	bx	lr

0800f8dc <__retarget_lock_release_recursive>:
 800f8dc:	4770      	bx	lr

0800f8de <memcpy>:
 800f8de:	440a      	add	r2, r1
 800f8e0:	4291      	cmp	r1, r2
 800f8e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8e6:	d100      	bne.n	800f8ea <memcpy+0xc>
 800f8e8:	4770      	bx	lr
 800f8ea:	b510      	push	{r4, lr}
 800f8ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8f4:	4291      	cmp	r1, r2
 800f8f6:	d1f9      	bne.n	800f8ec <memcpy+0xe>
 800f8f8:	bd10      	pop	{r4, pc}
	...

0800f8fc <nanf>:
 800f8fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f904 <nanf+0x8>
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	7fc00000 	.word	0x7fc00000

0800f908 <quorem>:
 800f908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90c:	6903      	ldr	r3, [r0, #16]
 800f90e:	690c      	ldr	r4, [r1, #16]
 800f910:	42a3      	cmp	r3, r4
 800f912:	4607      	mov	r7, r0
 800f914:	db7e      	blt.n	800fa14 <quorem+0x10c>
 800f916:	3c01      	subs	r4, #1
 800f918:	f101 0814 	add.w	r8, r1, #20
 800f91c:	f100 0514 	add.w	r5, r0, #20
 800f920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f924:	9301      	str	r3, [sp, #4]
 800f926:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f92a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f92e:	3301      	adds	r3, #1
 800f930:	429a      	cmp	r2, r3
 800f932:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f936:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f93a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f93e:	d331      	bcc.n	800f9a4 <quorem+0x9c>
 800f940:	f04f 0e00 	mov.w	lr, #0
 800f944:	4640      	mov	r0, r8
 800f946:	46ac      	mov	ip, r5
 800f948:	46f2      	mov	sl, lr
 800f94a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f94e:	b293      	uxth	r3, r2
 800f950:	fb06 e303 	mla	r3, r6, r3, lr
 800f954:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f958:	0c1a      	lsrs	r2, r3, #16
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	ebaa 0303 	sub.w	r3, sl, r3
 800f960:	f8dc a000 	ldr.w	sl, [ip]
 800f964:	fa13 f38a 	uxtah	r3, r3, sl
 800f968:	fb06 220e 	mla	r2, r6, lr, r2
 800f96c:	9300      	str	r3, [sp, #0]
 800f96e:	9b00      	ldr	r3, [sp, #0]
 800f970:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f974:	b292      	uxth	r2, r2
 800f976:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f97a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f97e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f982:	4581      	cmp	r9, r0
 800f984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f988:	f84c 3b04 	str.w	r3, [ip], #4
 800f98c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f990:	d2db      	bcs.n	800f94a <quorem+0x42>
 800f992:	f855 300b 	ldr.w	r3, [r5, fp]
 800f996:	b92b      	cbnz	r3, 800f9a4 <quorem+0x9c>
 800f998:	9b01      	ldr	r3, [sp, #4]
 800f99a:	3b04      	subs	r3, #4
 800f99c:	429d      	cmp	r5, r3
 800f99e:	461a      	mov	r2, r3
 800f9a0:	d32c      	bcc.n	800f9fc <quorem+0xf4>
 800f9a2:	613c      	str	r4, [r7, #16]
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f001 f9ef 	bl	8010d88 <__mcmp>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	db22      	blt.n	800f9f4 <quorem+0xec>
 800f9ae:	3601      	adds	r6, #1
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9b8:	f8d1 c000 	ldr.w	ip, [r1]
 800f9bc:	b293      	uxth	r3, r2
 800f9be:	1ac3      	subs	r3, r0, r3
 800f9c0:	0c12      	lsrs	r2, r2, #16
 800f9c2:	fa13 f38c 	uxtah	r3, r3, ip
 800f9c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f9ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9d4:	45c1      	cmp	r9, r8
 800f9d6:	f841 3b04 	str.w	r3, [r1], #4
 800f9da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f9de:	d2e9      	bcs.n	800f9b4 <quorem+0xac>
 800f9e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9e8:	b922      	cbnz	r2, 800f9f4 <quorem+0xec>
 800f9ea:	3b04      	subs	r3, #4
 800f9ec:	429d      	cmp	r5, r3
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	d30a      	bcc.n	800fa08 <quorem+0x100>
 800f9f2:	613c      	str	r4, [r7, #16]
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	b003      	add	sp, #12
 800f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fc:	6812      	ldr	r2, [r2, #0]
 800f9fe:	3b04      	subs	r3, #4
 800fa00:	2a00      	cmp	r2, #0
 800fa02:	d1ce      	bne.n	800f9a2 <quorem+0x9a>
 800fa04:	3c01      	subs	r4, #1
 800fa06:	e7c9      	b.n	800f99c <quorem+0x94>
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	3b04      	subs	r3, #4
 800fa0c:	2a00      	cmp	r2, #0
 800fa0e:	d1f0      	bne.n	800f9f2 <quorem+0xea>
 800fa10:	3c01      	subs	r4, #1
 800fa12:	e7eb      	b.n	800f9ec <quorem+0xe4>
 800fa14:	2000      	movs	r0, #0
 800fa16:	e7ee      	b.n	800f9f6 <quorem+0xee>

0800fa18 <_dtoa_r>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	ed2d 8b04 	vpush	{d8-d9}
 800fa20:	69c5      	ldr	r5, [r0, #28]
 800fa22:	b093      	sub	sp, #76	; 0x4c
 800fa24:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fa28:	ec57 6b10 	vmov	r6, r7, d0
 800fa2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa30:	9107      	str	r1, [sp, #28]
 800fa32:	4604      	mov	r4, r0
 800fa34:	920a      	str	r2, [sp, #40]	; 0x28
 800fa36:	930d      	str	r3, [sp, #52]	; 0x34
 800fa38:	b975      	cbnz	r5, 800fa58 <_dtoa_r+0x40>
 800fa3a:	2010      	movs	r0, #16
 800fa3c:	f000 fe2a 	bl	8010694 <malloc>
 800fa40:	4602      	mov	r2, r0
 800fa42:	61e0      	str	r0, [r4, #28]
 800fa44:	b920      	cbnz	r0, 800fa50 <_dtoa_r+0x38>
 800fa46:	4bae      	ldr	r3, [pc, #696]	; (800fd00 <_dtoa_r+0x2e8>)
 800fa48:	21ef      	movs	r1, #239	; 0xef
 800fa4a:	48ae      	ldr	r0, [pc, #696]	; (800fd04 <_dtoa_r+0x2ec>)
 800fa4c:	f002 fbe0 	bl	8012210 <__assert_func>
 800fa50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa54:	6005      	str	r5, [r0, #0]
 800fa56:	60c5      	str	r5, [r0, #12]
 800fa58:	69e3      	ldr	r3, [r4, #28]
 800fa5a:	6819      	ldr	r1, [r3, #0]
 800fa5c:	b151      	cbz	r1, 800fa74 <_dtoa_r+0x5c>
 800fa5e:	685a      	ldr	r2, [r3, #4]
 800fa60:	604a      	str	r2, [r1, #4]
 800fa62:	2301      	movs	r3, #1
 800fa64:	4093      	lsls	r3, r2
 800fa66:	608b      	str	r3, [r1, #8]
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f000 ff07 	bl	801087c <_Bfree>
 800fa6e:	69e3      	ldr	r3, [r4, #28]
 800fa70:	2200      	movs	r2, #0
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	1e3b      	subs	r3, r7, #0
 800fa76:	bfbb      	ittet	lt
 800fa78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa7c:	9303      	strlt	r3, [sp, #12]
 800fa7e:	2300      	movge	r3, #0
 800fa80:	2201      	movlt	r2, #1
 800fa82:	bfac      	ite	ge
 800fa84:	f8c8 3000 	strge.w	r3, [r8]
 800fa88:	f8c8 2000 	strlt.w	r2, [r8]
 800fa8c:	4b9e      	ldr	r3, [pc, #632]	; (800fd08 <_dtoa_r+0x2f0>)
 800fa8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fa92:	ea33 0308 	bics.w	r3, r3, r8
 800fa96:	d11b      	bne.n	800fad0 <_dtoa_r+0xb8>
 800fa98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa9a:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800faa4:	4333      	orrs	r3, r6
 800faa6:	f000 8593 	beq.w	80105d0 <_dtoa_r+0xbb8>
 800faaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faac:	b963      	cbnz	r3, 800fac8 <_dtoa_r+0xb0>
 800faae:	4b97      	ldr	r3, [pc, #604]	; (800fd0c <_dtoa_r+0x2f4>)
 800fab0:	e027      	b.n	800fb02 <_dtoa_r+0xea>
 800fab2:	4b97      	ldr	r3, [pc, #604]	; (800fd10 <_dtoa_r+0x2f8>)
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	3308      	adds	r3, #8
 800fab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800faba:	6013      	str	r3, [r2, #0]
 800fabc:	9800      	ldr	r0, [sp, #0]
 800fabe:	b013      	add	sp, #76	; 0x4c
 800fac0:	ecbd 8b04 	vpop	{d8-d9}
 800fac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	4b90      	ldr	r3, [pc, #576]	; (800fd0c <_dtoa_r+0x2f4>)
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	3303      	adds	r3, #3
 800face:	e7f3      	b.n	800fab8 <_dtoa_r+0xa0>
 800fad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fad4:	2200      	movs	r2, #0
 800fad6:	ec51 0b17 	vmov	r0, r1, d7
 800fada:	eeb0 8a47 	vmov.f32	s16, s14
 800fade:	eef0 8a67 	vmov.f32	s17, s15
 800fae2:	2300      	movs	r3, #0
 800fae4:	f7f1 f818 	bl	8000b18 <__aeabi_dcmpeq>
 800fae8:	4681      	mov	r9, r0
 800faea:	b160      	cbz	r0, 800fb06 <_dtoa_r+0xee>
 800faec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800faee:	2301      	movs	r3, #1
 800faf0:	6013      	str	r3, [r2, #0]
 800faf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 8568 	beq.w	80105ca <_dtoa_r+0xbb2>
 800fafa:	4b86      	ldr	r3, [pc, #536]	; (800fd14 <_dtoa_r+0x2fc>)
 800fafc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fafe:	6013      	str	r3, [r2, #0]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	e7da      	b.n	800fabc <_dtoa_r+0xa4>
 800fb06:	aa10      	add	r2, sp, #64	; 0x40
 800fb08:	a911      	add	r1, sp, #68	; 0x44
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	eeb0 0a48 	vmov.f32	s0, s16
 800fb10:	eef0 0a68 	vmov.f32	s1, s17
 800fb14:	f001 fa4e 	bl	8010fb4 <__d2b>
 800fb18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb1c:	4682      	mov	sl, r0
 800fb1e:	2d00      	cmp	r5, #0
 800fb20:	d07f      	beq.n	800fc22 <_dtoa_r+0x20a>
 800fb22:	ee18 3a90 	vmov	r3, s17
 800fb26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fb2e:	ec51 0b18 	vmov	r0, r1, d8
 800fb32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fb36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fb3e:	4619      	mov	r1, r3
 800fb40:	2200      	movs	r2, #0
 800fb42:	4b75      	ldr	r3, [pc, #468]	; (800fd18 <_dtoa_r+0x300>)
 800fb44:	f7f0 fbc8 	bl	80002d8 <__aeabi_dsub>
 800fb48:	a367      	add	r3, pc, #412	; (adr r3, 800fce8 <_dtoa_r+0x2d0>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	f7f0 fd7b 	bl	8000648 <__aeabi_dmul>
 800fb52:	a367      	add	r3, pc, #412	; (adr r3, 800fcf0 <_dtoa_r+0x2d8>)
 800fb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb58:	f7f0 fbc0 	bl	80002dc <__adddf3>
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	4628      	mov	r0, r5
 800fb60:	460f      	mov	r7, r1
 800fb62:	f7f0 fd07 	bl	8000574 <__aeabi_i2d>
 800fb66:	a364      	add	r3, pc, #400	; (adr r3, 800fcf8 <_dtoa_r+0x2e0>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f7f0 fd6c 	bl	8000648 <__aeabi_dmul>
 800fb70:	4602      	mov	r2, r0
 800fb72:	460b      	mov	r3, r1
 800fb74:	4630      	mov	r0, r6
 800fb76:	4639      	mov	r1, r7
 800fb78:	f7f0 fbb0 	bl	80002dc <__adddf3>
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	460f      	mov	r7, r1
 800fb80:	f7f1 f812 	bl	8000ba8 <__aeabi_d2iz>
 800fb84:	2200      	movs	r2, #0
 800fb86:	4683      	mov	fp, r0
 800fb88:	2300      	movs	r3, #0
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	4639      	mov	r1, r7
 800fb8e:	f7f0 ffcd 	bl	8000b2c <__aeabi_dcmplt>
 800fb92:	b148      	cbz	r0, 800fba8 <_dtoa_r+0x190>
 800fb94:	4658      	mov	r0, fp
 800fb96:	f7f0 fced 	bl	8000574 <__aeabi_i2d>
 800fb9a:	4632      	mov	r2, r6
 800fb9c:	463b      	mov	r3, r7
 800fb9e:	f7f0 ffbb 	bl	8000b18 <__aeabi_dcmpeq>
 800fba2:	b908      	cbnz	r0, 800fba8 <_dtoa_r+0x190>
 800fba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fba8:	f1bb 0f16 	cmp.w	fp, #22
 800fbac:	d857      	bhi.n	800fc5e <_dtoa_r+0x246>
 800fbae:	4b5b      	ldr	r3, [pc, #364]	; (800fd1c <_dtoa_r+0x304>)
 800fbb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb8:	ec51 0b18 	vmov	r0, r1, d8
 800fbbc:	f7f0 ffb6 	bl	8000b2c <__aeabi_dcmplt>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d04e      	beq.n	800fc62 <_dtoa_r+0x24a>
 800fbc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fbc8:	2300      	movs	r3, #0
 800fbca:	930c      	str	r3, [sp, #48]	; 0x30
 800fbcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbce:	1b5b      	subs	r3, r3, r5
 800fbd0:	1e5a      	subs	r2, r3, #1
 800fbd2:	bf45      	ittet	mi
 800fbd4:	f1c3 0301 	rsbmi	r3, r3, #1
 800fbd8:	9305      	strmi	r3, [sp, #20]
 800fbda:	2300      	movpl	r3, #0
 800fbdc:	2300      	movmi	r3, #0
 800fbde:	9206      	str	r2, [sp, #24]
 800fbe0:	bf54      	ite	pl
 800fbe2:	9305      	strpl	r3, [sp, #20]
 800fbe4:	9306      	strmi	r3, [sp, #24]
 800fbe6:	f1bb 0f00 	cmp.w	fp, #0
 800fbea:	db3c      	blt.n	800fc66 <_dtoa_r+0x24e>
 800fbec:	9b06      	ldr	r3, [sp, #24]
 800fbee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fbf2:	445b      	add	r3, fp
 800fbf4:	9306      	str	r3, [sp, #24]
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	9308      	str	r3, [sp, #32]
 800fbfa:	9b07      	ldr	r3, [sp, #28]
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	d868      	bhi.n	800fcd2 <_dtoa_r+0x2ba>
 800fc00:	2b05      	cmp	r3, #5
 800fc02:	bfc4      	itt	gt
 800fc04:	3b04      	subgt	r3, #4
 800fc06:	9307      	strgt	r3, [sp, #28]
 800fc08:	9b07      	ldr	r3, [sp, #28]
 800fc0a:	f1a3 0302 	sub.w	r3, r3, #2
 800fc0e:	bfcc      	ite	gt
 800fc10:	2500      	movgt	r5, #0
 800fc12:	2501      	movle	r5, #1
 800fc14:	2b03      	cmp	r3, #3
 800fc16:	f200 8085 	bhi.w	800fd24 <_dtoa_r+0x30c>
 800fc1a:	e8df f003 	tbb	[pc, r3]
 800fc1e:	3b2e      	.short	0x3b2e
 800fc20:	5839      	.short	0x5839
 800fc22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fc26:	441d      	add	r5, r3
 800fc28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fc2c:	2b20      	cmp	r3, #32
 800fc2e:	bfc1      	itttt	gt
 800fc30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fc34:	fa08 f803 	lslgt.w	r8, r8, r3
 800fc38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fc3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fc40:	bfd6      	itet	le
 800fc42:	f1c3 0320 	rsble	r3, r3, #32
 800fc46:	ea48 0003 	orrgt.w	r0, r8, r3
 800fc4a:	fa06 f003 	lslle.w	r0, r6, r3
 800fc4e:	f7f0 fc81 	bl	8000554 <__aeabi_ui2d>
 800fc52:	2201      	movs	r2, #1
 800fc54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fc58:	3d01      	subs	r5, #1
 800fc5a:	920e      	str	r2, [sp, #56]	; 0x38
 800fc5c:	e76f      	b.n	800fb3e <_dtoa_r+0x126>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e7b3      	b.n	800fbca <_dtoa_r+0x1b2>
 800fc62:	900c      	str	r0, [sp, #48]	; 0x30
 800fc64:	e7b2      	b.n	800fbcc <_dtoa_r+0x1b4>
 800fc66:	9b05      	ldr	r3, [sp, #20]
 800fc68:	eba3 030b 	sub.w	r3, r3, fp
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	f1cb 0300 	rsb	r3, fp, #0
 800fc72:	9308      	str	r3, [sp, #32]
 800fc74:	2300      	movs	r3, #0
 800fc76:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc78:	e7bf      	b.n	800fbfa <_dtoa_r+0x1e2>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	dc52      	bgt.n	800fd2a <_dtoa_r+0x312>
 800fc84:	2301      	movs	r3, #1
 800fc86:	9301      	str	r3, [sp, #4]
 800fc88:	9304      	str	r3, [sp, #16]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	920a      	str	r2, [sp, #40]	; 0x28
 800fc8e:	e00b      	b.n	800fca8 <_dtoa_r+0x290>
 800fc90:	2301      	movs	r3, #1
 800fc92:	e7f3      	b.n	800fc7c <_dtoa_r+0x264>
 800fc94:	2300      	movs	r3, #0
 800fc96:	9309      	str	r3, [sp, #36]	; 0x24
 800fc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc9a:	445b      	add	r3, fp
 800fc9c:	9301      	str	r3, [sp, #4]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	9304      	str	r3, [sp, #16]
 800fca4:	bfb8      	it	lt
 800fca6:	2301      	movlt	r3, #1
 800fca8:	69e0      	ldr	r0, [r4, #28]
 800fcaa:	2100      	movs	r1, #0
 800fcac:	2204      	movs	r2, #4
 800fcae:	f102 0614 	add.w	r6, r2, #20
 800fcb2:	429e      	cmp	r6, r3
 800fcb4:	d93d      	bls.n	800fd32 <_dtoa_r+0x31a>
 800fcb6:	6041      	str	r1, [r0, #4]
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fd9f 	bl	80107fc <_Balloc>
 800fcbe:	9000      	str	r0, [sp, #0]
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d139      	bne.n	800fd38 <_dtoa_r+0x320>
 800fcc4:	4b16      	ldr	r3, [pc, #88]	; (800fd20 <_dtoa_r+0x308>)
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	f240 11af 	movw	r1, #431	; 0x1af
 800fccc:	e6bd      	b.n	800fa4a <_dtoa_r+0x32>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e7e1      	b.n	800fc96 <_dtoa_r+0x27e>
 800fcd2:	2501      	movs	r5, #1
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	9307      	str	r3, [sp, #28]
 800fcd8:	9509      	str	r5, [sp, #36]	; 0x24
 800fcda:	f04f 33ff 	mov.w	r3, #4294967295
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	9304      	str	r3, [sp, #16]
 800fce2:	2200      	movs	r2, #0
 800fce4:	2312      	movs	r3, #18
 800fce6:	e7d1      	b.n	800fc8c <_dtoa_r+0x274>
 800fce8:	636f4361 	.word	0x636f4361
 800fcec:	3fd287a7 	.word	0x3fd287a7
 800fcf0:	8b60c8b3 	.word	0x8b60c8b3
 800fcf4:	3fc68a28 	.word	0x3fc68a28
 800fcf8:	509f79fb 	.word	0x509f79fb
 800fcfc:	3fd34413 	.word	0x3fd34413
 800fd00:	0801360b 	.word	0x0801360b
 800fd04:	08013622 	.word	0x08013622
 800fd08:	7ff00000 	.word	0x7ff00000
 800fd0c:	08013607 	.word	0x08013607
 800fd10:	080135fe 	.word	0x080135fe
 800fd14:	080135d6 	.word	0x080135d6
 800fd18:	3ff80000 	.word	0x3ff80000
 800fd1c:	08013710 	.word	0x08013710
 800fd20:	0801367a 	.word	0x0801367a
 800fd24:	2301      	movs	r3, #1
 800fd26:	9309      	str	r3, [sp, #36]	; 0x24
 800fd28:	e7d7      	b.n	800fcda <_dtoa_r+0x2c2>
 800fd2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	9304      	str	r3, [sp, #16]
 800fd30:	e7ba      	b.n	800fca8 <_dtoa_r+0x290>
 800fd32:	3101      	adds	r1, #1
 800fd34:	0052      	lsls	r2, r2, #1
 800fd36:	e7ba      	b.n	800fcae <_dtoa_r+0x296>
 800fd38:	69e3      	ldr	r3, [r4, #28]
 800fd3a:	9a00      	ldr	r2, [sp, #0]
 800fd3c:	601a      	str	r2, [r3, #0]
 800fd3e:	9b04      	ldr	r3, [sp, #16]
 800fd40:	2b0e      	cmp	r3, #14
 800fd42:	f200 80a8 	bhi.w	800fe96 <_dtoa_r+0x47e>
 800fd46:	2d00      	cmp	r5, #0
 800fd48:	f000 80a5 	beq.w	800fe96 <_dtoa_r+0x47e>
 800fd4c:	f1bb 0f00 	cmp.w	fp, #0
 800fd50:	dd38      	ble.n	800fdc4 <_dtoa_r+0x3ac>
 800fd52:	4bc0      	ldr	r3, [pc, #768]	; (8010054 <_dtoa_r+0x63c>)
 800fd54:	f00b 020f 	and.w	r2, fp, #15
 800fd58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fd60:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fd64:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fd68:	d019      	beq.n	800fd9e <_dtoa_r+0x386>
 800fd6a:	4bbb      	ldr	r3, [pc, #748]	; (8010058 <_dtoa_r+0x640>)
 800fd6c:	ec51 0b18 	vmov	r0, r1, d8
 800fd70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd74:	f7f0 fd92 	bl	800089c <__aeabi_ddiv>
 800fd78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd7c:	f008 080f 	and.w	r8, r8, #15
 800fd80:	2503      	movs	r5, #3
 800fd82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010058 <_dtoa_r+0x640>
 800fd86:	f1b8 0f00 	cmp.w	r8, #0
 800fd8a:	d10a      	bne.n	800fda2 <_dtoa_r+0x38a>
 800fd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd90:	4632      	mov	r2, r6
 800fd92:	463b      	mov	r3, r7
 800fd94:	f7f0 fd82 	bl	800089c <__aeabi_ddiv>
 800fd98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd9c:	e02b      	b.n	800fdf6 <_dtoa_r+0x3de>
 800fd9e:	2502      	movs	r5, #2
 800fda0:	e7ef      	b.n	800fd82 <_dtoa_r+0x36a>
 800fda2:	f018 0f01 	tst.w	r8, #1
 800fda6:	d008      	beq.n	800fdba <_dtoa_r+0x3a2>
 800fda8:	4630      	mov	r0, r6
 800fdaa:	4639      	mov	r1, r7
 800fdac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fdb0:	f7f0 fc4a 	bl	8000648 <__aeabi_dmul>
 800fdb4:	3501      	adds	r5, #1
 800fdb6:	4606      	mov	r6, r0
 800fdb8:	460f      	mov	r7, r1
 800fdba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fdbe:	f109 0908 	add.w	r9, r9, #8
 800fdc2:	e7e0      	b.n	800fd86 <_dtoa_r+0x36e>
 800fdc4:	f000 809f 	beq.w	800ff06 <_dtoa_r+0x4ee>
 800fdc8:	f1cb 0600 	rsb	r6, fp, #0
 800fdcc:	4ba1      	ldr	r3, [pc, #644]	; (8010054 <_dtoa_r+0x63c>)
 800fdce:	4fa2      	ldr	r7, [pc, #648]	; (8010058 <_dtoa_r+0x640>)
 800fdd0:	f006 020f 	and.w	r2, r6, #15
 800fdd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fddc:	ec51 0b18 	vmov	r0, r1, d8
 800fde0:	f7f0 fc32 	bl	8000648 <__aeabi_dmul>
 800fde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fde8:	1136      	asrs	r6, r6, #4
 800fdea:	2300      	movs	r3, #0
 800fdec:	2502      	movs	r5, #2
 800fdee:	2e00      	cmp	r6, #0
 800fdf0:	d17e      	bne.n	800fef0 <_dtoa_r+0x4d8>
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1d0      	bne.n	800fd98 <_dtoa_r+0x380>
 800fdf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdf8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 8084 	beq.w	800ff0a <_dtoa_r+0x4f2>
 800fe02:	4b96      	ldr	r3, [pc, #600]	; (801005c <_dtoa_r+0x644>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	4640      	mov	r0, r8
 800fe08:	4649      	mov	r1, r9
 800fe0a:	f7f0 fe8f 	bl	8000b2c <__aeabi_dcmplt>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d07b      	beq.n	800ff0a <_dtoa_r+0x4f2>
 800fe12:	9b04      	ldr	r3, [sp, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d078      	beq.n	800ff0a <_dtoa_r+0x4f2>
 800fe18:	9b01      	ldr	r3, [sp, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	dd39      	ble.n	800fe92 <_dtoa_r+0x47a>
 800fe1e:	4b90      	ldr	r3, [pc, #576]	; (8010060 <_dtoa_r+0x648>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	4640      	mov	r0, r8
 800fe24:	4649      	mov	r1, r9
 800fe26:	f7f0 fc0f 	bl	8000648 <__aeabi_dmul>
 800fe2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe2e:	9e01      	ldr	r6, [sp, #4]
 800fe30:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fe34:	3501      	adds	r5, #1
 800fe36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	f7f0 fb9a 	bl	8000574 <__aeabi_i2d>
 800fe40:	4642      	mov	r2, r8
 800fe42:	464b      	mov	r3, r9
 800fe44:	f7f0 fc00 	bl	8000648 <__aeabi_dmul>
 800fe48:	4b86      	ldr	r3, [pc, #536]	; (8010064 <_dtoa_r+0x64c>)
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f7f0 fa46 	bl	80002dc <__adddf3>
 800fe50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fe54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe58:	9303      	str	r3, [sp, #12]
 800fe5a:	2e00      	cmp	r6, #0
 800fe5c:	d158      	bne.n	800ff10 <_dtoa_r+0x4f8>
 800fe5e:	4b82      	ldr	r3, [pc, #520]	; (8010068 <_dtoa_r+0x650>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	4640      	mov	r0, r8
 800fe64:	4649      	mov	r1, r9
 800fe66:	f7f0 fa37 	bl	80002d8 <__aeabi_dsub>
 800fe6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe6e:	4680      	mov	r8, r0
 800fe70:	4689      	mov	r9, r1
 800fe72:	f7f0 fe79 	bl	8000b68 <__aeabi_dcmpgt>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	f040 8296 	bne.w	80103a8 <_dtoa_r+0x990>
 800fe7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fe80:	4640      	mov	r0, r8
 800fe82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe86:	4649      	mov	r1, r9
 800fe88:	f7f0 fe50 	bl	8000b2c <__aeabi_dcmplt>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	f040 8289 	bne.w	80103a4 <_dtoa_r+0x98c>
 800fe92:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fe96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f2c0 814e 	blt.w	801013a <_dtoa_r+0x722>
 800fe9e:	f1bb 0f0e 	cmp.w	fp, #14
 800fea2:	f300 814a 	bgt.w	801013a <_dtoa_r+0x722>
 800fea6:	4b6b      	ldr	r3, [pc, #428]	; (8010054 <_dtoa_r+0x63c>)
 800fea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800feac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800feb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f280 80dc 	bge.w	8010070 <_dtoa_r+0x658>
 800feb8:	9b04      	ldr	r3, [sp, #16]
 800feba:	2b00      	cmp	r3, #0
 800febc:	f300 80d8 	bgt.w	8010070 <_dtoa_r+0x658>
 800fec0:	f040 826f 	bne.w	80103a2 <_dtoa_r+0x98a>
 800fec4:	4b68      	ldr	r3, [pc, #416]	; (8010068 <_dtoa_r+0x650>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	4640      	mov	r0, r8
 800feca:	4649      	mov	r1, r9
 800fecc:	f7f0 fbbc 	bl	8000648 <__aeabi_dmul>
 800fed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fed4:	f7f0 fe3e 	bl	8000b54 <__aeabi_dcmpge>
 800fed8:	9e04      	ldr	r6, [sp, #16]
 800feda:	4637      	mov	r7, r6
 800fedc:	2800      	cmp	r0, #0
 800fede:	f040 8245 	bne.w	801036c <_dtoa_r+0x954>
 800fee2:	9d00      	ldr	r5, [sp, #0]
 800fee4:	2331      	movs	r3, #49	; 0x31
 800fee6:	f805 3b01 	strb.w	r3, [r5], #1
 800feea:	f10b 0b01 	add.w	fp, fp, #1
 800feee:	e241      	b.n	8010374 <_dtoa_r+0x95c>
 800fef0:	07f2      	lsls	r2, r6, #31
 800fef2:	d505      	bpl.n	800ff00 <_dtoa_r+0x4e8>
 800fef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fef8:	f7f0 fba6 	bl	8000648 <__aeabi_dmul>
 800fefc:	3501      	adds	r5, #1
 800fefe:	2301      	movs	r3, #1
 800ff00:	1076      	asrs	r6, r6, #1
 800ff02:	3708      	adds	r7, #8
 800ff04:	e773      	b.n	800fdee <_dtoa_r+0x3d6>
 800ff06:	2502      	movs	r5, #2
 800ff08:	e775      	b.n	800fdf6 <_dtoa_r+0x3de>
 800ff0a:	9e04      	ldr	r6, [sp, #16]
 800ff0c:	465f      	mov	r7, fp
 800ff0e:	e792      	b.n	800fe36 <_dtoa_r+0x41e>
 800ff10:	9900      	ldr	r1, [sp, #0]
 800ff12:	4b50      	ldr	r3, [pc, #320]	; (8010054 <_dtoa_r+0x63c>)
 800ff14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff18:	4431      	add	r1, r6
 800ff1a:	9102      	str	r1, [sp, #8]
 800ff1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff1e:	eeb0 9a47 	vmov.f32	s18, s14
 800ff22:	eef0 9a67 	vmov.f32	s19, s15
 800ff26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ff2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff2e:	2900      	cmp	r1, #0
 800ff30:	d044      	beq.n	800ffbc <_dtoa_r+0x5a4>
 800ff32:	494e      	ldr	r1, [pc, #312]	; (801006c <_dtoa_r+0x654>)
 800ff34:	2000      	movs	r0, #0
 800ff36:	f7f0 fcb1 	bl	800089c <__aeabi_ddiv>
 800ff3a:	ec53 2b19 	vmov	r2, r3, d9
 800ff3e:	f7f0 f9cb 	bl	80002d8 <__aeabi_dsub>
 800ff42:	9d00      	ldr	r5, [sp, #0]
 800ff44:	ec41 0b19 	vmov	d9, r0, r1
 800ff48:	4649      	mov	r1, r9
 800ff4a:	4640      	mov	r0, r8
 800ff4c:	f7f0 fe2c 	bl	8000ba8 <__aeabi_d2iz>
 800ff50:	4606      	mov	r6, r0
 800ff52:	f7f0 fb0f 	bl	8000574 <__aeabi_i2d>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	4649      	mov	r1, r9
 800ff5e:	f7f0 f9bb 	bl	80002d8 <__aeabi_dsub>
 800ff62:	3630      	adds	r6, #48	; 0x30
 800ff64:	f805 6b01 	strb.w	r6, [r5], #1
 800ff68:	ec53 2b19 	vmov	r2, r3, d9
 800ff6c:	4680      	mov	r8, r0
 800ff6e:	4689      	mov	r9, r1
 800ff70:	f7f0 fddc 	bl	8000b2c <__aeabi_dcmplt>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d164      	bne.n	8010042 <_dtoa_r+0x62a>
 800ff78:	4642      	mov	r2, r8
 800ff7a:	464b      	mov	r3, r9
 800ff7c:	4937      	ldr	r1, [pc, #220]	; (801005c <_dtoa_r+0x644>)
 800ff7e:	2000      	movs	r0, #0
 800ff80:	f7f0 f9aa 	bl	80002d8 <__aeabi_dsub>
 800ff84:	ec53 2b19 	vmov	r2, r3, d9
 800ff88:	f7f0 fdd0 	bl	8000b2c <__aeabi_dcmplt>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	f040 80b6 	bne.w	80100fe <_dtoa_r+0x6e6>
 800ff92:	9b02      	ldr	r3, [sp, #8]
 800ff94:	429d      	cmp	r5, r3
 800ff96:	f43f af7c 	beq.w	800fe92 <_dtoa_r+0x47a>
 800ff9a:	4b31      	ldr	r3, [pc, #196]	; (8010060 <_dtoa_r+0x648>)
 800ff9c:	ec51 0b19 	vmov	r0, r1, d9
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f7f0 fb51 	bl	8000648 <__aeabi_dmul>
 800ffa6:	4b2e      	ldr	r3, [pc, #184]	; (8010060 <_dtoa_r+0x648>)
 800ffa8:	ec41 0b19 	vmov	d9, r0, r1
 800ffac:	2200      	movs	r2, #0
 800ffae:	4640      	mov	r0, r8
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	f7f0 fb49 	bl	8000648 <__aeabi_dmul>
 800ffb6:	4680      	mov	r8, r0
 800ffb8:	4689      	mov	r9, r1
 800ffba:	e7c5      	b.n	800ff48 <_dtoa_r+0x530>
 800ffbc:	ec51 0b17 	vmov	r0, r1, d7
 800ffc0:	f7f0 fb42 	bl	8000648 <__aeabi_dmul>
 800ffc4:	9b02      	ldr	r3, [sp, #8]
 800ffc6:	9d00      	ldr	r5, [sp, #0]
 800ffc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ffca:	ec41 0b19 	vmov	d9, r0, r1
 800ffce:	4649      	mov	r1, r9
 800ffd0:	4640      	mov	r0, r8
 800ffd2:	f7f0 fde9 	bl	8000ba8 <__aeabi_d2iz>
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	f7f0 facc 	bl	8000574 <__aeabi_i2d>
 800ffdc:	3630      	adds	r6, #48	; 0x30
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	4649      	mov	r1, r9
 800ffe6:	f7f0 f977 	bl	80002d8 <__aeabi_dsub>
 800ffea:	f805 6b01 	strb.w	r6, [r5], #1
 800ffee:	9b02      	ldr	r3, [sp, #8]
 800fff0:	429d      	cmp	r5, r3
 800fff2:	4680      	mov	r8, r0
 800fff4:	4689      	mov	r9, r1
 800fff6:	f04f 0200 	mov.w	r2, #0
 800fffa:	d124      	bne.n	8010046 <_dtoa_r+0x62e>
 800fffc:	4b1b      	ldr	r3, [pc, #108]	; (801006c <_dtoa_r+0x654>)
 800fffe:	ec51 0b19 	vmov	r0, r1, d9
 8010002:	f7f0 f96b 	bl	80002dc <__adddf3>
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	4640      	mov	r0, r8
 801000c:	4649      	mov	r1, r9
 801000e:	f7f0 fdab 	bl	8000b68 <__aeabi_dcmpgt>
 8010012:	2800      	cmp	r0, #0
 8010014:	d173      	bne.n	80100fe <_dtoa_r+0x6e6>
 8010016:	ec53 2b19 	vmov	r2, r3, d9
 801001a:	4914      	ldr	r1, [pc, #80]	; (801006c <_dtoa_r+0x654>)
 801001c:	2000      	movs	r0, #0
 801001e:	f7f0 f95b 	bl	80002d8 <__aeabi_dsub>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	4640      	mov	r0, r8
 8010028:	4649      	mov	r1, r9
 801002a:	f7f0 fd7f 	bl	8000b2c <__aeabi_dcmplt>
 801002e:	2800      	cmp	r0, #0
 8010030:	f43f af2f 	beq.w	800fe92 <_dtoa_r+0x47a>
 8010034:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010036:	1e6b      	subs	r3, r5, #1
 8010038:	930f      	str	r3, [sp, #60]	; 0x3c
 801003a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801003e:	2b30      	cmp	r3, #48	; 0x30
 8010040:	d0f8      	beq.n	8010034 <_dtoa_r+0x61c>
 8010042:	46bb      	mov	fp, r7
 8010044:	e04a      	b.n	80100dc <_dtoa_r+0x6c4>
 8010046:	4b06      	ldr	r3, [pc, #24]	; (8010060 <_dtoa_r+0x648>)
 8010048:	f7f0 fafe 	bl	8000648 <__aeabi_dmul>
 801004c:	4680      	mov	r8, r0
 801004e:	4689      	mov	r9, r1
 8010050:	e7bd      	b.n	800ffce <_dtoa_r+0x5b6>
 8010052:	bf00      	nop
 8010054:	08013710 	.word	0x08013710
 8010058:	080136e8 	.word	0x080136e8
 801005c:	3ff00000 	.word	0x3ff00000
 8010060:	40240000 	.word	0x40240000
 8010064:	401c0000 	.word	0x401c0000
 8010068:	40140000 	.word	0x40140000
 801006c:	3fe00000 	.word	0x3fe00000
 8010070:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010074:	9d00      	ldr	r5, [sp, #0]
 8010076:	4642      	mov	r2, r8
 8010078:	464b      	mov	r3, r9
 801007a:	4630      	mov	r0, r6
 801007c:	4639      	mov	r1, r7
 801007e:	f7f0 fc0d 	bl	800089c <__aeabi_ddiv>
 8010082:	f7f0 fd91 	bl	8000ba8 <__aeabi_d2iz>
 8010086:	9001      	str	r0, [sp, #4]
 8010088:	f7f0 fa74 	bl	8000574 <__aeabi_i2d>
 801008c:	4642      	mov	r2, r8
 801008e:	464b      	mov	r3, r9
 8010090:	f7f0 fada 	bl	8000648 <__aeabi_dmul>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 f91c 	bl	80002d8 <__aeabi_dsub>
 80100a0:	9e01      	ldr	r6, [sp, #4]
 80100a2:	9f04      	ldr	r7, [sp, #16]
 80100a4:	3630      	adds	r6, #48	; 0x30
 80100a6:	f805 6b01 	strb.w	r6, [r5], #1
 80100aa:	9e00      	ldr	r6, [sp, #0]
 80100ac:	1bae      	subs	r6, r5, r6
 80100ae:	42b7      	cmp	r7, r6
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	d134      	bne.n	8010120 <_dtoa_r+0x708>
 80100b6:	f7f0 f911 	bl	80002dc <__adddf3>
 80100ba:	4642      	mov	r2, r8
 80100bc:	464b      	mov	r3, r9
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	f7f0 fd51 	bl	8000b68 <__aeabi_dcmpgt>
 80100c6:	b9c8      	cbnz	r0, 80100fc <_dtoa_r+0x6e4>
 80100c8:	4642      	mov	r2, r8
 80100ca:	464b      	mov	r3, r9
 80100cc:	4630      	mov	r0, r6
 80100ce:	4639      	mov	r1, r7
 80100d0:	f7f0 fd22 	bl	8000b18 <__aeabi_dcmpeq>
 80100d4:	b110      	cbz	r0, 80100dc <_dtoa_r+0x6c4>
 80100d6:	9b01      	ldr	r3, [sp, #4]
 80100d8:	07db      	lsls	r3, r3, #31
 80100da:	d40f      	bmi.n	80100fc <_dtoa_r+0x6e4>
 80100dc:	4651      	mov	r1, sl
 80100de:	4620      	mov	r0, r4
 80100e0:	f000 fbcc 	bl	801087c <_Bfree>
 80100e4:	2300      	movs	r3, #0
 80100e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100e8:	702b      	strb	r3, [r5, #0]
 80100ea:	f10b 0301 	add.w	r3, fp, #1
 80100ee:	6013      	str	r3, [r2, #0]
 80100f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f43f ace2 	beq.w	800fabc <_dtoa_r+0xa4>
 80100f8:	601d      	str	r5, [r3, #0]
 80100fa:	e4df      	b.n	800fabc <_dtoa_r+0xa4>
 80100fc:	465f      	mov	r7, fp
 80100fe:	462b      	mov	r3, r5
 8010100:	461d      	mov	r5, r3
 8010102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010106:	2a39      	cmp	r2, #57	; 0x39
 8010108:	d106      	bne.n	8010118 <_dtoa_r+0x700>
 801010a:	9a00      	ldr	r2, [sp, #0]
 801010c:	429a      	cmp	r2, r3
 801010e:	d1f7      	bne.n	8010100 <_dtoa_r+0x6e8>
 8010110:	9900      	ldr	r1, [sp, #0]
 8010112:	2230      	movs	r2, #48	; 0x30
 8010114:	3701      	adds	r7, #1
 8010116:	700a      	strb	r2, [r1, #0]
 8010118:	781a      	ldrb	r2, [r3, #0]
 801011a:	3201      	adds	r2, #1
 801011c:	701a      	strb	r2, [r3, #0]
 801011e:	e790      	b.n	8010042 <_dtoa_r+0x62a>
 8010120:	4ba3      	ldr	r3, [pc, #652]	; (80103b0 <_dtoa_r+0x998>)
 8010122:	2200      	movs	r2, #0
 8010124:	f7f0 fa90 	bl	8000648 <__aeabi_dmul>
 8010128:	2200      	movs	r2, #0
 801012a:	2300      	movs	r3, #0
 801012c:	4606      	mov	r6, r0
 801012e:	460f      	mov	r7, r1
 8010130:	f7f0 fcf2 	bl	8000b18 <__aeabi_dcmpeq>
 8010134:	2800      	cmp	r0, #0
 8010136:	d09e      	beq.n	8010076 <_dtoa_r+0x65e>
 8010138:	e7d0      	b.n	80100dc <_dtoa_r+0x6c4>
 801013a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801013c:	2a00      	cmp	r2, #0
 801013e:	f000 80ca 	beq.w	80102d6 <_dtoa_r+0x8be>
 8010142:	9a07      	ldr	r2, [sp, #28]
 8010144:	2a01      	cmp	r2, #1
 8010146:	f300 80ad 	bgt.w	80102a4 <_dtoa_r+0x88c>
 801014a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801014c:	2a00      	cmp	r2, #0
 801014e:	f000 80a5 	beq.w	801029c <_dtoa_r+0x884>
 8010152:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010156:	9e08      	ldr	r6, [sp, #32]
 8010158:	9d05      	ldr	r5, [sp, #20]
 801015a:	9a05      	ldr	r2, [sp, #20]
 801015c:	441a      	add	r2, r3
 801015e:	9205      	str	r2, [sp, #20]
 8010160:	9a06      	ldr	r2, [sp, #24]
 8010162:	2101      	movs	r1, #1
 8010164:	441a      	add	r2, r3
 8010166:	4620      	mov	r0, r4
 8010168:	9206      	str	r2, [sp, #24]
 801016a:	f000 fc87 	bl	8010a7c <__i2b>
 801016e:	4607      	mov	r7, r0
 8010170:	b165      	cbz	r5, 801018c <_dtoa_r+0x774>
 8010172:	9b06      	ldr	r3, [sp, #24]
 8010174:	2b00      	cmp	r3, #0
 8010176:	dd09      	ble.n	801018c <_dtoa_r+0x774>
 8010178:	42ab      	cmp	r3, r5
 801017a:	9a05      	ldr	r2, [sp, #20]
 801017c:	bfa8      	it	ge
 801017e:	462b      	movge	r3, r5
 8010180:	1ad2      	subs	r2, r2, r3
 8010182:	9205      	str	r2, [sp, #20]
 8010184:	9a06      	ldr	r2, [sp, #24]
 8010186:	1aed      	subs	r5, r5, r3
 8010188:	1ad3      	subs	r3, r2, r3
 801018a:	9306      	str	r3, [sp, #24]
 801018c:	9b08      	ldr	r3, [sp, #32]
 801018e:	b1f3      	cbz	r3, 80101ce <_dtoa_r+0x7b6>
 8010190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 80a3 	beq.w	80102de <_dtoa_r+0x8c6>
 8010198:	2e00      	cmp	r6, #0
 801019a:	dd10      	ble.n	80101be <_dtoa_r+0x7a6>
 801019c:	4639      	mov	r1, r7
 801019e:	4632      	mov	r2, r6
 80101a0:	4620      	mov	r0, r4
 80101a2:	f000 fd2b 	bl	8010bfc <__pow5mult>
 80101a6:	4652      	mov	r2, sl
 80101a8:	4601      	mov	r1, r0
 80101aa:	4607      	mov	r7, r0
 80101ac:	4620      	mov	r0, r4
 80101ae:	f000 fc7b 	bl	8010aa8 <__multiply>
 80101b2:	4651      	mov	r1, sl
 80101b4:	4680      	mov	r8, r0
 80101b6:	4620      	mov	r0, r4
 80101b8:	f000 fb60 	bl	801087c <_Bfree>
 80101bc:	46c2      	mov	sl, r8
 80101be:	9b08      	ldr	r3, [sp, #32]
 80101c0:	1b9a      	subs	r2, r3, r6
 80101c2:	d004      	beq.n	80101ce <_dtoa_r+0x7b6>
 80101c4:	4651      	mov	r1, sl
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 fd18 	bl	8010bfc <__pow5mult>
 80101cc:	4682      	mov	sl, r0
 80101ce:	2101      	movs	r1, #1
 80101d0:	4620      	mov	r0, r4
 80101d2:	f000 fc53 	bl	8010a7c <__i2b>
 80101d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	4606      	mov	r6, r0
 80101dc:	f340 8081 	ble.w	80102e2 <_dtoa_r+0x8ca>
 80101e0:	461a      	mov	r2, r3
 80101e2:	4601      	mov	r1, r0
 80101e4:	4620      	mov	r0, r4
 80101e6:	f000 fd09 	bl	8010bfc <__pow5mult>
 80101ea:	9b07      	ldr	r3, [sp, #28]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	4606      	mov	r6, r0
 80101f0:	dd7a      	ble.n	80102e8 <_dtoa_r+0x8d0>
 80101f2:	f04f 0800 	mov.w	r8, #0
 80101f6:	6933      	ldr	r3, [r6, #16]
 80101f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80101fc:	6918      	ldr	r0, [r3, #16]
 80101fe:	f000 fbef 	bl	80109e0 <__hi0bits>
 8010202:	f1c0 0020 	rsb	r0, r0, #32
 8010206:	9b06      	ldr	r3, [sp, #24]
 8010208:	4418      	add	r0, r3
 801020a:	f010 001f 	ands.w	r0, r0, #31
 801020e:	f000 8094 	beq.w	801033a <_dtoa_r+0x922>
 8010212:	f1c0 0320 	rsb	r3, r0, #32
 8010216:	2b04      	cmp	r3, #4
 8010218:	f340 8085 	ble.w	8010326 <_dtoa_r+0x90e>
 801021c:	9b05      	ldr	r3, [sp, #20]
 801021e:	f1c0 001c 	rsb	r0, r0, #28
 8010222:	4403      	add	r3, r0
 8010224:	9305      	str	r3, [sp, #20]
 8010226:	9b06      	ldr	r3, [sp, #24]
 8010228:	4403      	add	r3, r0
 801022a:	4405      	add	r5, r0
 801022c:	9306      	str	r3, [sp, #24]
 801022e:	9b05      	ldr	r3, [sp, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	dd05      	ble.n	8010240 <_dtoa_r+0x828>
 8010234:	4651      	mov	r1, sl
 8010236:	461a      	mov	r2, r3
 8010238:	4620      	mov	r0, r4
 801023a:	f000 fd39 	bl	8010cb0 <__lshift>
 801023e:	4682      	mov	sl, r0
 8010240:	9b06      	ldr	r3, [sp, #24]
 8010242:	2b00      	cmp	r3, #0
 8010244:	dd05      	ble.n	8010252 <_dtoa_r+0x83a>
 8010246:	4631      	mov	r1, r6
 8010248:	461a      	mov	r2, r3
 801024a:	4620      	mov	r0, r4
 801024c:	f000 fd30 	bl	8010cb0 <__lshift>
 8010250:	4606      	mov	r6, r0
 8010252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010254:	2b00      	cmp	r3, #0
 8010256:	d072      	beq.n	801033e <_dtoa_r+0x926>
 8010258:	4631      	mov	r1, r6
 801025a:	4650      	mov	r0, sl
 801025c:	f000 fd94 	bl	8010d88 <__mcmp>
 8010260:	2800      	cmp	r0, #0
 8010262:	da6c      	bge.n	801033e <_dtoa_r+0x926>
 8010264:	2300      	movs	r3, #0
 8010266:	4651      	mov	r1, sl
 8010268:	220a      	movs	r2, #10
 801026a:	4620      	mov	r0, r4
 801026c:	f000 fb28 	bl	80108c0 <__multadd>
 8010270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010272:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010276:	4682      	mov	sl, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 81b0 	beq.w	80105de <_dtoa_r+0xbc6>
 801027e:	2300      	movs	r3, #0
 8010280:	4639      	mov	r1, r7
 8010282:	220a      	movs	r2, #10
 8010284:	4620      	mov	r0, r4
 8010286:	f000 fb1b 	bl	80108c0 <__multadd>
 801028a:	9b01      	ldr	r3, [sp, #4]
 801028c:	2b00      	cmp	r3, #0
 801028e:	4607      	mov	r7, r0
 8010290:	f300 8096 	bgt.w	80103c0 <_dtoa_r+0x9a8>
 8010294:	9b07      	ldr	r3, [sp, #28]
 8010296:	2b02      	cmp	r3, #2
 8010298:	dc59      	bgt.n	801034e <_dtoa_r+0x936>
 801029a:	e091      	b.n	80103c0 <_dtoa_r+0x9a8>
 801029c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801029e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80102a2:	e758      	b.n	8010156 <_dtoa_r+0x73e>
 80102a4:	9b04      	ldr	r3, [sp, #16]
 80102a6:	1e5e      	subs	r6, r3, #1
 80102a8:	9b08      	ldr	r3, [sp, #32]
 80102aa:	42b3      	cmp	r3, r6
 80102ac:	bfbf      	itttt	lt
 80102ae:	9b08      	ldrlt	r3, [sp, #32]
 80102b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80102b2:	9608      	strlt	r6, [sp, #32]
 80102b4:	1af3      	sublt	r3, r6, r3
 80102b6:	bfb4      	ite	lt
 80102b8:	18d2      	addlt	r2, r2, r3
 80102ba:	1b9e      	subge	r6, r3, r6
 80102bc:	9b04      	ldr	r3, [sp, #16]
 80102be:	bfbc      	itt	lt
 80102c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80102c2:	2600      	movlt	r6, #0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	bfb7      	itett	lt
 80102c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80102cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80102d0:	1a9d      	sublt	r5, r3, r2
 80102d2:	2300      	movlt	r3, #0
 80102d4:	e741      	b.n	801015a <_dtoa_r+0x742>
 80102d6:	9e08      	ldr	r6, [sp, #32]
 80102d8:	9d05      	ldr	r5, [sp, #20]
 80102da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80102dc:	e748      	b.n	8010170 <_dtoa_r+0x758>
 80102de:	9a08      	ldr	r2, [sp, #32]
 80102e0:	e770      	b.n	80101c4 <_dtoa_r+0x7ac>
 80102e2:	9b07      	ldr	r3, [sp, #28]
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	dc19      	bgt.n	801031c <_dtoa_r+0x904>
 80102e8:	9b02      	ldr	r3, [sp, #8]
 80102ea:	b9bb      	cbnz	r3, 801031c <_dtoa_r+0x904>
 80102ec:	9b03      	ldr	r3, [sp, #12]
 80102ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102f2:	b99b      	cbnz	r3, 801031c <_dtoa_r+0x904>
 80102f4:	9b03      	ldr	r3, [sp, #12]
 80102f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102fa:	0d1b      	lsrs	r3, r3, #20
 80102fc:	051b      	lsls	r3, r3, #20
 80102fe:	b183      	cbz	r3, 8010322 <_dtoa_r+0x90a>
 8010300:	9b05      	ldr	r3, [sp, #20]
 8010302:	3301      	adds	r3, #1
 8010304:	9305      	str	r3, [sp, #20]
 8010306:	9b06      	ldr	r3, [sp, #24]
 8010308:	3301      	adds	r3, #1
 801030a:	9306      	str	r3, [sp, #24]
 801030c:	f04f 0801 	mov.w	r8, #1
 8010310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010312:	2b00      	cmp	r3, #0
 8010314:	f47f af6f 	bne.w	80101f6 <_dtoa_r+0x7de>
 8010318:	2001      	movs	r0, #1
 801031a:	e774      	b.n	8010206 <_dtoa_r+0x7ee>
 801031c:	f04f 0800 	mov.w	r8, #0
 8010320:	e7f6      	b.n	8010310 <_dtoa_r+0x8f8>
 8010322:	4698      	mov	r8, r3
 8010324:	e7f4      	b.n	8010310 <_dtoa_r+0x8f8>
 8010326:	d082      	beq.n	801022e <_dtoa_r+0x816>
 8010328:	9a05      	ldr	r2, [sp, #20]
 801032a:	331c      	adds	r3, #28
 801032c:	441a      	add	r2, r3
 801032e:	9205      	str	r2, [sp, #20]
 8010330:	9a06      	ldr	r2, [sp, #24]
 8010332:	441a      	add	r2, r3
 8010334:	441d      	add	r5, r3
 8010336:	9206      	str	r2, [sp, #24]
 8010338:	e779      	b.n	801022e <_dtoa_r+0x816>
 801033a:	4603      	mov	r3, r0
 801033c:	e7f4      	b.n	8010328 <_dtoa_r+0x910>
 801033e:	9b04      	ldr	r3, [sp, #16]
 8010340:	2b00      	cmp	r3, #0
 8010342:	dc37      	bgt.n	80103b4 <_dtoa_r+0x99c>
 8010344:	9b07      	ldr	r3, [sp, #28]
 8010346:	2b02      	cmp	r3, #2
 8010348:	dd34      	ble.n	80103b4 <_dtoa_r+0x99c>
 801034a:	9b04      	ldr	r3, [sp, #16]
 801034c:	9301      	str	r3, [sp, #4]
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	b963      	cbnz	r3, 801036c <_dtoa_r+0x954>
 8010352:	4631      	mov	r1, r6
 8010354:	2205      	movs	r2, #5
 8010356:	4620      	mov	r0, r4
 8010358:	f000 fab2 	bl	80108c0 <__multadd>
 801035c:	4601      	mov	r1, r0
 801035e:	4606      	mov	r6, r0
 8010360:	4650      	mov	r0, sl
 8010362:	f000 fd11 	bl	8010d88 <__mcmp>
 8010366:	2800      	cmp	r0, #0
 8010368:	f73f adbb 	bgt.w	800fee2 <_dtoa_r+0x4ca>
 801036c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801036e:	9d00      	ldr	r5, [sp, #0]
 8010370:	ea6f 0b03 	mvn.w	fp, r3
 8010374:	f04f 0800 	mov.w	r8, #0
 8010378:	4631      	mov	r1, r6
 801037a:	4620      	mov	r0, r4
 801037c:	f000 fa7e 	bl	801087c <_Bfree>
 8010380:	2f00      	cmp	r7, #0
 8010382:	f43f aeab 	beq.w	80100dc <_dtoa_r+0x6c4>
 8010386:	f1b8 0f00 	cmp.w	r8, #0
 801038a:	d005      	beq.n	8010398 <_dtoa_r+0x980>
 801038c:	45b8      	cmp	r8, r7
 801038e:	d003      	beq.n	8010398 <_dtoa_r+0x980>
 8010390:	4641      	mov	r1, r8
 8010392:	4620      	mov	r0, r4
 8010394:	f000 fa72 	bl	801087c <_Bfree>
 8010398:	4639      	mov	r1, r7
 801039a:	4620      	mov	r0, r4
 801039c:	f000 fa6e 	bl	801087c <_Bfree>
 80103a0:	e69c      	b.n	80100dc <_dtoa_r+0x6c4>
 80103a2:	2600      	movs	r6, #0
 80103a4:	4637      	mov	r7, r6
 80103a6:	e7e1      	b.n	801036c <_dtoa_r+0x954>
 80103a8:	46bb      	mov	fp, r7
 80103aa:	4637      	mov	r7, r6
 80103ac:	e599      	b.n	800fee2 <_dtoa_r+0x4ca>
 80103ae:	bf00      	nop
 80103b0:	40240000 	.word	0x40240000
 80103b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f000 80c8 	beq.w	801054c <_dtoa_r+0xb34>
 80103bc:	9b04      	ldr	r3, [sp, #16]
 80103be:	9301      	str	r3, [sp, #4]
 80103c0:	2d00      	cmp	r5, #0
 80103c2:	dd05      	ble.n	80103d0 <_dtoa_r+0x9b8>
 80103c4:	4639      	mov	r1, r7
 80103c6:	462a      	mov	r2, r5
 80103c8:	4620      	mov	r0, r4
 80103ca:	f000 fc71 	bl	8010cb0 <__lshift>
 80103ce:	4607      	mov	r7, r0
 80103d0:	f1b8 0f00 	cmp.w	r8, #0
 80103d4:	d05b      	beq.n	801048e <_dtoa_r+0xa76>
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	4620      	mov	r0, r4
 80103da:	f000 fa0f 	bl	80107fc <_Balloc>
 80103de:	4605      	mov	r5, r0
 80103e0:	b928      	cbnz	r0, 80103ee <_dtoa_r+0x9d6>
 80103e2:	4b83      	ldr	r3, [pc, #524]	; (80105f0 <_dtoa_r+0xbd8>)
 80103e4:	4602      	mov	r2, r0
 80103e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80103ea:	f7ff bb2e 	b.w	800fa4a <_dtoa_r+0x32>
 80103ee:	693a      	ldr	r2, [r7, #16]
 80103f0:	3202      	adds	r2, #2
 80103f2:	0092      	lsls	r2, r2, #2
 80103f4:	f107 010c 	add.w	r1, r7, #12
 80103f8:	300c      	adds	r0, #12
 80103fa:	f7ff fa70 	bl	800f8de <memcpy>
 80103fe:	2201      	movs	r2, #1
 8010400:	4629      	mov	r1, r5
 8010402:	4620      	mov	r0, r4
 8010404:	f000 fc54 	bl	8010cb0 <__lshift>
 8010408:	9b00      	ldr	r3, [sp, #0]
 801040a:	3301      	adds	r3, #1
 801040c:	9304      	str	r3, [sp, #16]
 801040e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010412:	4413      	add	r3, r2
 8010414:	9308      	str	r3, [sp, #32]
 8010416:	9b02      	ldr	r3, [sp, #8]
 8010418:	f003 0301 	and.w	r3, r3, #1
 801041c:	46b8      	mov	r8, r7
 801041e:	9306      	str	r3, [sp, #24]
 8010420:	4607      	mov	r7, r0
 8010422:	9b04      	ldr	r3, [sp, #16]
 8010424:	4631      	mov	r1, r6
 8010426:	3b01      	subs	r3, #1
 8010428:	4650      	mov	r0, sl
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	f7ff fa6c 	bl	800f908 <quorem>
 8010430:	4641      	mov	r1, r8
 8010432:	9002      	str	r0, [sp, #8]
 8010434:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010438:	4650      	mov	r0, sl
 801043a:	f000 fca5 	bl	8010d88 <__mcmp>
 801043e:	463a      	mov	r2, r7
 8010440:	9005      	str	r0, [sp, #20]
 8010442:	4631      	mov	r1, r6
 8010444:	4620      	mov	r0, r4
 8010446:	f000 fcbb 	bl	8010dc0 <__mdiff>
 801044a:	68c2      	ldr	r2, [r0, #12]
 801044c:	4605      	mov	r5, r0
 801044e:	bb02      	cbnz	r2, 8010492 <_dtoa_r+0xa7a>
 8010450:	4601      	mov	r1, r0
 8010452:	4650      	mov	r0, sl
 8010454:	f000 fc98 	bl	8010d88 <__mcmp>
 8010458:	4602      	mov	r2, r0
 801045a:	4629      	mov	r1, r5
 801045c:	4620      	mov	r0, r4
 801045e:	9209      	str	r2, [sp, #36]	; 0x24
 8010460:	f000 fa0c 	bl	801087c <_Bfree>
 8010464:	9b07      	ldr	r3, [sp, #28]
 8010466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010468:	9d04      	ldr	r5, [sp, #16]
 801046a:	ea43 0102 	orr.w	r1, r3, r2
 801046e:	9b06      	ldr	r3, [sp, #24]
 8010470:	4319      	orrs	r1, r3
 8010472:	d110      	bne.n	8010496 <_dtoa_r+0xa7e>
 8010474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010478:	d029      	beq.n	80104ce <_dtoa_r+0xab6>
 801047a:	9b05      	ldr	r3, [sp, #20]
 801047c:	2b00      	cmp	r3, #0
 801047e:	dd02      	ble.n	8010486 <_dtoa_r+0xa6e>
 8010480:	9b02      	ldr	r3, [sp, #8]
 8010482:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010486:	9b01      	ldr	r3, [sp, #4]
 8010488:	f883 9000 	strb.w	r9, [r3]
 801048c:	e774      	b.n	8010378 <_dtoa_r+0x960>
 801048e:	4638      	mov	r0, r7
 8010490:	e7ba      	b.n	8010408 <_dtoa_r+0x9f0>
 8010492:	2201      	movs	r2, #1
 8010494:	e7e1      	b.n	801045a <_dtoa_r+0xa42>
 8010496:	9b05      	ldr	r3, [sp, #20]
 8010498:	2b00      	cmp	r3, #0
 801049a:	db04      	blt.n	80104a6 <_dtoa_r+0xa8e>
 801049c:	9907      	ldr	r1, [sp, #28]
 801049e:	430b      	orrs	r3, r1
 80104a0:	9906      	ldr	r1, [sp, #24]
 80104a2:	430b      	orrs	r3, r1
 80104a4:	d120      	bne.n	80104e8 <_dtoa_r+0xad0>
 80104a6:	2a00      	cmp	r2, #0
 80104a8:	dded      	ble.n	8010486 <_dtoa_r+0xa6e>
 80104aa:	4651      	mov	r1, sl
 80104ac:	2201      	movs	r2, #1
 80104ae:	4620      	mov	r0, r4
 80104b0:	f000 fbfe 	bl	8010cb0 <__lshift>
 80104b4:	4631      	mov	r1, r6
 80104b6:	4682      	mov	sl, r0
 80104b8:	f000 fc66 	bl	8010d88 <__mcmp>
 80104bc:	2800      	cmp	r0, #0
 80104be:	dc03      	bgt.n	80104c8 <_dtoa_r+0xab0>
 80104c0:	d1e1      	bne.n	8010486 <_dtoa_r+0xa6e>
 80104c2:	f019 0f01 	tst.w	r9, #1
 80104c6:	d0de      	beq.n	8010486 <_dtoa_r+0xa6e>
 80104c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80104cc:	d1d8      	bne.n	8010480 <_dtoa_r+0xa68>
 80104ce:	9a01      	ldr	r2, [sp, #4]
 80104d0:	2339      	movs	r3, #57	; 0x39
 80104d2:	7013      	strb	r3, [r2, #0]
 80104d4:	462b      	mov	r3, r5
 80104d6:	461d      	mov	r5, r3
 80104d8:	3b01      	subs	r3, #1
 80104da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80104de:	2a39      	cmp	r2, #57	; 0x39
 80104e0:	d06c      	beq.n	80105bc <_dtoa_r+0xba4>
 80104e2:	3201      	adds	r2, #1
 80104e4:	701a      	strb	r2, [r3, #0]
 80104e6:	e747      	b.n	8010378 <_dtoa_r+0x960>
 80104e8:	2a00      	cmp	r2, #0
 80104ea:	dd07      	ble.n	80104fc <_dtoa_r+0xae4>
 80104ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80104f0:	d0ed      	beq.n	80104ce <_dtoa_r+0xab6>
 80104f2:	9a01      	ldr	r2, [sp, #4]
 80104f4:	f109 0301 	add.w	r3, r9, #1
 80104f8:	7013      	strb	r3, [r2, #0]
 80104fa:	e73d      	b.n	8010378 <_dtoa_r+0x960>
 80104fc:	9b04      	ldr	r3, [sp, #16]
 80104fe:	9a08      	ldr	r2, [sp, #32]
 8010500:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010504:	4293      	cmp	r3, r2
 8010506:	d043      	beq.n	8010590 <_dtoa_r+0xb78>
 8010508:	4651      	mov	r1, sl
 801050a:	2300      	movs	r3, #0
 801050c:	220a      	movs	r2, #10
 801050e:	4620      	mov	r0, r4
 8010510:	f000 f9d6 	bl	80108c0 <__multadd>
 8010514:	45b8      	cmp	r8, r7
 8010516:	4682      	mov	sl, r0
 8010518:	f04f 0300 	mov.w	r3, #0
 801051c:	f04f 020a 	mov.w	r2, #10
 8010520:	4641      	mov	r1, r8
 8010522:	4620      	mov	r0, r4
 8010524:	d107      	bne.n	8010536 <_dtoa_r+0xb1e>
 8010526:	f000 f9cb 	bl	80108c0 <__multadd>
 801052a:	4680      	mov	r8, r0
 801052c:	4607      	mov	r7, r0
 801052e:	9b04      	ldr	r3, [sp, #16]
 8010530:	3301      	adds	r3, #1
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	e775      	b.n	8010422 <_dtoa_r+0xa0a>
 8010536:	f000 f9c3 	bl	80108c0 <__multadd>
 801053a:	4639      	mov	r1, r7
 801053c:	4680      	mov	r8, r0
 801053e:	2300      	movs	r3, #0
 8010540:	220a      	movs	r2, #10
 8010542:	4620      	mov	r0, r4
 8010544:	f000 f9bc 	bl	80108c0 <__multadd>
 8010548:	4607      	mov	r7, r0
 801054a:	e7f0      	b.n	801052e <_dtoa_r+0xb16>
 801054c:	9b04      	ldr	r3, [sp, #16]
 801054e:	9301      	str	r3, [sp, #4]
 8010550:	9d00      	ldr	r5, [sp, #0]
 8010552:	4631      	mov	r1, r6
 8010554:	4650      	mov	r0, sl
 8010556:	f7ff f9d7 	bl	800f908 <quorem>
 801055a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801055e:	9b00      	ldr	r3, [sp, #0]
 8010560:	f805 9b01 	strb.w	r9, [r5], #1
 8010564:	1aea      	subs	r2, r5, r3
 8010566:	9b01      	ldr	r3, [sp, #4]
 8010568:	4293      	cmp	r3, r2
 801056a:	dd07      	ble.n	801057c <_dtoa_r+0xb64>
 801056c:	4651      	mov	r1, sl
 801056e:	2300      	movs	r3, #0
 8010570:	220a      	movs	r2, #10
 8010572:	4620      	mov	r0, r4
 8010574:	f000 f9a4 	bl	80108c0 <__multadd>
 8010578:	4682      	mov	sl, r0
 801057a:	e7ea      	b.n	8010552 <_dtoa_r+0xb3a>
 801057c:	9b01      	ldr	r3, [sp, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	bfc8      	it	gt
 8010582:	461d      	movgt	r5, r3
 8010584:	9b00      	ldr	r3, [sp, #0]
 8010586:	bfd8      	it	le
 8010588:	2501      	movle	r5, #1
 801058a:	441d      	add	r5, r3
 801058c:	f04f 0800 	mov.w	r8, #0
 8010590:	4651      	mov	r1, sl
 8010592:	2201      	movs	r2, #1
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fb8b 	bl	8010cb0 <__lshift>
 801059a:	4631      	mov	r1, r6
 801059c:	4682      	mov	sl, r0
 801059e:	f000 fbf3 	bl	8010d88 <__mcmp>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	dc96      	bgt.n	80104d4 <_dtoa_r+0xabc>
 80105a6:	d102      	bne.n	80105ae <_dtoa_r+0xb96>
 80105a8:	f019 0f01 	tst.w	r9, #1
 80105ac:	d192      	bne.n	80104d4 <_dtoa_r+0xabc>
 80105ae:	462b      	mov	r3, r5
 80105b0:	461d      	mov	r5, r3
 80105b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105b6:	2a30      	cmp	r2, #48	; 0x30
 80105b8:	d0fa      	beq.n	80105b0 <_dtoa_r+0xb98>
 80105ba:	e6dd      	b.n	8010378 <_dtoa_r+0x960>
 80105bc:	9a00      	ldr	r2, [sp, #0]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d189      	bne.n	80104d6 <_dtoa_r+0xabe>
 80105c2:	f10b 0b01 	add.w	fp, fp, #1
 80105c6:	2331      	movs	r3, #49	; 0x31
 80105c8:	e796      	b.n	80104f8 <_dtoa_r+0xae0>
 80105ca:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <_dtoa_r+0xbdc>)
 80105cc:	f7ff ba99 	b.w	800fb02 <_dtoa_r+0xea>
 80105d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f47f aa6d 	bne.w	800fab2 <_dtoa_r+0x9a>
 80105d8:	4b07      	ldr	r3, [pc, #28]	; (80105f8 <_dtoa_r+0xbe0>)
 80105da:	f7ff ba92 	b.w	800fb02 <_dtoa_r+0xea>
 80105de:	9b01      	ldr	r3, [sp, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	dcb5      	bgt.n	8010550 <_dtoa_r+0xb38>
 80105e4:	9b07      	ldr	r3, [sp, #28]
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	f73f aeb1 	bgt.w	801034e <_dtoa_r+0x936>
 80105ec:	e7b0      	b.n	8010550 <_dtoa_r+0xb38>
 80105ee:	bf00      	nop
 80105f0:	0801367a 	.word	0x0801367a
 80105f4:	080135d5 	.word	0x080135d5
 80105f8:	080135fe 	.word	0x080135fe

080105fc <_free_r>:
 80105fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105fe:	2900      	cmp	r1, #0
 8010600:	d044      	beq.n	801068c <_free_r+0x90>
 8010602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010606:	9001      	str	r0, [sp, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	f1a1 0404 	sub.w	r4, r1, #4
 801060e:	bfb8      	it	lt
 8010610:	18e4      	addlt	r4, r4, r3
 8010612:	f000 f8e7 	bl	80107e4 <__malloc_lock>
 8010616:	4a1e      	ldr	r2, [pc, #120]	; (8010690 <_free_r+0x94>)
 8010618:	9801      	ldr	r0, [sp, #4]
 801061a:	6813      	ldr	r3, [r2, #0]
 801061c:	b933      	cbnz	r3, 801062c <_free_r+0x30>
 801061e:	6063      	str	r3, [r4, #4]
 8010620:	6014      	str	r4, [r2, #0]
 8010622:	b003      	add	sp, #12
 8010624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010628:	f000 b8e2 	b.w	80107f0 <__malloc_unlock>
 801062c:	42a3      	cmp	r3, r4
 801062e:	d908      	bls.n	8010642 <_free_r+0x46>
 8010630:	6825      	ldr	r5, [r4, #0]
 8010632:	1961      	adds	r1, r4, r5
 8010634:	428b      	cmp	r3, r1
 8010636:	bf01      	itttt	eq
 8010638:	6819      	ldreq	r1, [r3, #0]
 801063a:	685b      	ldreq	r3, [r3, #4]
 801063c:	1949      	addeq	r1, r1, r5
 801063e:	6021      	streq	r1, [r4, #0]
 8010640:	e7ed      	b.n	801061e <_free_r+0x22>
 8010642:	461a      	mov	r2, r3
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	b10b      	cbz	r3, 801064c <_free_r+0x50>
 8010648:	42a3      	cmp	r3, r4
 801064a:	d9fa      	bls.n	8010642 <_free_r+0x46>
 801064c:	6811      	ldr	r1, [r2, #0]
 801064e:	1855      	adds	r5, r2, r1
 8010650:	42a5      	cmp	r5, r4
 8010652:	d10b      	bne.n	801066c <_free_r+0x70>
 8010654:	6824      	ldr	r4, [r4, #0]
 8010656:	4421      	add	r1, r4
 8010658:	1854      	adds	r4, r2, r1
 801065a:	42a3      	cmp	r3, r4
 801065c:	6011      	str	r1, [r2, #0]
 801065e:	d1e0      	bne.n	8010622 <_free_r+0x26>
 8010660:	681c      	ldr	r4, [r3, #0]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	6053      	str	r3, [r2, #4]
 8010666:	440c      	add	r4, r1
 8010668:	6014      	str	r4, [r2, #0]
 801066a:	e7da      	b.n	8010622 <_free_r+0x26>
 801066c:	d902      	bls.n	8010674 <_free_r+0x78>
 801066e:	230c      	movs	r3, #12
 8010670:	6003      	str	r3, [r0, #0]
 8010672:	e7d6      	b.n	8010622 <_free_r+0x26>
 8010674:	6825      	ldr	r5, [r4, #0]
 8010676:	1961      	adds	r1, r4, r5
 8010678:	428b      	cmp	r3, r1
 801067a:	bf04      	itt	eq
 801067c:	6819      	ldreq	r1, [r3, #0]
 801067e:	685b      	ldreq	r3, [r3, #4]
 8010680:	6063      	str	r3, [r4, #4]
 8010682:	bf04      	itt	eq
 8010684:	1949      	addeq	r1, r1, r5
 8010686:	6021      	streq	r1, [r4, #0]
 8010688:	6054      	str	r4, [r2, #4]
 801068a:	e7ca      	b.n	8010622 <_free_r+0x26>
 801068c:	b003      	add	sp, #12
 801068e:	bd30      	pop	{r4, r5, pc}
 8010690:	20001438 	.word	0x20001438

08010694 <malloc>:
 8010694:	4b02      	ldr	r3, [pc, #8]	; (80106a0 <malloc+0xc>)
 8010696:	4601      	mov	r1, r0
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	f000 b823 	b.w	80106e4 <_malloc_r>
 801069e:	bf00      	nop
 80106a0:	20000064 	.word	0x20000064

080106a4 <sbrk_aligned>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	4e0e      	ldr	r6, [pc, #56]	; (80106e0 <sbrk_aligned+0x3c>)
 80106a8:	460c      	mov	r4, r1
 80106aa:	6831      	ldr	r1, [r6, #0]
 80106ac:	4605      	mov	r5, r0
 80106ae:	b911      	cbnz	r1, 80106b6 <sbrk_aligned+0x12>
 80106b0:	f001 fd96 	bl	80121e0 <_sbrk_r>
 80106b4:	6030      	str	r0, [r6, #0]
 80106b6:	4621      	mov	r1, r4
 80106b8:	4628      	mov	r0, r5
 80106ba:	f001 fd91 	bl	80121e0 <_sbrk_r>
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	d00a      	beq.n	80106d8 <sbrk_aligned+0x34>
 80106c2:	1cc4      	adds	r4, r0, #3
 80106c4:	f024 0403 	bic.w	r4, r4, #3
 80106c8:	42a0      	cmp	r0, r4
 80106ca:	d007      	beq.n	80106dc <sbrk_aligned+0x38>
 80106cc:	1a21      	subs	r1, r4, r0
 80106ce:	4628      	mov	r0, r5
 80106d0:	f001 fd86 	bl	80121e0 <_sbrk_r>
 80106d4:	3001      	adds	r0, #1
 80106d6:	d101      	bne.n	80106dc <sbrk_aligned+0x38>
 80106d8:	f04f 34ff 	mov.w	r4, #4294967295
 80106dc:	4620      	mov	r0, r4
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	2000143c 	.word	0x2000143c

080106e4 <_malloc_r>:
 80106e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e8:	1ccd      	adds	r5, r1, #3
 80106ea:	f025 0503 	bic.w	r5, r5, #3
 80106ee:	3508      	adds	r5, #8
 80106f0:	2d0c      	cmp	r5, #12
 80106f2:	bf38      	it	cc
 80106f4:	250c      	movcc	r5, #12
 80106f6:	2d00      	cmp	r5, #0
 80106f8:	4607      	mov	r7, r0
 80106fa:	db01      	blt.n	8010700 <_malloc_r+0x1c>
 80106fc:	42a9      	cmp	r1, r5
 80106fe:	d905      	bls.n	801070c <_malloc_r+0x28>
 8010700:	230c      	movs	r3, #12
 8010702:	603b      	str	r3, [r7, #0]
 8010704:	2600      	movs	r6, #0
 8010706:	4630      	mov	r0, r6
 8010708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801070c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80107e0 <_malloc_r+0xfc>
 8010710:	f000 f868 	bl	80107e4 <__malloc_lock>
 8010714:	f8d8 3000 	ldr.w	r3, [r8]
 8010718:	461c      	mov	r4, r3
 801071a:	bb5c      	cbnz	r4, 8010774 <_malloc_r+0x90>
 801071c:	4629      	mov	r1, r5
 801071e:	4638      	mov	r0, r7
 8010720:	f7ff ffc0 	bl	80106a4 <sbrk_aligned>
 8010724:	1c43      	adds	r3, r0, #1
 8010726:	4604      	mov	r4, r0
 8010728:	d155      	bne.n	80107d6 <_malloc_r+0xf2>
 801072a:	f8d8 4000 	ldr.w	r4, [r8]
 801072e:	4626      	mov	r6, r4
 8010730:	2e00      	cmp	r6, #0
 8010732:	d145      	bne.n	80107c0 <_malloc_r+0xdc>
 8010734:	2c00      	cmp	r4, #0
 8010736:	d048      	beq.n	80107ca <_malloc_r+0xe6>
 8010738:	6823      	ldr	r3, [r4, #0]
 801073a:	4631      	mov	r1, r6
 801073c:	4638      	mov	r0, r7
 801073e:	eb04 0903 	add.w	r9, r4, r3
 8010742:	f001 fd4d 	bl	80121e0 <_sbrk_r>
 8010746:	4581      	cmp	r9, r0
 8010748:	d13f      	bne.n	80107ca <_malloc_r+0xe6>
 801074a:	6821      	ldr	r1, [r4, #0]
 801074c:	1a6d      	subs	r5, r5, r1
 801074e:	4629      	mov	r1, r5
 8010750:	4638      	mov	r0, r7
 8010752:	f7ff ffa7 	bl	80106a4 <sbrk_aligned>
 8010756:	3001      	adds	r0, #1
 8010758:	d037      	beq.n	80107ca <_malloc_r+0xe6>
 801075a:	6823      	ldr	r3, [r4, #0]
 801075c:	442b      	add	r3, r5
 801075e:	6023      	str	r3, [r4, #0]
 8010760:	f8d8 3000 	ldr.w	r3, [r8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d038      	beq.n	80107da <_malloc_r+0xf6>
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	42a2      	cmp	r2, r4
 801076c:	d12b      	bne.n	80107c6 <_malloc_r+0xe2>
 801076e:	2200      	movs	r2, #0
 8010770:	605a      	str	r2, [r3, #4]
 8010772:	e00f      	b.n	8010794 <_malloc_r+0xb0>
 8010774:	6822      	ldr	r2, [r4, #0]
 8010776:	1b52      	subs	r2, r2, r5
 8010778:	d41f      	bmi.n	80107ba <_malloc_r+0xd6>
 801077a:	2a0b      	cmp	r2, #11
 801077c:	d917      	bls.n	80107ae <_malloc_r+0xca>
 801077e:	1961      	adds	r1, r4, r5
 8010780:	42a3      	cmp	r3, r4
 8010782:	6025      	str	r5, [r4, #0]
 8010784:	bf18      	it	ne
 8010786:	6059      	strne	r1, [r3, #4]
 8010788:	6863      	ldr	r3, [r4, #4]
 801078a:	bf08      	it	eq
 801078c:	f8c8 1000 	streq.w	r1, [r8]
 8010790:	5162      	str	r2, [r4, r5]
 8010792:	604b      	str	r3, [r1, #4]
 8010794:	4638      	mov	r0, r7
 8010796:	f104 060b 	add.w	r6, r4, #11
 801079a:	f000 f829 	bl	80107f0 <__malloc_unlock>
 801079e:	f026 0607 	bic.w	r6, r6, #7
 80107a2:	1d23      	adds	r3, r4, #4
 80107a4:	1af2      	subs	r2, r6, r3
 80107a6:	d0ae      	beq.n	8010706 <_malloc_r+0x22>
 80107a8:	1b9b      	subs	r3, r3, r6
 80107aa:	50a3      	str	r3, [r4, r2]
 80107ac:	e7ab      	b.n	8010706 <_malloc_r+0x22>
 80107ae:	42a3      	cmp	r3, r4
 80107b0:	6862      	ldr	r2, [r4, #4]
 80107b2:	d1dd      	bne.n	8010770 <_malloc_r+0x8c>
 80107b4:	f8c8 2000 	str.w	r2, [r8]
 80107b8:	e7ec      	b.n	8010794 <_malloc_r+0xb0>
 80107ba:	4623      	mov	r3, r4
 80107bc:	6864      	ldr	r4, [r4, #4]
 80107be:	e7ac      	b.n	801071a <_malloc_r+0x36>
 80107c0:	4634      	mov	r4, r6
 80107c2:	6876      	ldr	r6, [r6, #4]
 80107c4:	e7b4      	b.n	8010730 <_malloc_r+0x4c>
 80107c6:	4613      	mov	r3, r2
 80107c8:	e7cc      	b.n	8010764 <_malloc_r+0x80>
 80107ca:	230c      	movs	r3, #12
 80107cc:	603b      	str	r3, [r7, #0]
 80107ce:	4638      	mov	r0, r7
 80107d0:	f000 f80e 	bl	80107f0 <__malloc_unlock>
 80107d4:	e797      	b.n	8010706 <_malloc_r+0x22>
 80107d6:	6025      	str	r5, [r4, #0]
 80107d8:	e7dc      	b.n	8010794 <_malloc_r+0xb0>
 80107da:	605b      	str	r3, [r3, #4]
 80107dc:	deff      	udf	#255	; 0xff
 80107de:	bf00      	nop
 80107e0:	20001438 	.word	0x20001438

080107e4 <__malloc_lock>:
 80107e4:	4801      	ldr	r0, [pc, #4]	; (80107ec <__malloc_lock+0x8>)
 80107e6:	f7ff b878 	b.w	800f8da <__retarget_lock_acquire_recursive>
 80107ea:	bf00      	nop
 80107ec:	20001434 	.word	0x20001434

080107f0 <__malloc_unlock>:
 80107f0:	4801      	ldr	r0, [pc, #4]	; (80107f8 <__malloc_unlock+0x8>)
 80107f2:	f7ff b873 	b.w	800f8dc <__retarget_lock_release_recursive>
 80107f6:	bf00      	nop
 80107f8:	20001434 	.word	0x20001434

080107fc <_Balloc>:
 80107fc:	b570      	push	{r4, r5, r6, lr}
 80107fe:	69c6      	ldr	r6, [r0, #28]
 8010800:	4604      	mov	r4, r0
 8010802:	460d      	mov	r5, r1
 8010804:	b976      	cbnz	r6, 8010824 <_Balloc+0x28>
 8010806:	2010      	movs	r0, #16
 8010808:	f7ff ff44 	bl	8010694 <malloc>
 801080c:	4602      	mov	r2, r0
 801080e:	61e0      	str	r0, [r4, #28]
 8010810:	b920      	cbnz	r0, 801081c <_Balloc+0x20>
 8010812:	4b18      	ldr	r3, [pc, #96]	; (8010874 <_Balloc+0x78>)
 8010814:	4818      	ldr	r0, [pc, #96]	; (8010878 <_Balloc+0x7c>)
 8010816:	216b      	movs	r1, #107	; 0x6b
 8010818:	f001 fcfa 	bl	8012210 <__assert_func>
 801081c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010820:	6006      	str	r6, [r0, #0]
 8010822:	60c6      	str	r6, [r0, #12]
 8010824:	69e6      	ldr	r6, [r4, #28]
 8010826:	68f3      	ldr	r3, [r6, #12]
 8010828:	b183      	cbz	r3, 801084c <_Balloc+0x50>
 801082a:	69e3      	ldr	r3, [r4, #28]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010832:	b9b8      	cbnz	r0, 8010864 <_Balloc+0x68>
 8010834:	2101      	movs	r1, #1
 8010836:	fa01 f605 	lsl.w	r6, r1, r5
 801083a:	1d72      	adds	r2, r6, #5
 801083c:	0092      	lsls	r2, r2, #2
 801083e:	4620      	mov	r0, r4
 8010840:	f001 fd04 	bl	801224c <_calloc_r>
 8010844:	b160      	cbz	r0, 8010860 <_Balloc+0x64>
 8010846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801084a:	e00e      	b.n	801086a <_Balloc+0x6e>
 801084c:	2221      	movs	r2, #33	; 0x21
 801084e:	2104      	movs	r1, #4
 8010850:	4620      	mov	r0, r4
 8010852:	f001 fcfb 	bl	801224c <_calloc_r>
 8010856:	69e3      	ldr	r3, [r4, #28]
 8010858:	60f0      	str	r0, [r6, #12]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1e4      	bne.n	801082a <_Balloc+0x2e>
 8010860:	2000      	movs	r0, #0
 8010862:	bd70      	pop	{r4, r5, r6, pc}
 8010864:	6802      	ldr	r2, [r0, #0]
 8010866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801086a:	2300      	movs	r3, #0
 801086c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010870:	e7f7      	b.n	8010862 <_Balloc+0x66>
 8010872:	bf00      	nop
 8010874:	0801360b 	.word	0x0801360b
 8010878:	0801368b 	.word	0x0801368b

0801087c <_Bfree>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	69c6      	ldr	r6, [r0, #28]
 8010880:	4605      	mov	r5, r0
 8010882:	460c      	mov	r4, r1
 8010884:	b976      	cbnz	r6, 80108a4 <_Bfree+0x28>
 8010886:	2010      	movs	r0, #16
 8010888:	f7ff ff04 	bl	8010694 <malloc>
 801088c:	4602      	mov	r2, r0
 801088e:	61e8      	str	r0, [r5, #28]
 8010890:	b920      	cbnz	r0, 801089c <_Bfree+0x20>
 8010892:	4b09      	ldr	r3, [pc, #36]	; (80108b8 <_Bfree+0x3c>)
 8010894:	4809      	ldr	r0, [pc, #36]	; (80108bc <_Bfree+0x40>)
 8010896:	218f      	movs	r1, #143	; 0x8f
 8010898:	f001 fcba 	bl	8012210 <__assert_func>
 801089c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108a0:	6006      	str	r6, [r0, #0]
 80108a2:	60c6      	str	r6, [r0, #12]
 80108a4:	b13c      	cbz	r4, 80108b6 <_Bfree+0x3a>
 80108a6:	69eb      	ldr	r3, [r5, #28]
 80108a8:	6862      	ldr	r2, [r4, #4]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108b0:	6021      	str	r1, [r4, #0]
 80108b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108b6:	bd70      	pop	{r4, r5, r6, pc}
 80108b8:	0801360b 	.word	0x0801360b
 80108bc:	0801368b 	.word	0x0801368b

080108c0 <__multadd>:
 80108c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c4:	690d      	ldr	r5, [r1, #16]
 80108c6:	4607      	mov	r7, r0
 80108c8:	460c      	mov	r4, r1
 80108ca:	461e      	mov	r6, r3
 80108cc:	f101 0c14 	add.w	ip, r1, #20
 80108d0:	2000      	movs	r0, #0
 80108d2:	f8dc 3000 	ldr.w	r3, [ip]
 80108d6:	b299      	uxth	r1, r3
 80108d8:	fb02 6101 	mla	r1, r2, r1, r6
 80108dc:	0c1e      	lsrs	r6, r3, #16
 80108de:	0c0b      	lsrs	r3, r1, #16
 80108e0:	fb02 3306 	mla	r3, r2, r6, r3
 80108e4:	b289      	uxth	r1, r1
 80108e6:	3001      	adds	r0, #1
 80108e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108ec:	4285      	cmp	r5, r0
 80108ee:	f84c 1b04 	str.w	r1, [ip], #4
 80108f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108f6:	dcec      	bgt.n	80108d2 <__multadd+0x12>
 80108f8:	b30e      	cbz	r6, 801093e <__multadd+0x7e>
 80108fa:	68a3      	ldr	r3, [r4, #8]
 80108fc:	42ab      	cmp	r3, r5
 80108fe:	dc19      	bgt.n	8010934 <__multadd+0x74>
 8010900:	6861      	ldr	r1, [r4, #4]
 8010902:	4638      	mov	r0, r7
 8010904:	3101      	adds	r1, #1
 8010906:	f7ff ff79 	bl	80107fc <_Balloc>
 801090a:	4680      	mov	r8, r0
 801090c:	b928      	cbnz	r0, 801091a <__multadd+0x5a>
 801090e:	4602      	mov	r2, r0
 8010910:	4b0c      	ldr	r3, [pc, #48]	; (8010944 <__multadd+0x84>)
 8010912:	480d      	ldr	r0, [pc, #52]	; (8010948 <__multadd+0x88>)
 8010914:	21ba      	movs	r1, #186	; 0xba
 8010916:	f001 fc7b 	bl	8012210 <__assert_func>
 801091a:	6922      	ldr	r2, [r4, #16]
 801091c:	3202      	adds	r2, #2
 801091e:	f104 010c 	add.w	r1, r4, #12
 8010922:	0092      	lsls	r2, r2, #2
 8010924:	300c      	adds	r0, #12
 8010926:	f7fe ffda 	bl	800f8de <memcpy>
 801092a:	4621      	mov	r1, r4
 801092c:	4638      	mov	r0, r7
 801092e:	f7ff ffa5 	bl	801087c <_Bfree>
 8010932:	4644      	mov	r4, r8
 8010934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010938:	3501      	adds	r5, #1
 801093a:	615e      	str	r6, [r3, #20]
 801093c:	6125      	str	r5, [r4, #16]
 801093e:	4620      	mov	r0, r4
 8010940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010944:	0801367a 	.word	0x0801367a
 8010948:	0801368b 	.word	0x0801368b

0801094c <__s2b>:
 801094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010950:	460c      	mov	r4, r1
 8010952:	4615      	mov	r5, r2
 8010954:	461f      	mov	r7, r3
 8010956:	2209      	movs	r2, #9
 8010958:	3308      	adds	r3, #8
 801095a:	4606      	mov	r6, r0
 801095c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010960:	2100      	movs	r1, #0
 8010962:	2201      	movs	r2, #1
 8010964:	429a      	cmp	r2, r3
 8010966:	db09      	blt.n	801097c <__s2b+0x30>
 8010968:	4630      	mov	r0, r6
 801096a:	f7ff ff47 	bl	80107fc <_Balloc>
 801096e:	b940      	cbnz	r0, 8010982 <__s2b+0x36>
 8010970:	4602      	mov	r2, r0
 8010972:	4b19      	ldr	r3, [pc, #100]	; (80109d8 <__s2b+0x8c>)
 8010974:	4819      	ldr	r0, [pc, #100]	; (80109dc <__s2b+0x90>)
 8010976:	21d3      	movs	r1, #211	; 0xd3
 8010978:	f001 fc4a 	bl	8012210 <__assert_func>
 801097c:	0052      	lsls	r2, r2, #1
 801097e:	3101      	adds	r1, #1
 8010980:	e7f0      	b.n	8010964 <__s2b+0x18>
 8010982:	9b08      	ldr	r3, [sp, #32]
 8010984:	6143      	str	r3, [r0, #20]
 8010986:	2d09      	cmp	r5, #9
 8010988:	f04f 0301 	mov.w	r3, #1
 801098c:	6103      	str	r3, [r0, #16]
 801098e:	dd16      	ble.n	80109be <__s2b+0x72>
 8010990:	f104 0909 	add.w	r9, r4, #9
 8010994:	46c8      	mov	r8, r9
 8010996:	442c      	add	r4, r5
 8010998:	f818 3b01 	ldrb.w	r3, [r8], #1
 801099c:	4601      	mov	r1, r0
 801099e:	3b30      	subs	r3, #48	; 0x30
 80109a0:	220a      	movs	r2, #10
 80109a2:	4630      	mov	r0, r6
 80109a4:	f7ff ff8c 	bl	80108c0 <__multadd>
 80109a8:	45a0      	cmp	r8, r4
 80109aa:	d1f5      	bne.n	8010998 <__s2b+0x4c>
 80109ac:	f1a5 0408 	sub.w	r4, r5, #8
 80109b0:	444c      	add	r4, r9
 80109b2:	1b2d      	subs	r5, r5, r4
 80109b4:	1963      	adds	r3, r4, r5
 80109b6:	42bb      	cmp	r3, r7
 80109b8:	db04      	blt.n	80109c4 <__s2b+0x78>
 80109ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109be:	340a      	adds	r4, #10
 80109c0:	2509      	movs	r5, #9
 80109c2:	e7f6      	b.n	80109b2 <__s2b+0x66>
 80109c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109c8:	4601      	mov	r1, r0
 80109ca:	3b30      	subs	r3, #48	; 0x30
 80109cc:	220a      	movs	r2, #10
 80109ce:	4630      	mov	r0, r6
 80109d0:	f7ff ff76 	bl	80108c0 <__multadd>
 80109d4:	e7ee      	b.n	80109b4 <__s2b+0x68>
 80109d6:	bf00      	nop
 80109d8:	0801367a 	.word	0x0801367a
 80109dc:	0801368b 	.word	0x0801368b

080109e0 <__hi0bits>:
 80109e0:	0c03      	lsrs	r3, r0, #16
 80109e2:	041b      	lsls	r3, r3, #16
 80109e4:	b9d3      	cbnz	r3, 8010a1c <__hi0bits+0x3c>
 80109e6:	0400      	lsls	r0, r0, #16
 80109e8:	2310      	movs	r3, #16
 80109ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109ee:	bf04      	itt	eq
 80109f0:	0200      	lsleq	r0, r0, #8
 80109f2:	3308      	addeq	r3, #8
 80109f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109f8:	bf04      	itt	eq
 80109fa:	0100      	lsleq	r0, r0, #4
 80109fc:	3304      	addeq	r3, #4
 80109fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a02:	bf04      	itt	eq
 8010a04:	0080      	lsleq	r0, r0, #2
 8010a06:	3302      	addeq	r3, #2
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	db05      	blt.n	8010a18 <__hi0bits+0x38>
 8010a0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a10:	f103 0301 	add.w	r3, r3, #1
 8010a14:	bf08      	it	eq
 8010a16:	2320      	moveq	r3, #32
 8010a18:	4618      	mov	r0, r3
 8010a1a:	4770      	bx	lr
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	e7e4      	b.n	80109ea <__hi0bits+0xa>

08010a20 <__lo0bits>:
 8010a20:	6803      	ldr	r3, [r0, #0]
 8010a22:	f013 0207 	ands.w	r2, r3, #7
 8010a26:	d00c      	beq.n	8010a42 <__lo0bits+0x22>
 8010a28:	07d9      	lsls	r1, r3, #31
 8010a2a:	d422      	bmi.n	8010a72 <__lo0bits+0x52>
 8010a2c:	079a      	lsls	r2, r3, #30
 8010a2e:	bf49      	itett	mi
 8010a30:	085b      	lsrmi	r3, r3, #1
 8010a32:	089b      	lsrpl	r3, r3, #2
 8010a34:	6003      	strmi	r3, [r0, #0]
 8010a36:	2201      	movmi	r2, #1
 8010a38:	bf5c      	itt	pl
 8010a3a:	6003      	strpl	r3, [r0, #0]
 8010a3c:	2202      	movpl	r2, #2
 8010a3e:	4610      	mov	r0, r2
 8010a40:	4770      	bx	lr
 8010a42:	b299      	uxth	r1, r3
 8010a44:	b909      	cbnz	r1, 8010a4a <__lo0bits+0x2a>
 8010a46:	0c1b      	lsrs	r3, r3, #16
 8010a48:	2210      	movs	r2, #16
 8010a4a:	b2d9      	uxtb	r1, r3
 8010a4c:	b909      	cbnz	r1, 8010a52 <__lo0bits+0x32>
 8010a4e:	3208      	adds	r2, #8
 8010a50:	0a1b      	lsrs	r3, r3, #8
 8010a52:	0719      	lsls	r1, r3, #28
 8010a54:	bf04      	itt	eq
 8010a56:	091b      	lsreq	r3, r3, #4
 8010a58:	3204      	addeq	r2, #4
 8010a5a:	0799      	lsls	r1, r3, #30
 8010a5c:	bf04      	itt	eq
 8010a5e:	089b      	lsreq	r3, r3, #2
 8010a60:	3202      	addeq	r2, #2
 8010a62:	07d9      	lsls	r1, r3, #31
 8010a64:	d403      	bmi.n	8010a6e <__lo0bits+0x4e>
 8010a66:	085b      	lsrs	r3, r3, #1
 8010a68:	f102 0201 	add.w	r2, r2, #1
 8010a6c:	d003      	beq.n	8010a76 <__lo0bits+0x56>
 8010a6e:	6003      	str	r3, [r0, #0]
 8010a70:	e7e5      	b.n	8010a3e <__lo0bits+0x1e>
 8010a72:	2200      	movs	r2, #0
 8010a74:	e7e3      	b.n	8010a3e <__lo0bits+0x1e>
 8010a76:	2220      	movs	r2, #32
 8010a78:	e7e1      	b.n	8010a3e <__lo0bits+0x1e>
	...

08010a7c <__i2b>:
 8010a7c:	b510      	push	{r4, lr}
 8010a7e:	460c      	mov	r4, r1
 8010a80:	2101      	movs	r1, #1
 8010a82:	f7ff febb 	bl	80107fc <_Balloc>
 8010a86:	4602      	mov	r2, r0
 8010a88:	b928      	cbnz	r0, 8010a96 <__i2b+0x1a>
 8010a8a:	4b05      	ldr	r3, [pc, #20]	; (8010aa0 <__i2b+0x24>)
 8010a8c:	4805      	ldr	r0, [pc, #20]	; (8010aa4 <__i2b+0x28>)
 8010a8e:	f240 1145 	movw	r1, #325	; 0x145
 8010a92:	f001 fbbd 	bl	8012210 <__assert_func>
 8010a96:	2301      	movs	r3, #1
 8010a98:	6144      	str	r4, [r0, #20]
 8010a9a:	6103      	str	r3, [r0, #16]
 8010a9c:	bd10      	pop	{r4, pc}
 8010a9e:	bf00      	nop
 8010aa0:	0801367a 	.word	0x0801367a
 8010aa4:	0801368b 	.word	0x0801368b

08010aa8 <__multiply>:
 8010aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aac:	4691      	mov	r9, r2
 8010aae:	690a      	ldr	r2, [r1, #16]
 8010ab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	bfb8      	it	lt
 8010ab8:	460b      	movlt	r3, r1
 8010aba:	460c      	mov	r4, r1
 8010abc:	bfbc      	itt	lt
 8010abe:	464c      	movlt	r4, r9
 8010ac0:	4699      	movlt	r9, r3
 8010ac2:	6927      	ldr	r7, [r4, #16]
 8010ac4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ac8:	68a3      	ldr	r3, [r4, #8]
 8010aca:	6861      	ldr	r1, [r4, #4]
 8010acc:	eb07 060a 	add.w	r6, r7, sl
 8010ad0:	42b3      	cmp	r3, r6
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	bfb8      	it	lt
 8010ad6:	3101      	addlt	r1, #1
 8010ad8:	f7ff fe90 	bl	80107fc <_Balloc>
 8010adc:	b930      	cbnz	r0, 8010aec <__multiply+0x44>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	4b44      	ldr	r3, [pc, #272]	; (8010bf4 <__multiply+0x14c>)
 8010ae2:	4845      	ldr	r0, [pc, #276]	; (8010bf8 <__multiply+0x150>)
 8010ae4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010ae8:	f001 fb92 	bl	8012210 <__assert_func>
 8010aec:	f100 0514 	add.w	r5, r0, #20
 8010af0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010af4:	462b      	mov	r3, r5
 8010af6:	2200      	movs	r2, #0
 8010af8:	4543      	cmp	r3, r8
 8010afa:	d321      	bcc.n	8010b40 <__multiply+0x98>
 8010afc:	f104 0314 	add.w	r3, r4, #20
 8010b00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010b04:	f109 0314 	add.w	r3, r9, #20
 8010b08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b0c:	9202      	str	r2, [sp, #8]
 8010b0e:	1b3a      	subs	r2, r7, r4
 8010b10:	3a15      	subs	r2, #21
 8010b12:	f022 0203 	bic.w	r2, r2, #3
 8010b16:	3204      	adds	r2, #4
 8010b18:	f104 0115 	add.w	r1, r4, #21
 8010b1c:	428f      	cmp	r7, r1
 8010b1e:	bf38      	it	cc
 8010b20:	2204      	movcc	r2, #4
 8010b22:	9201      	str	r2, [sp, #4]
 8010b24:	9a02      	ldr	r2, [sp, #8]
 8010b26:	9303      	str	r3, [sp, #12]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d80c      	bhi.n	8010b46 <__multiply+0x9e>
 8010b2c:	2e00      	cmp	r6, #0
 8010b2e:	dd03      	ble.n	8010b38 <__multiply+0x90>
 8010b30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d05b      	beq.n	8010bf0 <__multiply+0x148>
 8010b38:	6106      	str	r6, [r0, #16]
 8010b3a:	b005      	add	sp, #20
 8010b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b40:	f843 2b04 	str.w	r2, [r3], #4
 8010b44:	e7d8      	b.n	8010af8 <__multiply+0x50>
 8010b46:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b4a:	f1ba 0f00 	cmp.w	sl, #0
 8010b4e:	d024      	beq.n	8010b9a <__multiply+0xf2>
 8010b50:	f104 0e14 	add.w	lr, r4, #20
 8010b54:	46a9      	mov	r9, r5
 8010b56:	f04f 0c00 	mov.w	ip, #0
 8010b5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b5e:	f8d9 1000 	ldr.w	r1, [r9]
 8010b62:	fa1f fb82 	uxth.w	fp, r2
 8010b66:	b289      	uxth	r1, r1
 8010b68:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b70:	f8d9 2000 	ldr.w	r2, [r9]
 8010b74:	4461      	add	r1, ip
 8010b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8010b7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b82:	b289      	uxth	r1, r1
 8010b84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b88:	4577      	cmp	r7, lr
 8010b8a:	f849 1b04 	str.w	r1, [r9], #4
 8010b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b92:	d8e2      	bhi.n	8010b5a <__multiply+0xb2>
 8010b94:	9a01      	ldr	r2, [sp, #4]
 8010b96:	f845 c002 	str.w	ip, [r5, r2]
 8010b9a:	9a03      	ldr	r2, [sp, #12]
 8010b9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	f1b9 0f00 	cmp.w	r9, #0
 8010ba6:	d021      	beq.n	8010bec <__multiply+0x144>
 8010ba8:	6829      	ldr	r1, [r5, #0]
 8010baa:	f104 0c14 	add.w	ip, r4, #20
 8010bae:	46ae      	mov	lr, r5
 8010bb0:	f04f 0a00 	mov.w	sl, #0
 8010bb4:	f8bc b000 	ldrh.w	fp, [ip]
 8010bb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010bbc:	fb09 220b 	mla	r2, r9, fp, r2
 8010bc0:	4452      	add	r2, sl
 8010bc2:	b289      	uxth	r1, r1
 8010bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bc8:	f84e 1b04 	str.w	r1, [lr], #4
 8010bcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010bd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bd4:	f8be 1000 	ldrh.w	r1, [lr]
 8010bd8:	fb09 110a 	mla	r1, r9, sl, r1
 8010bdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010be0:	4567      	cmp	r7, ip
 8010be2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010be6:	d8e5      	bhi.n	8010bb4 <__multiply+0x10c>
 8010be8:	9a01      	ldr	r2, [sp, #4]
 8010bea:	50a9      	str	r1, [r5, r2]
 8010bec:	3504      	adds	r5, #4
 8010bee:	e799      	b.n	8010b24 <__multiply+0x7c>
 8010bf0:	3e01      	subs	r6, #1
 8010bf2:	e79b      	b.n	8010b2c <__multiply+0x84>
 8010bf4:	0801367a 	.word	0x0801367a
 8010bf8:	0801368b 	.word	0x0801368b

08010bfc <__pow5mult>:
 8010bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c00:	4615      	mov	r5, r2
 8010c02:	f012 0203 	ands.w	r2, r2, #3
 8010c06:	4606      	mov	r6, r0
 8010c08:	460f      	mov	r7, r1
 8010c0a:	d007      	beq.n	8010c1c <__pow5mult+0x20>
 8010c0c:	4c25      	ldr	r4, [pc, #148]	; (8010ca4 <__pow5mult+0xa8>)
 8010c0e:	3a01      	subs	r2, #1
 8010c10:	2300      	movs	r3, #0
 8010c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c16:	f7ff fe53 	bl	80108c0 <__multadd>
 8010c1a:	4607      	mov	r7, r0
 8010c1c:	10ad      	asrs	r5, r5, #2
 8010c1e:	d03d      	beq.n	8010c9c <__pow5mult+0xa0>
 8010c20:	69f4      	ldr	r4, [r6, #28]
 8010c22:	b97c      	cbnz	r4, 8010c44 <__pow5mult+0x48>
 8010c24:	2010      	movs	r0, #16
 8010c26:	f7ff fd35 	bl	8010694 <malloc>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	61f0      	str	r0, [r6, #28]
 8010c2e:	b928      	cbnz	r0, 8010c3c <__pow5mult+0x40>
 8010c30:	4b1d      	ldr	r3, [pc, #116]	; (8010ca8 <__pow5mult+0xac>)
 8010c32:	481e      	ldr	r0, [pc, #120]	; (8010cac <__pow5mult+0xb0>)
 8010c34:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010c38:	f001 faea 	bl	8012210 <__assert_func>
 8010c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c40:	6004      	str	r4, [r0, #0]
 8010c42:	60c4      	str	r4, [r0, #12]
 8010c44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c4c:	b94c      	cbnz	r4, 8010c62 <__pow5mult+0x66>
 8010c4e:	f240 2171 	movw	r1, #625	; 0x271
 8010c52:	4630      	mov	r0, r6
 8010c54:	f7ff ff12 	bl	8010a7c <__i2b>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c5e:	4604      	mov	r4, r0
 8010c60:	6003      	str	r3, [r0, #0]
 8010c62:	f04f 0900 	mov.w	r9, #0
 8010c66:	07eb      	lsls	r3, r5, #31
 8010c68:	d50a      	bpl.n	8010c80 <__pow5mult+0x84>
 8010c6a:	4639      	mov	r1, r7
 8010c6c:	4622      	mov	r2, r4
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f7ff ff1a 	bl	8010aa8 <__multiply>
 8010c74:	4639      	mov	r1, r7
 8010c76:	4680      	mov	r8, r0
 8010c78:	4630      	mov	r0, r6
 8010c7a:	f7ff fdff 	bl	801087c <_Bfree>
 8010c7e:	4647      	mov	r7, r8
 8010c80:	106d      	asrs	r5, r5, #1
 8010c82:	d00b      	beq.n	8010c9c <__pow5mult+0xa0>
 8010c84:	6820      	ldr	r0, [r4, #0]
 8010c86:	b938      	cbnz	r0, 8010c98 <__pow5mult+0x9c>
 8010c88:	4622      	mov	r2, r4
 8010c8a:	4621      	mov	r1, r4
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	f7ff ff0b 	bl	8010aa8 <__multiply>
 8010c92:	6020      	str	r0, [r4, #0]
 8010c94:	f8c0 9000 	str.w	r9, [r0]
 8010c98:	4604      	mov	r4, r0
 8010c9a:	e7e4      	b.n	8010c66 <__pow5mult+0x6a>
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ca2:	bf00      	nop
 8010ca4:	080137d8 	.word	0x080137d8
 8010ca8:	0801360b 	.word	0x0801360b
 8010cac:	0801368b 	.word	0x0801368b

08010cb0 <__lshift>:
 8010cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb4:	460c      	mov	r4, r1
 8010cb6:	6849      	ldr	r1, [r1, #4]
 8010cb8:	6923      	ldr	r3, [r4, #16]
 8010cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cbe:	68a3      	ldr	r3, [r4, #8]
 8010cc0:	4607      	mov	r7, r0
 8010cc2:	4691      	mov	r9, r2
 8010cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cc8:	f108 0601 	add.w	r6, r8, #1
 8010ccc:	42b3      	cmp	r3, r6
 8010cce:	db0b      	blt.n	8010ce8 <__lshift+0x38>
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f7ff fd93 	bl	80107fc <_Balloc>
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	b948      	cbnz	r0, 8010cee <__lshift+0x3e>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	4b28      	ldr	r3, [pc, #160]	; (8010d80 <__lshift+0xd0>)
 8010cde:	4829      	ldr	r0, [pc, #164]	; (8010d84 <__lshift+0xd4>)
 8010ce0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010ce4:	f001 fa94 	bl	8012210 <__assert_func>
 8010ce8:	3101      	adds	r1, #1
 8010cea:	005b      	lsls	r3, r3, #1
 8010cec:	e7ee      	b.n	8010ccc <__lshift+0x1c>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	f100 0114 	add.w	r1, r0, #20
 8010cf4:	f100 0210 	add.w	r2, r0, #16
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	4553      	cmp	r3, sl
 8010cfc:	db33      	blt.n	8010d66 <__lshift+0xb6>
 8010cfe:	6920      	ldr	r0, [r4, #16]
 8010d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d04:	f104 0314 	add.w	r3, r4, #20
 8010d08:	f019 091f 	ands.w	r9, r9, #31
 8010d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d14:	d02b      	beq.n	8010d6e <__lshift+0xbe>
 8010d16:	f1c9 0e20 	rsb	lr, r9, #32
 8010d1a:	468a      	mov	sl, r1
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	6818      	ldr	r0, [r3, #0]
 8010d20:	fa00 f009 	lsl.w	r0, r0, r9
 8010d24:	4310      	orrs	r0, r2
 8010d26:	f84a 0b04 	str.w	r0, [sl], #4
 8010d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d2e:	459c      	cmp	ip, r3
 8010d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d34:	d8f3      	bhi.n	8010d1e <__lshift+0x6e>
 8010d36:	ebac 0304 	sub.w	r3, ip, r4
 8010d3a:	3b15      	subs	r3, #21
 8010d3c:	f023 0303 	bic.w	r3, r3, #3
 8010d40:	3304      	adds	r3, #4
 8010d42:	f104 0015 	add.w	r0, r4, #21
 8010d46:	4584      	cmp	ip, r0
 8010d48:	bf38      	it	cc
 8010d4a:	2304      	movcc	r3, #4
 8010d4c:	50ca      	str	r2, [r1, r3]
 8010d4e:	b10a      	cbz	r2, 8010d54 <__lshift+0xa4>
 8010d50:	f108 0602 	add.w	r6, r8, #2
 8010d54:	3e01      	subs	r6, #1
 8010d56:	4638      	mov	r0, r7
 8010d58:	612e      	str	r6, [r5, #16]
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	f7ff fd8e 	bl	801087c <_Bfree>
 8010d60:	4628      	mov	r0, r5
 8010d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	e7c5      	b.n	8010cfa <__lshift+0x4a>
 8010d6e:	3904      	subs	r1, #4
 8010d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d78:	459c      	cmp	ip, r3
 8010d7a:	d8f9      	bhi.n	8010d70 <__lshift+0xc0>
 8010d7c:	e7ea      	b.n	8010d54 <__lshift+0xa4>
 8010d7e:	bf00      	nop
 8010d80:	0801367a 	.word	0x0801367a
 8010d84:	0801368b 	.word	0x0801368b

08010d88 <__mcmp>:
 8010d88:	b530      	push	{r4, r5, lr}
 8010d8a:	6902      	ldr	r2, [r0, #16]
 8010d8c:	690c      	ldr	r4, [r1, #16]
 8010d8e:	1b12      	subs	r2, r2, r4
 8010d90:	d10e      	bne.n	8010db0 <__mcmp+0x28>
 8010d92:	f100 0314 	add.w	r3, r0, #20
 8010d96:	3114      	adds	r1, #20
 8010d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010da8:	42a5      	cmp	r5, r4
 8010daa:	d003      	beq.n	8010db4 <__mcmp+0x2c>
 8010dac:	d305      	bcc.n	8010dba <__mcmp+0x32>
 8010dae:	2201      	movs	r2, #1
 8010db0:	4610      	mov	r0, r2
 8010db2:	bd30      	pop	{r4, r5, pc}
 8010db4:	4283      	cmp	r3, r0
 8010db6:	d3f3      	bcc.n	8010da0 <__mcmp+0x18>
 8010db8:	e7fa      	b.n	8010db0 <__mcmp+0x28>
 8010dba:	f04f 32ff 	mov.w	r2, #4294967295
 8010dbe:	e7f7      	b.n	8010db0 <__mcmp+0x28>

08010dc0 <__mdiff>:
 8010dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4620      	mov	r0, r4
 8010dcc:	4690      	mov	r8, r2
 8010dce:	f7ff ffdb 	bl	8010d88 <__mcmp>
 8010dd2:	1e05      	subs	r5, r0, #0
 8010dd4:	d110      	bne.n	8010df8 <__mdiff+0x38>
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f7ff fd0f 	bl	80107fc <_Balloc>
 8010dde:	b930      	cbnz	r0, 8010dee <__mdiff+0x2e>
 8010de0:	4b3a      	ldr	r3, [pc, #232]	; (8010ecc <__mdiff+0x10c>)
 8010de2:	4602      	mov	r2, r0
 8010de4:	f240 2137 	movw	r1, #567	; 0x237
 8010de8:	4839      	ldr	r0, [pc, #228]	; (8010ed0 <__mdiff+0x110>)
 8010dea:	f001 fa11 	bl	8012210 <__assert_func>
 8010dee:	2301      	movs	r3, #1
 8010df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df8:	bfa4      	itt	ge
 8010dfa:	4643      	movge	r3, r8
 8010dfc:	46a0      	movge	r8, r4
 8010dfe:	4630      	mov	r0, r6
 8010e00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e04:	bfa6      	itte	ge
 8010e06:	461c      	movge	r4, r3
 8010e08:	2500      	movge	r5, #0
 8010e0a:	2501      	movlt	r5, #1
 8010e0c:	f7ff fcf6 	bl	80107fc <_Balloc>
 8010e10:	b920      	cbnz	r0, 8010e1c <__mdiff+0x5c>
 8010e12:	4b2e      	ldr	r3, [pc, #184]	; (8010ecc <__mdiff+0x10c>)
 8010e14:	4602      	mov	r2, r0
 8010e16:	f240 2145 	movw	r1, #581	; 0x245
 8010e1a:	e7e5      	b.n	8010de8 <__mdiff+0x28>
 8010e1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e20:	6926      	ldr	r6, [r4, #16]
 8010e22:	60c5      	str	r5, [r0, #12]
 8010e24:	f104 0914 	add.w	r9, r4, #20
 8010e28:	f108 0514 	add.w	r5, r8, #20
 8010e2c:	f100 0e14 	add.w	lr, r0, #20
 8010e30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e38:	f108 0210 	add.w	r2, r8, #16
 8010e3c:	46f2      	mov	sl, lr
 8010e3e:	2100      	movs	r1, #0
 8010e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e48:	fa11 f88b 	uxtah	r8, r1, fp
 8010e4c:	b299      	uxth	r1, r3
 8010e4e:	0c1b      	lsrs	r3, r3, #16
 8010e50:	eba8 0801 	sub.w	r8, r8, r1
 8010e54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e5c:	fa1f f888 	uxth.w	r8, r8
 8010e60:	1419      	asrs	r1, r3, #16
 8010e62:	454e      	cmp	r6, r9
 8010e64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e68:	f84a 3b04 	str.w	r3, [sl], #4
 8010e6c:	d8e8      	bhi.n	8010e40 <__mdiff+0x80>
 8010e6e:	1b33      	subs	r3, r6, r4
 8010e70:	3b15      	subs	r3, #21
 8010e72:	f023 0303 	bic.w	r3, r3, #3
 8010e76:	3304      	adds	r3, #4
 8010e78:	3415      	adds	r4, #21
 8010e7a:	42a6      	cmp	r6, r4
 8010e7c:	bf38      	it	cc
 8010e7e:	2304      	movcc	r3, #4
 8010e80:	441d      	add	r5, r3
 8010e82:	4473      	add	r3, lr
 8010e84:	469e      	mov	lr, r3
 8010e86:	462e      	mov	r6, r5
 8010e88:	4566      	cmp	r6, ip
 8010e8a:	d30e      	bcc.n	8010eaa <__mdiff+0xea>
 8010e8c:	f10c 0203 	add.w	r2, ip, #3
 8010e90:	1b52      	subs	r2, r2, r5
 8010e92:	f022 0203 	bic.w	r2, r2, #3
 8010e96:	3d03      	subs	r5, #3
 8010e98:	45ac      	cmp	ip, r5
 8010e9a:	bf38      	it	cc
 8010e9c:	2200      	movcc	r2, #0
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ea4:	b17a      	cbz	r2, 8010ec6 <__mdiff+0x106>
 8010ea6:	6107      	str	r7, [r0, #16]
 8010ea8:	e7a4      	b.n	8010df4 <__mdiff+0x34>
 8010eaa:	f856 8b04 	ldr.w	r8, [r6], #4
 8010eae:	fa11 f288 	uxtah	r2, r1, r8
 8010eb2:	1414      	asrs	r4, r2, #16
 8010eb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010eb8:	b292      	uxth	r2, r2
 8010eba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ebe:	f84e 2b04 	str.w	r2, [lr], #4
 8010ec2:	1421      	asrs	r1, r4, #16
 8010ec4:	e7e0      	b.n	8010e88 <__mdiff+0xc8>
 8010ec6:	3f01      	subs	r7, #1
 8010ec8:	e7ea      	b.n	8010ea0 <__mdiff+0xe0>
 8010eca:	bf00      	nop
 8010ecc:	0801367a 	.word	0x0801367a
 8010ed0:	0801368b 	.word	0x0801368b

08010ed4 <__ulp>:
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	ed8d 0b00 	vstr	d0, [sp]
 8010eda:	9a01      	ldr	r2, [sp, #4]
 8010edc:	4b0f      	ldr	r3, [pc, #60]	; (8010f1c <__ulp+0x48>)
 8010ede:	4013      	ands	r3, r2
 8010ee0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	dc08      	bgt.n	8010efa <__ulp+0x26>
 8010ee8:	425b      	negs	r3, r3
 8010eea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010eee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010ef2:	da04      	bge.n	8010efe <__ulp+0x2a>
 8010ef4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010ef8:	4113      	asrs	r3, r2
 8010efa:	2200      	movs	r2, #0
 8010efc:	e008      	b.n	8010f10 <__ulp+0x3c>
 8010efe:	f1a2 0314 	sub.w	r3, r2, #20
 8010f02:	2b1e      	cmp	r3, #30
 8010f04:	bfda      	itte	le
 8010f06:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010f0a:	40da      	lsrle	r2, r3
 8010f0c:	2201      	movgt	r2, #1
 8010f0e:	2300      	movs	r3, #0
 8010f10:	4619      	mov	r1, r3
 8010f12:	4610      	mov	r0, r2
 8010f14:	ec41 0b10 	vmov	d0, r0, r1
 8010f18:	b002      	add	sp, #8
 8010f1a:	4770      	bx	lr
 8010f1c:	7ff00000 	.word	0x7ff00000

08010f20 <__b2d>:
 8010f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f24:	6906      	ldr	r6, [r0, #16]
 8010f26:	f100 0814 	add.w	r8, r0, #20
 8010f2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010f2e:	1f37      	subs	r7, r6, #4
 8010f30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010f34:	4610      	mov	r0, r2
 8010f36:	f7ff fd53 	bl	80109e0 <__hi0bits>
 8010f3a:	f1c0 0320 	rsb	r3, r0, #32
 8010f3e:	280a      	cmp	r0, #10
 8010f40:	600b      	str	r3, [r1, #0]
 8010f42:	491b      	ldr	r1, [pc, #108]	; (8010fb0 <__b2d+0x90>)
 8010f44:	dc15      	bgt.n	8010f72 <__b2d+0x52>
 8010f46:	f1c0 0c0b 	rsb	ip, r0, #11
 8010f4a:	fa22 f30c 	lsr.w	r3, r2, ip
 8010f4e:	45b8      	cmp	r8, r7
 8010f50:	ea43 0501 	orr.w	r5, r3, r1
 8010f54:	bf34      	ite	cc
 8010f56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f5a:	2300      	movcs	r3, #0
 8010f5c:	3015      	adds	r0, #21
 8010f5e:	fa02 f000 	lsl.w	r0, r2, r0
 8010f62:	fa23 f30c 	lsr.w	r3, r3, ip
 8010f66:	4303      	orrs	r3, r0
 8010f68:	461c      	mov	r4, r3
 8010f6a:	ec45 4b10 	vmov	d0, r4, r5
 8010f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f72:	45b8      	cmp	r8, r7
 8010f74:	bf3a      	itte	cc
 8010f76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f7a:	f1a6 0708 	subcc.w	r7, r6, #8
 8010f7e:	2300      	movcs	r3, #0
 8010f80:	380b      	subs	r0, #11
 8010f82:	d012      	beq.n	8010faa <__b2d+0x8a>
 8010f84:	f1c0 0120 	rsb	r1, r0, #32
 8010f88:	fa23 f401 	lsr.w	r4, r3, r1
 8010f8c:	4082      	lsls	r2, r0
 8010f8e:	4322      	orrs	r2, r4
 8010f90:	4547      	cmp	r7, r8
 8010f92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010f96:	bf8c      	ite	hi
 8010f98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010f9c:	2200      	movls	r2, #0
 8010f9e:	4083      	lsls	r3, r0
 8010fa0:	40ca      	lsrs	r2, r1
 8010fa2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	e7de      	b.n	8010f68 <__b2d+0x48>
 8010faa:	ea42 0501 	orr.w	r5, r2, r1
 8010fae:	e7db      	b.n	8010f68 <__b2d+0x48>
 8010fb0:	3ff00000 	.word	0x3ff00000

08010fb4 <__d2b>:
 8010fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fb8:	460f      	mov	r7, r1
 8010fba:	2101      	movs	r1, #1
 8010fbc:	ec59 8b10 	vmov	r8, r9, d0
 8010fc0:	4616      	mov	r6, r2
 8010fc2:	f7ff fc1b 	bl	80107fc <_Balloc>
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	b930      	cbnz	r0, 8010fd8 <__d2b+0x24>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	4b24      	ldr	r3, [pc, #144]	; (8011060 <__d2b+0xac>)
 8010fce:	4825      	ldr	r0, [pc, #148]	; (8011064 <__d2b+0xb0>)
 8010fd0:	f240 310f 	movw	r1, #783	; 0x30f
 8010fd4:	f001 f91c 	bl	8012210 <__assert_func>
 8010fd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010fdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fe0:	bb2d      	cbnz	r5, 801102e <__d2b+0x7a>
 8010fe2:	9301      	str	r3, [sp, #4]
 8010fe4:	f1b8 0300 	subs.w	r3, r8, #0
 8010fe8:	d026      	beq.n	8011038 <__d2b+0x84>
 8010fea:	4668      	mov	r0, sp
 8010fec:	9300      	str	r3, [sp, #0]
 8010fee:	f7ff fd17 	bl	8010a20 <__lo0bits>
 8010ff2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010ff6:	b1e8      	cbz	r0, 8011034 <__d2b+0x80>
 8010ff8:	f1c0 0320 	rsb	r3, r0, #32
 8010ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8011000:	430b      	orrs	r3, r1
 8011002:	40c2      	lsrs	r2, r0
 8011004:	6163      	str	r3, [r4, #20]
 8011006:	9201      	str	r2, [sp, #4]
 8011008:	9b01      	ldr	r3, [sp, #4]
 801100a:	61a3      	str	r3, [r4, #24]
 801100c:	2b00      	cmp	r3, #0
 801100e:	bf14      	ite	ne
 8011010:	2202      	movne	r2, #2
 8011012:	2201      	moveq	r2, #1
 8011014:	6122      	str	r2, [r4, #16]
 8011016:	b1bd      	cbz	r5, 8011048 <__d2b+0x94>
 8011018:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801101c:	4405      	add	r5, r0
 801101e:	603d      	str	r5, [r7, #0]
 8011020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011024:	6030      	str	r0, [r6, #0]
 8011026:	4620      	mov	r0, r4
 8011028:	b003      	add	sp, #12
 801102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801102e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011032:	e7d6      	b.n	8010fe2 <__d2b+0x2e>
 8011034:	6161      	str	r1, [r4, #20]
 8011036:	e7e7      	b.n	8011008 <__d2b+0x54>
 8011038:	a801      	add	r0, sp, #4
 801103a:	f7ff fcf1 	bl	8010a20 <__lo0bits>
 801103e:	9b01      	ldr	r3, [sp, #4]
 8011040:	6163      	str	r3, [r4, #20]
 8011042:	3020      	adds	r0, #32
 8011044:	2201      	movs	r2, #1
 8011046:	e7e5      	b.n	8011014 <__d2b+0x60>
 8011048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801104c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011050:	6038      	str	r0, [r7, #0]
 8011052:	6918      	ldr	r0, [r3, #16]
 8011054:	f7ff fcc4 	bl	80109e0 <__hi0bits>
 8011058:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801105c:	e7e2      	b.n	8011024 <__d2b+0x70>
 801105e:	bf00      	nop
 8011060:	0801367a 	.word	0x0801367a
 8011064:	0801368b 	.word	0x0801368b

08011068 <__ratio>:
 8011068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	4688      	mov	r8, r1
 801106e:	4669      	mov	r1, sp
 8011070:	4681      	mov	r9, r0
 8011072:	f7ff ff55 	bl	8010f20 <__b2d>
 8011076:	a901      	add	r1, sp, #4
 8011078:	4640      	mov	r0, r8
 801107a:	ec55 4b10 	vmov	r4, r5, d0
 801107e:	f7ff ff4f 	bl	8010f20 <__b2d>
 8011082:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011086:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801108a:	eba3 0c02 	sub.w	ip, r3, r2
 801108e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011092:	1a9b      	subs	r3, r3, r2
 8011094:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011098:	ec51 0b10 	vmov	r0, r1, d0
 801109c:	2b00      	cmp	r3, #0
 801109e:	bfd6      	itet	le
 80110a0:	460a      	movle	r2, r1
 80110a2:	462a      	movgt	r2, r5
 80110a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110a8:	468b      	mov	fp, r1
 80110aa:	462f      	mov	r7, r5
 80110ac:	bfd4      	ite	le
 80110ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80110b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80110b6:	4620      	mov	r0, r4
 80110b8:	ee10 2a10 	vmov	r2, s0
 80110bc:	465b      	mov	r3, fp
 80110be:	4639      	mov	r1, r7
 80110c0:	f7ef fbec 	bl	800089c <__aeabi_ddiv>
 80110c4:	ec41 0b10 	vmov	d0, r0, r1
 80110c8:	b003      	add	sp, #12
 80110ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110ce <__copybits>:
 80110ce:	3901      	subs	r1, #1
 80110d0:	b570      	push	{r4, r5, r6, lr}
 80110d2:	1149      	asrs	r1, r1, #5
 80110d4:	6914      	ldr	r4, [r2, #16]
 80110d6:	3101      	adds	r1, #1
 80110d8:	f102 0314 	add.w	r3, r2, #20
 80110dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80110e4:	1f05      	subs	r5, r0, #4
 80110e6:	42a3      	cmp	r3, r4
 80110e8:	d30c      	bcc.n	8011104 <__copybits+0x36>
 80110ea:	1aa3      	subs	r3, r4, r2
 80110ec:	3b11      	subs	r3, #17
 80110ee:	f023 0303 	bic.w	r3, r3, #3
 80110f2:	3211      	adds	r2, #17
 80110f4:	42a2      	cmp	r2, r4
 80110f6:	bf88      	it	hi
 80110f8:	2300      	movhi	r3, #0
 80110fa:	4418      	add	r0, r3
 80110fc:	2300      	movs	r3, #0
 80110fe:	4288      	cmp	r0, r1
 8011100:	d305      	bcc.n	801110e <__copybits+0x40>
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	f853 6b04 	ldr.w	r6, [r3], #4
 8011108:	f845 6f04 	str.w	r6, [r5, #4]!
 801110c:	e7eb      	b.n	80110e6 <__copybits+0x18>
 801110e:	f840 3b04 	str.w	r3, [r0], #4
 8011112:	e7f4      	b.n	80110fe <__copybits+0x30>

08011114 <__any_on>:
 8011114:	f100 0214 	add.w	r2, r0, #20
 8011118:	6900      	ldr	r0, [r0, #16]
 801111a:	114b      	asrs	r3, r1, #5
 801111c:	4298      	cmp	r0, r3
 801111e:	b510      	push	{r4, lr}
 8011120:	db11      	blt.n	8011146 <__any_on+0x32>
 8011122:	dd0a      	ble.n	801113a <__any_on+0x26>
 8011124:	f011 011f 	ands.w	r1, r1, #31
 8011128:	d007      	beq.n	801113a <__any_on+0x26>
 801112a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801112e:	fa24 f001 	lsr.w	r0, r4, r1
 8011132:	fa00 f101 	lsl.w	r1, r0, r1
 8011136:	428c      	cmp	r4, r1
 8011138:	d10b      	bne.n	8011152 <__any_on+0x3e>
 801113a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801113e:	4293      	cmp	r3, r2
 8011140:	d803      	bhi.n	801114a <__any_on+0x36>
 8011142:	2000      	movs	r0, #0
 8011144:	bd10      	pop	{r4, pc}
 8011146:	4603      	mov	r3, r0
 8011148:	e7f7      	b.n	801113a <__any_on+0x26>
 801114a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801114e:	2900      	cmp	r1, #0
 8011150:	d0f5      	beq.n	801113e <__any_on+0x2a>
 8011152:	2001      	movs	r0, #1
 8011154:	e7f6      	b.n	8011144 <__any_on+0x30>

08011156 <sulp>:
 8011156:	b570      	push	{r4, r5, r6, lr}
 8011158:	4604      	mov	r4, r0
 801115a:	460d      	mov	r5, r1
 801115c:	ec45 4b10 	vmov	d0, r4, r5
 8011160:	4616      	mov	r6, r2
 8011162:	f7ff feb7 	bl	8010ed4 <__ulp>
 8011166:	ec51 0b10 	vmov	r0, r1, d0
 801116a:	b17e      	cbz	r6, 801118c <sulp+0x36>
 801116c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011170:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011174:	2b00      	cmp	r3, #0
 8011176:	dd09      	ble.n	801118c <sulp+0x36>
 8011178:	051b      	lsls	r3, r3, #20
 801117a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801117e:	2400      	movs	r4, #0
 8011180:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011184:	4622      	mov	r2, r4
 8011186:	462b      	mov	r3, r5
 8011188:	f7ef fa5e 	bl	8000648 <__aeabi_dmul>
 801118c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011190 <_strtod_l>:
 8011190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011194:	ed2d 8b02 	vpush	{d8}
 8011198:	b09b      	sub	sp, #108	; 0x6c
 801119a:	4604      	mov	r4, r0
 801119c:	9213      	str	r2, [sp, #76]	; 0x4c
 801119e:	2200      	movs	r2, #0
 80111a0:	9216      	str	r2, [sp, #88]	; 0x58
 80111a2:	460d      	mov	r5, r1
 80111a4:	f04f 0800 	mov.w	r8, #0
 80111a8:	f04f 0900 	mov.w	r9, #0
 80111ac:	460a      	mov	r2, r1
 80111ae:	9215      	str	r2, [sp, #84]	; 0x54
 80111b0:	7811      	ldrb	r1, [r2, #0]
 80111b2:	292b      	cmp	r1, #43	; 0x2b
 80111b4:	d04c      	beq.n	8011250 <_strtod_l+0xc0>
 80111b6:	d83a      	bhi.n	801122e <_strtod_l+0x9e>
 80111b8:	290d      	cmp	r1, #13
 80111ba:	d834      	bhi.n	8011226 <_strtod_l+0x96>
 80111bc:	2908      	cmp	r1, #8
 80111be:	d834      	bhi.n	801122a <_strtod_l+0x9a>
 80111c0:	2900      	cmp	r1, #0
 80111c2:	d03d      	beq.n	8011240 <_strtod_l+0xb0>
 80111c4:	2200      	movs	r2, #0
 80111c6:	920a      	str	r2, [sp, #40]	; 0x28
 80111c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80111ca:	7832      	ldrb	r2, [r6, #0]
 80111cc:	2a30      	cmp	r2, #48	; 0x30
 80111ce:	f040 80b4 	bne.w	801133a <_strtod_l+0x1aa>
 80111d2:	7872      	ldrb	r2, [r6, #1]
 80111d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80111d8:	2a58      	cmp	r2, #88	; 0x58
 80111da:	d170      	bne.n	80112be <_strtod_l+0x12e>
 80111dc:	9302      	str	r3, [sp, #8]
 80111de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e0:	9301      	str	r3, [sp, #4]
 80111e2:	ab16      	add	r3, sp, #88	; 0x58
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	4a8e      	ldr	r2, [pc, #568]	; (8011420 <_strtod_l+0x290>)
 80111e8:	ab17      	add	r3, sp, #92	; 0x5c
 80111ea:	a915      	add	r1, sp, #84	; 0x54
 80111ec:	4620      	mov	r0, r4
 80111ee:	f001 f8ab 	bl	8012348 <__gethex>
 80111f2:	f010 070f 	ands.w	r7, r0, #15
 80111f6:	4605      	mov	r5, r0
 80111f8:	d005      	beq.n	8011206 <_strtod_l+0x76>
 80111fa:	2f06      	cmp	r7, #6
 80111fc:	d12a      	bne.n	8011254 <_strtod_l+0xc4>
 80111fe:	3601      	adds	r6, #1
 8011200:	2300      	movs	r3, #0
 8011202:	9615      	str	r6, [sp, #84]	; 0x54
 8011204:	930a      	str	r3, [sp, #40]	; 0x28
 8011206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011208:	2b00      	cmp	r3, #0
 801120a:	f040 857f 	bne.w	8011d0c <_strtod_l+0xb7c>
 801120e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011210:	b1db      	cbz	r3, 801124a <_strtod_l+0xba>
 8011212:	4642      	mov	r2, r8
 8011214:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011218:	ec43 2b10 	vmov	d0, r2, r3
 801121c:	b01b      	add	sp, #108	; 0x6c
 801121e:	ecbd 8b02 	vpop	{d8}
 8011222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011226:	2920      	cmp	r1, #32
 8011228:	d1cc      	bne.n	80111c4 <_strtod_l+0x34>
 801122a:	3201      	adds	r2, #1
 801122c:	e7bf      	b.n	80111ae <_strtod_l+0x1e>
 801122e:	292d      	cmp	r1, #45	; 0x2d
 8011230:	d1c8      	bne.n	80111c4 <_strtod_l+0x34>
 8011232:	2101      	movs	r1, #1
 8011234:	910a      	str	r1, [sp, #40]	; 0x28
 8011236:	1c51      	adds	r1, r2, #1
 8011238:	9115      	str	r1, [sp, #84]	; 0x54
 801123a:	7852      	ldrb	r2, [r2, #1]
 801123c:	2a00      	cmp	r2, #0
 801123e:	d1c3      	bne.n	80111c8 <_strtod_l+0x38>
 8011240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011242:	9515      	str	r5, [sp, #84]	; 0x54
 8011244:	2b00      	cmp	r3, #0
 8011246:	f040 855f 	bne.w	8011d08 <_strtod_l+0xb78>
 801124a:	4642      	mov	r2, r8
 801124c:	464b      	mov	r3, r9
 801124e:	e7e3      	b.n	8011218 <_strtod_l+0x88>
 8011250:	2100      	movs	r1, #0
 8011252:	e7ef      	b.n	8011234 <_strtod_l+0xa4>
 8011254:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011256:	b13a      	cbz	r2, 8011268 <_strtod_l+0xd8>
 8011258:	2135      	movs	r1, #53	; 0x35
 801125a:	a818      	add	r0, sp, #96	; 0x60
 801125c:	f7ff ff37 	bl	80110ce <__copybits>
 8011260:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011262:	4620      	mov	r0, r4
 8011264:	f7ff fb0a 	bl	801087c <_Bfree>
 8011268:	3f01      	subs	r7, #1
 801126a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801126c:	2f04      	cmp	r7, #4
 801126e:	d806      	bhi.n	801127e <_strtod_l+0xee>
 8011270:	e8df f007 	tbb	[pc, r7]
 8011274:	201d0314 	.word	0x201d0314
 8011278:	14          	.byte	0x14
 8011279:	00          	.byte	0x00
 801127a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801127e:	05e9      	lsls	r1, r5, #23
 8011280:	bf48      	it	mi
 8011282:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011286:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801128a:	0d1b      	lsrs	r3, r3, #20
 801128c:	051b      	lsls	r3, r3, #20
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1b9      	bne.n	8011206 <_strtod_l+0x76>
 8011292:	f7fe faf7 	bl	800f884 <__errno>
 8011296:	2322      	movs	r3, #34	; 0x22
 8011298:	6003      	str	r3, [r0, #0]
 801129a:	e7b4      	b.n	8011206 <_strtod_l+0x76>
 801129c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80112a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80112a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80112a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80112ac:	e7e7      	b.n	801127e <_strtod_l+0xee>
 80112ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011428 <_strtod_l+0x298>
 80112b2:	e7e4      	b.n	801127e <_strtod_l+0xee>
 80112b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80112b8:	f04f 38ff 	mov.w	r8, #4294967295
 80112bc:	e7df      	b.n	801127e <_strtod_l+0xee>
 80112be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112c0:	1c5a      	adds	r2, r3, #1
 80112c2:	9215      	str	r2, [sp, #84]	; 0x54
 80112c4:	785b      	ldrb	r3, [r3, #1]
 80112c6:	2b30      	cmp	r3, #48	; 0x30
 80112c8:	d0f9      	beq.n	80112be <_strtod_l+0x12e>
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d09b      	beq.n	8011206 <_strtod_l+0x76>
 80112ce:	2301      	movs	r3, #1
 80112d0:	f04f 0a00 	mov.w	sl, #0
 80112d4:	9304      	str	r3, [sp, #16]
 80112d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80112da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80112de:	46d3      	mov	fp, sl
 80112e0:	220a      	movs	r2, #10
 80112e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80112e4:	7806      	ldrb	r6, [r0, #0]
 80112e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80112ea:	b2d9      	uxtb	r1, r3
 80112ec:	2909      	cmp	r1, #9
 80112ee:	d926      	bls.n	801133e <_strtod_l+0x1ae>
 80112f0:	494c      	ldr	r1, [pc, #304]	; (8011424 <_strtod_l+0x294>)
 80112f2:	2201      	movs	r2, #1
 80112f4:	f000 ff62 	bl	80121bc <strncmp>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d030      	beq.n	801135e <_strtod_l+0x1ce>
 80112fc:	2000      	movs	r0, #0
 80112fe:	4632      	mov	r2, r6
 8011300:	9005      	str	r0, [sp, #20]
 8011302:	465e      	mov	r6, fp
 8011304:	4603      	mov	r3, r0
 8011306:	2a65      	cmp	r2, #101	; 0x65
 8011308:	d001      	beq.n	801130e <_strtod_l+0x17e>
 801130a:	2a45      	cmp	r2, #69	; 0x45
 801130c:	d113      	bne.n	8011336 <_strtod_l+0x1a6>
 801130e:	b91e      	cbnz	r6, 8011318 <_strtod_l+0x188>
 8011310:	9a04      	ldr	r2, [sp, #16]
 8011312:	4302      	orrs	r2, r0
 8011314:	d094      	beq.n	8011240 <_strtod_l+0xb0>
 8011316:	2600      	movs	r6, #0
 8011318:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801131a:	1c6a      	adds	r2, r5, #1
 801131c:	9215      	str	r2, [sp, #84]	; 0x54
 801131e:	786a      	ldrb	r2, [r5, #1]
 8011320:	2a2b      	cmp	r2, #43	; 0x2b
 8011322:	d074      	beq.n	801140e <_strtod_l+0x27e>
 8011324:	2a2d      	cmp	r2, #45	; 0x2d
 8011326:	d078      	beq.n	801141a <_strtod_l+0x28a>
 8011328:	f04f 0c00 	mov.w	ip, #0
 801132c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011330:	2909      	cmp	r1, #9
 8011332:	d97f      	bls.n	8011434 <_strtod_l+0x2a4>
 8011334:	9515      	str	r5, [sp, #84]	; 0x54
 8011336:	2700      	movs	r7, #0
 8011338:	e09e      	b.n	8011478 <_strtod_l+0x2e8>
 801133a:	2300      	movs	r3, #0
 801133c:	e7c8      	b.n	80112d0 <_strtod_l+0x140>
 801133e:	f1bb 0f08 	cmp.w	fp, #8
 8011342:	bfd8      	it	le
 8011344:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011346:	f100 0001 	add.w	r0, r0, #1
 801134a:	bfda      	itte	le
 801134c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011350:	9309      	strle	r3, [sp, #36]	; 0x24
 8011352:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011356:	f10b 0b01 	add.w	fp, fp, #1
 801135a:	9015      	str	r0, [sp, #84]	; 0x54
 801135c:	e7c1      	b.n	80112e2 <_strtod_l+0x152>
 801135e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011360:	1c5a      	adds	r2, r3, #1
 8011362:	9215      	str	r2, [sp, #84]	; 0x54
 8011364:	785a      	ldrb	r2, [r3, #1]
 8011366:	f1bb 0f00 	cmp.w	fp, #0
 801136a:	d037      	beq.n	80113dc <_strtod_l+0x24c>
 801136c:	9005      	str	r0, [sp, #20]
 801136e:	465e      	mov	r6, fp
 8011370:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011374:	2b09      	cmp	r3, #9
 8011376:	d912      	bls.n	801139e <_strtod_l+0x20e>
 8011378:	2301      	movs	r3, #1
 801137a:	e7c4      	b.n	8011306 <_strtod_l+0x176>
 801137c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801137e:	1c5a      	adds	r2, r3, #1
 8011380:	9215      	str	r2, [sp, #84]	; 0x54
 8011382:	785a      	ldrb	r2, [r3, #1]
 8011384:	3001      	adds	r0, #1
 8011386:	2a30      	cmp	r2, #48	; 0x30
 8011388:	d0f8      	beq.n	801137c <_strtod_l+0x1ec>
 801138a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801138e:	2b08      	cmp	r3, #8
 8011390:	f200 84c1 	bhi.w	8011d16 <_strtod_l+0xb86>
 8011394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011396:	9005      	str	r0, [sp, #20]
 8011398:	2000      	movs	r0, #0
 801139a:	930b      	str	r3, [sp, #44]	; 0x2c
 801139c:	4606      	mov	r6, r0
 801139e:	3a30      	subs	r2, #48	; 0x30
 80113a0:	f100 0301 	add.w	r3, r0, #1
 80113a4:	d014      	beq.n	80113d0 <_strtod_l+0x240>
 80113a6:	9905      	ldr	r1, [sp, #20]
 80113a8:	4419      	add	r1, r3
 80113aa:	9105      	str	r1, [sp, #20]
 80113ac:	4633      	mov	r3, r6
 80113ae:	eb00 0c06 	add.w	ip, r0, r6
 80113b2:	210a      	movs	r1, #10
 80113b4:	4563      	cmp	r3, ip
 80113b6:	d113      	bne.n	80113e0 <_strtod_l+0x250>
 80113b8:	1833      	adds	r3, r6, r0
 80113ba:	2b08      	cmp	r3, #8
 80113bc:	f106 0601 	add.w	r6, r6, #1
 80113c0:	4406      	add	r6, r0
 80113c2:	dc1a      	bgt.n	80113fa <_strtod_l+0x26a>
 80113c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113c6:	230a      	movs	r3, #10
 80113c8:	fb03 2301 	mla	r3, r3, r1, r2
 80113cc:	9309      	str	r3, [sp, #36]	; 0x24
 80113ce:	2300      	movs	r3, #0
 80113d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80113d2:	1c51      	adds	r1, r2, #1
 80113d4:	9115      	str	r1, [sp, #84]	; 0x54
 80113d6:	7852      	ldrb	r2, [r2, #1]
 80113d8:	4618      	mov	r0, r3
 80113da:	e7c9      	b.n	8011370 <_strtod_l+0x1e0>
 80113dc:	4658      	mov	r0, fp
 80113de:	e7d2      	b.n	8011386 <_strtod_l+0x1f6>
 80113e0:	2b08      	cmp	r3, #8
 80113e2:	f103 0301 	add.w	r3, r3, #1
 80113e6:	dc03      	bgt.n	80113f0 <_strtod_l+0x260>
 80113e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80113ea:	434f      	muls	r7, r1
 80113ec:	9709      	str	r7, [sp, #36]	; 0x24
 80113ee:	e7e1      	b.n	80113b4 <_strtod_l+0x224>
 80113f0:	2b10      	cmp	r3, #16
 80113f2:	bfd8      	it	le
 80113f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80113f8:	e7dc      	b.n	80113b4 <_strtod_l+0x224>
 80113fa:	2e10      	cmp	r6, #16
 80113fc:	bfdc      	itt	le
 80113fe:	230a      	movle	r3, #10
 8011400:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8011404:	e7e3      	b.n	80113ce <_strtod_l+0x23e>
 8011406:	2300      	movs	r3, #0
 8011408:	9305      	str	r3, [sp, #20]
 801140a:	2301      	movs	r3, #1
 801140c:	e780      	b.n	8011310 <_strtod_l+0x180>
 801140e:	f04f 0c00 	mov.w	ip, #0
 8011412:	1caa      	adds	r2, r5, #2
 8011414:	9215      	str	r2, [sp, #84]	; 0x54
 8011416:	78aa      	ldrb	r2, [r5, #2]
 8011418:	e788      	b.n	801132c <_strtod_l+0x19c>
 801141a:	f04f 0c01 	mov.w	ip, #1
 801141e:	e7f8      	b.n	8011412 <_strtod_l+0x282>
 8011420:	080137e8 	.word	0x080137e8
 8011424:	080137e4 	.word	0x080137e4
 8011428:	7ff00000 	.word	0x7ff00000
 801142c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801142e:	1c51      	adds	r1, r2, #1
 8011430:	9115      	str	r1, [sp, #84]	; 0x54
 8011432:	7852      	ldrb	r2, [r2, #1]
 8011434:	2a30      	cmp	r2, #48	; 0x30
 8011436:	d0f9      	beq.n	801142c <_strtod_l+0x29c>
 8011438:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801143c:	2908      	cmp	r1, #8
 801143e:	f63f af7a 	bhi.w	8011336 <_strtod_l+0x1a6>
 8011442:	3a30      	subs	r2, #48	; 0x30
 8011444:	9208      	str	r2, [sp, #32]
 8011446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011448:	920c      	str	r2, [sp, #48]	; 0x30
 801144a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801144c:	1c57      	adds	r7, r2, #1
 801144e:	9715      	str	r7, [sp, #84]	; 0x54
 8011450:	7852      	ldrb	r2, [r2, #1]
 8011452:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011456:	f1be 0f09 	cmp.w	lr, #9
 801145a:	d938      	bls.n	80114ce <_strtod_l+0x33e>
 801145c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801145e:	1a7f      	subs	r7, r7, r1
 8011460:	2f08      	cmp	r7, #8
 8011462:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011466:	dc03      	bgt.n	8011470 <_strtod_l+0x2e0>
 8011468:	9908      	ldr	r1, [sp, #32]
 801146a:	428f      	cmp	r7, r1
 801146c:	bfa8      	it	ge
 801146e:	460f      	movge	r7, r1
 8011470:	f1bc 0f00 	cmp.w	ip, #0
 8011474:	d000      	beq.n	8011478 <_strtod_l+0x2e8>
 8011476:	427f      	negs	r7, r7
 8011478:	2e00      	cmp	r6, #0
 801147a:	d14f      	bne.n	801151c <_strtod_l+0x38c>
 801147c:	9904      	ldr	r1, [sp, #16]
 801147e:	4301      	orrs	r1, r0
 8011480:	f47f aec1 	bne.w	8011206 <_strtod_l+0x76>
 8011484:	2b00      	cmp	r3, #0
 8011486:	f47f aedb 	bne.w	8011240 <_strtod_l+0xb0>
 801148a:	2a69      	cmp	r2, #105	; 0x69
 801148c:	d029      	beq.n	80114e2 <_strtod_l+0x352>
 801148e:	dc26      	bgt.n	80114de <_strtod_l+0x34e>
 8011490:	2a49      	cmp	r2, #73	; 0x49
 8011492:	d026      	beq.n	80114e2 <_strtod_l+0x352>
 8011494:	2a4e      	cmp	r2, #78	; 0x4e
 8011496:	f47f aed3 	bne.w	8011240 <_strtod_l+0xb0>
 801149a:	499b      	ldr	r1, [pc, #620]	; (8011708 <_strtod_l+0x578>)
 801149c:	a815      	add	r0, sp, #84	; 0x54
 801149e:	f001 f993 	bl	80127c8 <__match>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	f43f aecc 	beq.w	8011240 <_strtod_l+0xb0>
 80114a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	2b28      	cmp	r3, #40	; 0x28
 80114ae:	d12f      	bne.n	8011510 <_strtod_l+0x380>
 80114b0:	4996      	ldr	r1, [pc, #600]	; (801170c <_strtod_l+0x57c>)
 80114b2:	aa18      	add	r2, sp, #96	; 0x60
 80114b4:	a815      	add	r0, sp, #84	; 0x54
 80114b6:	f001 f99b 	bl	80127f0 <__hexnan>
 80114ba:	2805      	cmp	r0, #5
 80114bc:	d128      	bne.n	8011510 <_strtod_l+0x380>
 80114be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80114c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80114c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80114c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80114cc:	e69b      	b.n	8011206 <_strtod_l+0x76>
 80114ce:	9f08      	ldr	r7, [sp, #32]
 80114d0:	210a      	movs	r1, #10
 80114d2:	fb01 2107 	mla	r1, r1, r7, r2
 80114d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80114da:	9208      	str	r2, [sp, #32]
 80114dc:	e7b5      	b.n	801144a <_strtod_l+0x2ba>
 80114de:	2a6e      	cmp	r2, #110	; 0x6e
 80114e0:	e7d9      	b.n	8011496 <_strtod_l+0x306>
 80114e2:	498b      	ldr	r1, [pc, #556]	; (8011710 <_strtod_l+0x580>)
 80114e4:	a815      	add	r0, sp, #84	; 0x54
 80114e6:	f001 f96f 	bl	80127c8 <__match>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	f43f aea8 	beq.w	8011240 <_strtod_l+0xb0>
 80114f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114f2:	4988      	ldr	r1, [pc, #544]	; (8011714 <_strtod_l+0x584>)
 80114f4:	3b01      	subs	r3, #1
 80114f6:	a815      	add	r0, sp, #84	; 0x54
 80114f8:	9315      	str	r3, [sp, #84]	; 0x54
 80114fa:	f001 f965 	bl	80127c8 <__match>
 80114fe:	b910      	cbnz	r0, 8011506 <_strtod_l+0x376>
 8011500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011502:	3301      	adds	r3, #1
 8011504:	9315      	str	r3, [sp, #84]	; 0x54
 8011506:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8011724 <_strtod_l+0x594>
 801150a:	f04f 0800 	mov.w	r8, #0
 801150e:	e67a      	b.n	8011206 <_strtod_l+0x76>
 8011510:	4881      	ldr	r0, [pc, #516]	; (8011718 <_strtod_l+0x588>)
 8011512:	f000 fe75 	bl	8012200 <nan>
 8011516:	ec59 8b10 	vmov	r8, r9, d0
 801151a:	e674      	b.n	8011206 <_strtod_l+0x76>
 801151c:	9b05      	ldr	r3, [sp, #20]
 801151e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011520:	1afb      	subs	r3, r7, r3
 8011522:	f1bb 0f00 	cmp.w	fp, #0
 8011526:	bf08      	it	eq
 8011528:	46b3      	moveq	fp, r6
 801152a:	2e10      	cmp	r6, #16
 801152c:	9308      	str	r3, [sp, #32]
 801152e:	4635      	mov	r5, r6
 8011530:	bfa8      	it	ge
 8011532:	2510      	movge	r5, #16
 8011534:	f7ef f80e 	bl	8000554 <__aeabi_ui2d>
 8011538:	2e09      	cmp	r6, #9
 801153a:	4680      	mov	r8, r0
 801153c:	4689      	mov	r9, r1
 801153e:	dd13      	ble.n	8011568 <_strtod_l+0x3d8>
 8011540:	4b76      	ldr	r3, [pc, #472]	; (801171c <_strtod_l+0x58c>)
 8011542:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011546:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801154a:	f7ef f87d 	bl	8000648 <__aeabi_dmul>
 801154e:	4680      	mov	r8, r0
 8011550:	4650      	mov	r0, sl
 8011552:	4689      	mov	r9, r1
 8011554:	f7ee fffe 	bl	8000554 <__aeabi_ui2d>
 8011558:	4602      	mov	r2, r0
 801155a:	460b      	mov	r3, r1
 801155c:	4640      	mov	r0, r8
 801155e:	4649      	mov	r1, r9
 8011560:	f7ee febc 	bl	80002dc <__adddf3>
 8011564:	4680      	mov	r8, r0
 8011566:	4689      	mov	r9, r1
 8011568:	2e0f      	cmp	r6, #15
 801156a:	dc38      	bgt.n	80115de <_strtod_l+0x44e>
 801156c:	9b08      	ldr	r3, [sp, #32]
 801156e:	2b00      	cmp	r3, #0
 8011570:	f43f ae49 	beq.w	8011206 <_strtod_l+0x76>
 8011574:	dd24      	ble.n	80115c0 <_strtod_l+0x430>
 8011576:	2b16      	cmp	r3, #22
 8011578:	dc0b      	bgt.n	8011592 <_strtod_l+0x402>
 801157a:	4968      	ldr	r1, [pc, #416]	; (801171c <_strtod_l+0x58c>)
 801157c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011584:	4642      	mov	r2, r8
 8011586:	464b      	mov	r3, r9
 8011588:	f7ef f85e 	bl	8000648 <__aeabi_dmul>
 801158c:	4680      	mov	r8, r0
 801158e:	4689      	mov	r9, r1
 8011590:	e639      	b.n	8011206 <_strtod_l+0x76>
 8011592:	9a08      	ldr	r2, [sp, #32]
 8011594:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011598:	4293      	cmp	r3, r2
 801159a:	db20      	blt.n	80115de <_strtod_l+0x44e>
 801159c:	4c5f      	ldr	r4, [pc, #380]	; (801171c <_strtod_l+0x58c>)
 801159e:	f1c6 060f 	rsb	r6, r6, #15
 80115a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80115a6:	4642      	mov	r2, r8
 80115a8:	464b      	mov	r3, r9
 80115aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115ae:	f7ef f84b 	bl	8000648 <__aeabi_dmul>
 80115b2:	9b08      	ldr	r3, [sp, #32]
 80115b4:	1b9e      	subs	r6, r3, r6
 80115b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80115ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80115be:	e7e3      	b.n	8011588 <_strtod_l+0x3f8>
 80115c0:	9b08      	ldr	r3, [sp, #32]
 80115c2:	3316      	adds	r3, #22
 80115c4:	db0b      	blt.n	80115de <_strtod_l+0x44e>
 80115c6:	9b05      	ldr	r3, [sp, #20]
 80115c8:	1bdf      	subs	r7, r3, r7
 80115ca:	4b54      	ldr	r3, [pc, #336]	; (801171c <_strtod_l+0x58c>)
 80115cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80115d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115d4:	4640      	mov	r0, r8
 80115d6:	4649      	mov	r1, r9
 80115d8:	f7ef f960 	bl	800089c <__aeabi_ddiv>
 80115dc:	e7d6      	b.n	801158c <_strtod_l+0x3fc>
 80115de:	9b08      	ldr	r3, [sp, #32]
 80115e0:	1b75      	subs	r5, r6, r5
 80115e2:	441d      	add	r5, r3
 80115e4:	2d00      	cmp	r5, #0
 80115e6:	dd70      	ble.n	80116ca <_strtod_l+0x53a>
 80115e8:	f015 030f 	ands.w	r3, r5, #15
 80115ec:	d00a      	beq.n	8011604 <_strtod_l+0x474>
 80115ee:	494b      	ldr	r1, [pc, #300]	; (801171c <_strtod_l+0x58c>)
 80115f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115f4:	4642      	mov	r2, r8
 80115f6:	464b      	mov	r3, r9
 80115f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115fc:	f7ef f824 	bl	8000648 <__aeabi_dmul>
 8011600:	4680      	mov	r8, r0
 8011602:	4689      	mov	r9, r1
 8011604:	f035 050f 	bics.w	r5, r5, #15
 8011608:	d04d      	beq.n	80116a6 <_strtod_l+0x516>
 801160a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801160e:	dd22      	ble.n	8011656 <_strtod_l+0x4c6>
 8011610:	2500      	movs	r5, #0
 8011612:	46ab      	mov	fp, r5
 8011614:	9509      	str	r5, [sp, #36]	; 0x24
 8011616:	9505      	str	r5, [sp, #20]
 8011618:	2322      	movs	r3, #34	; 0x22
 801161a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011724 <_strtod_l+0x594>
 801161e:	6023      	str	r3, [r4, #0]
 8011620:	f04f 0800 	mov.w	r8, #0
 8011624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011626:	2b00      	cmp	r3, #0
 8011628:	f43f aded 	beq.w	8011206 <_strtod_l+0x76>
 801162c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801162e:	4620      	mov	r0, r4
 8011630:	f7ff f924 	bl	801087c <_Bfree>
 8011634:	9905      	ldr	r1, [sp, #20]
 8011636:	4620      	mov	r0, r4
 8011638:	f7ff f920 	bl	801087c <_Bfree>
 801163c:	4659      	mov	r1, fp
 801163e:	4620      	mov	r0, r4
 8011640:	f7ff f91c 	bl	801087c <_Bfree>
 8011644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011646:	4620      	mov	r0, r4
 8011648:	f7ff f918 	bl	801087c <_Bfree>
 801164c:	4629      	mov	r1, r5
 801164e:	4620      	mov	r0, r4
 8011650:	f7ff f914 	bl	801087c <_Bfree>
 8011654:	e5d7      	b.n	8011206 <_strtod_l+0x76>
 8011656:	4b32      	ldr	r3, [pc, #200]	; (8011720 <_strtod_l+0x590>)
 8011658:	9304      	str	r3, [sp, #16]
 801165a:	2300      	movs	r3, #0
 801165c:	112d      	asrs	r5, r5, #4
 801165e:	4640      	mov	r0, r8
 8011660:	4649      	mov	r1, r9
 8011662:	469a      	mov	sl, r3
 8011664:	2d01      	cmp	r5, #1
 8011666:	dc21      	bgt.n	80116ac <_strtod_l+0x51c>
 8011668:	b10b      	cbz	r3, 801166e <_strtod_l+0x4de>
 801166a:	4680      	mov	r8, r0
 801166c:	4689      	mov	r9, r1
 801166e:	492c      	ldr	r1, [pc, #176]	; (8011720 <_strtod_l+0x590>)
 8011670:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011674:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011678:	4642      	mov	r2, r8
 801167a:	464b      	mov	r3, r9
 801167c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011680:	f7ee ffe2 	bl	8000648 <__aeabi_dmul>
 8011684:	4b27      	ldr	r3, [pc, #156]	; (8011724 <_strtod_l+0x594>)
 8011686:	460a      	mov	r2, r1
 8011688:	400b      	ands	r3, r1
 801168a:	4927      	ldr	r1, [pc, #156]	; (8011728 <_strtod_l+0x598>)
 801168c:	428b      	cmp	r3, r1
 801168e:	4680      	mov	r8, r0
 8011690:	d8be      	bhi.n	8011610 <_strtod_l+0x480>
 8011692:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011696:	428b      	cmp	r3, r1
 8011698:	bf86      	itte	hi
 801169a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801172c <_strtod_l+0x59c>
 801169e:	f04f 38ff 	movhi.w	r8, #4294967295
 80116a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80116a6:	2300      	movs	r3, #0
 80116a8:	9304      	str	r3, [sp, #16]
 80116aa:	e07b      	b.n	80117a4 <_strtod_l+0x614>
 80116ac:	07ea      	lsls	r2, r5, #31
 80116ae:	d505      	bpl.n	80116bc <_strtod_l+0x52c>
 80116b0:	9b04      	ldr	r3, [sp, #16]
 80116b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b6:	f7ee ffc7 	bl	8000648 <__aeabi_dmul>
 80116ba:	2301      	movs	r3, #1
 80116bc:	9a04      	ldr	r2, [sp, #16]
 80116be:	3208      	adds	r2, #8
 80116c0:	f10a 0a01 	add.w	sl, sl, #1
 80116c4:	106d      	asrs	r5, r5, #1
 80116c6:	9204      	str	r2, [sp, #16]
 80116c8:	e7cc      	b.n	8011664 <_strtod_l+0x4d4>
 80116ca:	d0ec      	beq.n	80116a6 <_strtod_l+0x516>
 80116cc:	426d      	negs	r5, r5
 80116ce:	f015 020f 	ands.w	r2, r5, #15
 80116d2:	d00a      	beq.n	80116ea <_strtod_l+0x55a>
 80116d4:	4b11      	ldr	r3, [pc, #68]	; (801171c <_strtod_l+0x58c>)
 80116d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116da:	4640      	mov	r0, r8
 80116dc:	4649      	mov	r1, r9
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	f7ef f8db 	bl	800089c <__aeabi_ddiv>
 80116e6:	4680      	mov	r8, r0
 80116e8:	4689      	mov	r9, r1
 80116ea:	112d      	asrs	r5, r5, #4
 80116ec:	d0db      	beq.n	80116a6 <_strtod_l+0x516>
 80116ee:	2d1f      	cmp	r5, #31
 80116f0:	dd1e      	ble.n	8011730 <_strtod_l+0x5a0>
 80116f2:	2500      	movs	r5, #0
 80116f4:	46ab      	mov	fp, r5
 80116f6:	9509      	str	r5, [sp, #36]	; 0x24
 80116f8:	9505      	str	r5, [sp, #20]
 80116fa:	2322      	movs	r3, #34	; 0x22
 80116fc:	f04f 0800 	mov.w	r8, #0
 8011700:	f04f 0900 	mov.w	r9, #0
 8011704:	6023      	str	r3, [r4, #0]
 8011706:	e78d      	b.n	8011624 <_strtod_l+0x494>
 8011708:	080135d2 	.word	0x080135d2
 801170c:	080137fc 	.word	0x080137fc
 8011710:	080135ca 	.word	0x080135ca
 8011714:	08013601 	.word	0x08013601
 8011718:	0801388c 	.word	0x0801388c
 801171c:	08013710 	.word	0x08013710
 8011720:	080136e8 	.word	0x080136e8
 8011724:	7ff00000 	.word	0x7ff00000
 8011728:	7ca00000 	.word	0x7ca00000
 801172c:	7fefffff 	.word	0x7fefffff
 8011730:	f015 0310 	ands.w	r3, r5, #16
 8011734:	bf18      	it	ne
 8011736:	236a      	movne	r3, #106	; 0x6a
 8011738:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8011adc <_strtod_l+0x94c>
 801173c:	9304      	str	r3, [sp, #16]
 801173e:	4640      	mov	r0, r8
 8011740:	4649      	mov	r1, r9
 8011742:	2300      	movs	r3, #0
 8011744:	07ea      	lsls	r2, r5, #31
 8011746:	d504      	bpl.n	8011752 <_strtod_l+0x5c2>
 8011748:	e9da 2300 	ldrd	r2, r3, [sl]
 801174c:	f7ee ff7c 	bl	8000648 <__aeabi_dmul>
 8011750:	2301      	movs	r3, #1
 8011752:	106d      	asrs	r5, r5, #1
 8011754:	f10a 0a08 	add.w	sl, sl, #8
 8011758:	d1f4      	bne.n	8011744 <_strtod_l+0x5b4>
 801175a:	b10b      	cbz	r3, 8011760 <_strtod_l+0x5d0>
 801175c:	4680      	mov	r8, r0
 801175e:	4689      	mov	r9, r1
 8011760:	9b04      	ldr	r3, [sp, #16]
 8011762:	b1bb      	cbz	r3, 8011794 <_strtod_l+0x604>
 8011764:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011768:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801176c:	2b00      	cmp	r3, #0
 801176e:	4649      	mov	r1, r9
 8011770:	dd10      	ble.n	8011794 <_strtod_l+0x604>
 8011772:	2b1f      	cmp	r3, #31
 8011774:	f340 811e 	ble.w	80119b4 <_strtod_l+0x824>
 8011778:	2b34      	cmp	r3, #52	; 0x34
 801177a:	bfde      	ittt	le
 801177c:	f04f 33ff 	movle.w	r3, #4294967295
 8011780:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011784:	4093      	lslle	r3, r2
 8011786:	f04f 0800 	mov.w	r8, #0
 801178a:	bfcc      	ite	gt
 801178c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011790:	ea03 0901 	andle.w	r9, r3, r1
 8011794:	2200      	movs	r2, #0
 8011796:	2300      	movs	r3, #0
 8011798:	4640      	mov	r0, r8
 801179a:	4649      	mov	r1, r9
 801179c:	f7ef f9bc 	bl	8000b18 <__aeabi_dcmpeq>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d1a6      	bne.n	80116f2 <_strtod_l+0x562>
 80117a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80117aa:	4633      	mov	r3, r6
 80117ac:	465a      	mov	r2, fp
 80117ae:	4620      	mov	r0, r4
 80117b0:	f7ff f8cc 	bl	801094c <__s2b>
 80117b4:	9009      	str	r0, [sp, #36]	; 0x24
 80117b6:	2800      	cmp	r0, #0
 80117b8:	f43f af2a 	beq.w	8011610 <_strtod_l+0x480>
 80117bc:	9a08      	ldr	r2, [sp, #32]
 80117be:	9b05      	ldr	r3, [sp, #20]
 80117c0:	2a00      	cmp	r2, #0
 80117c2:	eba3 0307 	sub.w	r3, r3, r7
 80117c6:	bfa8      	it	ge
 80117c8:	2300      	movge	r3, #0
 80117ca:	930c      	str	r3, [sp, #48]	; 0x30
 80117cc:	2500      	movs	r5, #0
 80117ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80117d2:	9312      	str	r3, [sp, #72]	; 0x48
 80117d4:	46ab      	mov	fp, r5
 80117d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d8:	4620      	mov	r0, r4
 80117da:	6859      	ldr	r1, [r3, #4]
 80117dc:	f7ff f80e 	bl	80107fc <_Balloc>
 80117e0:	9005      	str	r0, [sp, #20]
 80117e2:	2800      	cmp	r0, #0
 80117e4:	f43f af18 	beq.w	8011618 <_strtod_l+0x488>
 80117e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ea:	691a      	ldr	r2, [r3, #16]
 80117ec:	3202      	adds	r2, #2
 80117ee:	f103 010c 	add.w	r1, r3, #12
 80117f2:	0092      	lsls	r2, r2, #2
 80117f4:	300c      	adds	r0, #12
 80117f6:	f7fe f872 	bl	800f8de <memcpy>
 80117fa:	ec49 8b10 	vmov	d0, r8, r9
 80117fe:	aa18      	add	r2, sp, #96	; 0x60
 8011800:	a917      	add	r1, sp, #92	; 0x5c
 8011802:	4620      	mov	r0, r4
 8011804:	f7ff fbd6 	bl	8010fb4 <__d2b>
 8011808:	ec49 8b18 	vmov	d8, r8, r9
 801180c:	9016      	str	r0, [sp, #88]	; 0x58
 801180e:	2800      	cmp	r0, #0
 8011810:	f43f af02 	beq.w	8011618 <_strtod_l+0x488>
 8011814:	2101      	movs	r1, #1
 8011816:	4620      	mov	r0, r4
 8011818:	f7ff f930 	bl	8010a7c <__i2b>
 801181c:	4683      	mov	fp, r0
 801181e:	2800      	cmp	r0, #0
 8011820:	f43f aefa 	beq.w	8011618 <_strtod_l+0x488>
 8011824:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011826:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011828:	2e00      	cmp	r6, #0
 801182a:	bfab      	itete	ge
 801182c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801182e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8011830:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011832:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8011836:	bfac      	ite	ge
 8011838:	eb06 0a03 	addge.w	sl, r6, r3
 801183c:	1b9f      	sublt	r7, r3, r6
 801183e:	9b04      	ldr	r3, [sp, #16]
 8011840:	1af6      	subs	r6, r6, r3
 8011842:	4416      	add	r6, r2
 8011844:	4ba0      	ldr	r3, [pc, #640]	; (8011ac8 <_strtod_l+0x938>)
 8011846:	3e01      	subs	r6, #1
 8011848:	429e      	cmp	r6, r3
 801184a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801184e:	f280 80c4 	bge.w	80119da <_strtod_l+0x84a>
 8011852:	1b9b      	subs	r3, r3, r6
 8011854:	2b1f      	cmp	r3, #31
 8011856:	eba2 0203 	sub.w	r2, r2, r3
 801185a:	f04f 0101 	mov.w	r1, #1
 801185e:	f300 80b0 	bgt.w	80119c2 <_strtod_l+0x832>
 8011862:	fa01 f303 	lsl.w	r3, r1, r3
 8011866:	930e      	str	r3, [sp, #56]	; 0x38
 8011868:	2300      	movs	r3, #0
 801186a:	930d      	str	r3, [sp, #52]	; 0x34
 801186c:	eb0a 0602 	add.w	r6, sl, r2
 8011870:	9b04      	ldr	r3, [sp, #16]
 8011872:	45b2      	cmp	sl, r6
 8011874:	4417      	add	r7, r2
 8011876:	441f      	add	r7, r3
 8011878:	4653      	mov	r3, sl
 801187a:	bfa8      	it	ge
 801187c:	4633      	movge	r3, r6
 801187e:	42bb      	cmp	r3, r7
 8011880:	bfa8      	it	ge
 8011882:	463b      	movge	r3, r7
 8011884:	2b00      	cmp	r3, #0
 8011886:	bfc2      	ittt	gt
 8011888:	1af6      	subgt	r6, r6, r3
 801188a:	1aff      	subgt	r7, r7, r3
 801188c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011892:	2b00      	cmp	r3, #0
 8011894:	dd17      	ble.n	80118c6 <_strtod_l+0x736>
 8011896:	4659      	mov	r1, fp
 8011898:	461a      	mov	r2, r3
 801189a:	4620      	mov	r0, r4
 801189c:	f7ff f9ae 	bl	8010bfc <__pow5mult>
 80118a0:	4683      	mov	fp, r0
 80118a2:	2800      	cmp	r0, #0
 80118a4:	f43f aeb8 	beq.w	8011618 <_strtod_l+0x488>
 80118a8:	4601      	mov	r1, r0
 80118aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118ac:	4620      	mov	r0, r4
 80118ae:	f7ff f8fb 	bl	8010aa8 <__multiply>
 80118b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80118b4:	2800      	cmp	r0, #0
 80118b6:	f43f aeaf 	beq.w	8011618 <_strtod_l+0x488>
 80118ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80118bc:	4620      	mov	r0, r4
 80118be:	f7fe ffdd 	bl	801087c <_Bfree>
 80118c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118c4:	9316      	str	r3, [sp, #88]	; 0x58
 80118c6:	2e00      	cmp	r6, #0
 80118c8:	f300 808c 	bgt.w	80119e4 <_strtod_l+0x854>
 80118cc:	9b08      	ldr	r3, [sp, #32]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	dd08      	ble.n	80118e4 <_strtod_l+0x754>
 80118d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118d4:	9905      	ldr	r1, [sp, #20]
 80118d6:	4620      	mov	r0, r4
 80118d8:	f7ff f990 	bl	8010bfc <__pow5mult>
 80118dc:	9005      	str	r0, [sp, #20]
 80118de:	2800      	cmp	r0, #0
 80118e0:	f43f ae9a 	beq.w	8011618 <_strtod_l+0x488>
 80118e4:	2f00      	cmp	r7, #0
 80118e6:	dd08      	ble.n	80118fa <_strtod_l+0x76a>
 80118e8:	9905      	ldr	r1, [sp, #20]
 80118ea:	463a      	mov	r2, r7
 80118ec:	4620      	mov	r0, r4
 80118ee:	f7ff f9df 	bl	8010cb0 <__lshift>
 80118f2:	9005      	str	r0, [sp, #20]
 80118f4:	2800      	cmp	r0, #0
 80118f6:	f43f ae8f 	beq.w	8011618 <_strtod_l+0x488>
 80118fa:	f1ba 0f00 	cmp.w	sl, #0
 80118fe:	dd08      	ble.n	8011912 <_strtod_l+0x782>
 8011900:	4659      	mov	r1, fp
 8011902:	4652      	mov	r2, sl
 8011904:	4620      	mov	r0, r4
 8011906:	f7ff f9d3 	bl	8010cb0 <__lshift>
 801190a:	4683      	mov	fp, r0
 801190c:	2800      	cmp	r0, #0
 801190e:	f43f ae83 	beq.w	8011618 <_strtod_l+0x488>
 8011912:	9a05      	ldr	r2, [sp, #20]
 8011914:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011916:	4620      	mov	r0, r4
 8011918:	f7ff fa52 	bl	8010dc0 <__mdiff>
 801191c:	4605      	mov	r5, r0
 801191e:	2800      	cmp	r0, #0
 8011920:	f43f ae7a 	beq.w	8011618 <_strtod_l+0x488>
 8011924:	68c3      	ldr	r3, [r0, #12]
 8011926:	930b      	str	r3, [sp, #44]	; 0x2c
 8011928:	2300      	movs	r3, #0
 801192a:	60c3      	str	r3, [r0, #12]
 801192c:	4659      	mov	r1, fp
 801192e:	f7ff fa2b 	bl	8010d88 <__mcmp>
 8011932:	2800      	cmp	r0, #0
 8011934:	da60      	bge.n	80119f8 <_strtod_l+0x868>
 8011936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011938:	ea53 0308 	orrs.w	r3, r3, r8
 801193c:	f040 8084 	bne.w	8011a48 <_strtod_l+0x8b8>
 8011940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011944:	2b00      	cmp	r3, #0
 8011946:	d17f      	bne.n	8011a48 <_strtod_l+0x8b8>
 8011948:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801194c:	0d1b      	lsrs	r3, r3, #20
 801194e:	051b      	lsls	r3, r3, #20
 8011950:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011954:	d978      	bls.n	8011a48 <_strtod_l+0x8b8>
 8011956:	696b      	ldr	r3, [r5, #20]
 8011958:	b913      	cbnz	r3, 8011960 <_strtod_l+0x7d0>
 801195a:	692b      	ldr	r3, [r5, #16]
 801195c:	2b01      	cmp	r3, #1
 801195e:	dd73      	ble.n	8011a48 <_strtod_l+0x8b8>
 8011960:	4629      	mov	r1, r5
 8011962:	2201      	movs	r2, #1
 8011964:	4620      	mov	r0, r4
 8011966:	f7ff f9a3 	bl	8010cb0 <__lshift>
 801196a:	4659      	mov	r1, fp
 801196c:	4605      	mov	r5, r0
 801196e:	f7ff fa0b 	bl	8010d88 <__mcmp>
 8011972:	2800      	cmp	r0, #0
 8011974:	dd68      	ble.n	8011a48 <_strtod_l+0x8b8>
 8011976:	9904      	ldr	r1, [sp, #16]
 8011978:	4a54      	ldr	r2, [pc, #336]	; (8011acc <_strtod_l+0x93c>)
 801197a:	464b      	mov	r3, r9
 801197c:	2900      	cmp	r1, #0
 801197e:	f000 8084 	beq.w	8011a8a <_strtod_l+0x8fa>
 8011982:	ea02 0109 	and.w	r1, r2, r9
 8011986:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801198a:	dc7e      	bgt.n	8011a8a <_strtod_l+0x8fa>
 801198c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011990:	f77f aeb3 	ble.w	80116fa <_strtod_l+0x56a>
 8011994:	4b4e      	ldr	r3, [pc, #312]	; (8011ad0 <_strtod_l+0x940>)
 8011996:	4640      	mov	r0, r8
 8011998:	4649      	mov	r1, r9
 801199a:	2200      	movs	r2, #0
 801199c:	f7ee fe54 	bl	8000648 <__aeabi_dmul>
 80119a0:	4b4a      	ldr	r3, [pc, #296]	; (8011acc <_strtod_l+0x93c>)
 80119a2:	400b      	ands	r3, r1
 80119a4:	4680      	mov	r8, r0
 80119a6:	4689      	mov	r9, r1
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f47f ae3f 	bne.w	801162c <_strtod_l+0x49c>
 80119ae:	2322      	movs	r3, #34	; 0x22
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	e63b      	b.n	801162c <_strtod_l+0x49c>
 80119b4:	f04f 32ff 	mov.w	r2, #4294967295
 80119b8:	fa02 f303 	lsl.w	r3, r2, r3
 80119bc:	ea03 0808 	and.w	r8, r3, r8
 80119c0:	e6e8      	b.n	8011794 <_strtod_l+0x604>
 80119c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80119c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80119ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80119ce:	36e2      	adds	r6, #226	; 0xe2
 80119d0:	fa01 f306 	lsl.w	r3, r1, r6
 80119d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80119d8:	e748      	b.n	801186c <_strtod_l+0x6dc>
 80119da:	2100      	movs	r1, #0
 80119dc:	2301      	movs	r3, #1
 80119de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80119e2:	e743      	b.n	801186c <_strtod_l+0x6dc>
 80119e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80119e6:	4632      	mov	r2, r6
 80119e8:	4620      	mov	r0, r4
 80119ea:	f7ff f961 	bl	8010cb0 <__lshift>
 80119ee:	9016      	str	r0, [sp, #88]	; 0x58
 80119f0:	2800      	cmp	r0, #0
 80119f2:	f47f af6b 	bne.w	80118cc <_strtod_l+0x73c>
 80119f6:	e60f      	b.n	8011618 <_strtod_l+0x488>
 80119f8:	46ca      	mov	sl, r9
 80119fa:	d171      	bne.n	8011ae0 <_strtod_l+0x950>
 80119fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a02:	b352      	cbz	r2, 8011a5a <_strtod_l+0x8ca>
 8011a04:	4a33      	ldr	r2, [pc, #204]	; (8011ad4 <_strtod_l+0x944>)
 8011a06:	4293      	cmp	r3, r2
 8011a08:	d12a      	bne.n	8011a60 <_strtod_l+0x8d0>
 8011a0a:	9b04      	ldr	r3, [sp, #16]
 8011a0c:	4641      	mov	r1, r8
 8011a0e:	b1fb      	cbz	r3, 8011a50 <_strtod_l+0x8c0>
 8011a10:	4b2e      	ldr	r3, [pc, #184]	; (8011acc <_strtod_l+0x93c>)
 8011a12:	ea09 0303 	and.w	r3, r9, r3
 8011a16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1e:	d81a      	bhi.n	8011a56 <_strtod_l+0x8c6>
 8011a20:	0d1b      	lsrs	r3, r3, #20
 8011a22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a26:	fa02 f303 	lsl.w	r3, r2, r3
 8011a2a:	4299      	cmp	r1, r3
 8011a2c:	d118      	bne.n	8011a60 <_strtod_l+0x8d0>
 8011a2e:	4b2a      	ldr	r3, [pc, #168]	; (8011ad8 <_strtod_l+0x948>)
 8011a30:	459a      	cmp	sl, r3
 8011a32:	d102      	bne.n	8011a3a <_strtod_l+0x8aa>
 8011a34:	3101      	adds	r1, #1
 8011a36:	f43f adef 	beq.w	8011618 <_strtod_l+0x488>
 8011a3a:	4b24      	ldr	r3, [pc, #144]	; (8011acc <_strtod_l+0x93c>)
 8011a3c:	ea0a 0303 	and.w	r3, sl, r3
 8011a40:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011a44:	f04f 0800 	mov.w	r8, #0
 8011a48:	9b04      	ldr	r3, [sp, #16]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d1a2      	bne.n	8011994 <_strtod_l+0x804>
 8011a4e:	e5ed      	b.n	801162c <_strtod_l+0x49c>
 8011a50:	f04f 33ff 	mov.w	r3, #4294967295
 8011a54:	e7e9      	b.n	8011a2a <_strtod_l+0x89a>
 8011a56:	4613      	mov	r3, r2
 8011a58:	e7e7      	b.n	8011a2a <_strtod_l+0x89a>
 8011a5a:	ea53 0308 	orrs.w	r3, r3, r8
 8011a5e:	d08a      	beq.n	8011976 <_strtod_l+0x7e6>
 8011a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a62:	b1e3      	cbz	r3, 8011a9e <_strtod_l+0x90e>
 8011a64:	ea13 0f0a 	tst.w	r3, sl
 8011a68:	d0ee      	beq.n	8011a48 <_strtod_l+0x8b8>
 8011a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a6c:	9a04      	ldr	r2, [sp, #16]
 8011a6e:	4640      	mov	r0, r8
 8011a70:	4649      	mov	r1, r9
 8011a72:	b1c3      	cbz	r3, 8011aa6 <_strtod_l+0x916>
 8011a74:	f7ff fb6f 	bl	8011156 <sulp>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	ec51 0b18 	vmov	r0, r1, d8
 8011a80:	f7ee fc2c 	bl	80002dc <__adddf3>
 8011a84:	4680      	mov	r8, r0
 8011a86:	4689      	mov	r9, r1
 8011a88:	e7de      	b.n	8011a48 <_strtod_l+0x8b8>
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011a94:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011a98:	f04f 38ff 	mov.w	r8, #4294967295
 8011a9c:	e7d4      	b.n	8011a48 <_strtod_l+0x8b8>
 8011a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aa0:	ea13 0f08 	tst.w	r3, r8
 8011aa4:	e7e0      	b.n	8011a68 <_strtod_l+0x8d8>
 8011aa6:	f7ff fb56 	bl	8011156 <sulp>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	460b      	mov	r3, r1
 8011aae:	ec51 0b18 	vmov	r0, r1, d8
 8011ab2:	f7ee fc11 	bl	80002d8 <__aeabi_dsub>
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	2300      	movs	r3, #0
 8011aba:	4680      	mov	r8, r0
 8011abc:	4689      	mov	r9, r1
 8011abe:	f7ef f82b 	bl	8000b18 <__aeabi_dcmpeq>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	d0c0      	beq.n	8011a48 <_strtod_l+0x8b8>
 8011ac6:	e618      	b.n	80116fa <_strtod_l+0x56a>
 8011ac8:	fffffc02 	.word	0xfffffc02
 8011acc:	7ff00000 	.word	0x7ff00000
 8011ad0:	39500000 	.word	0x39500000
 8011ad4:	000fffff 	.word	0x000fffff
 8011ad8:	7fefffff 	.word	0x7fefffff
 8011adc:	08013810 	.word	0x08013810
 8011ae0:	4659      	mov	r1, fp
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f7ff fac0 	bl	8011068 <__ratio>
 8011ae8:	ec57 6b10 	vmov	r6, r7, d0
 8011aec:	ee10 0a10 	vmov	r0, s0
 8011af0:	2200      	movs	r2, #0
 8011af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ef f822 	bl	8000b40 <__aeabi_dcmple>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d071      	beq.n	8011be4 <_strtod_l+0xa54>
 8011b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d17c      	bne.n	8011c00 <_strtod_l+0xa70>
 8011b06:	f1b8 0f00 	cmp.w	r8, #0
 8011b0a:	d15a      	bne.n	8011bc2 <_strtod_l+0xa32>
 8011b0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d15d      	bne.n	8011bd0 <_strtod_l+0xa40>
 8011b14:	4b90      	ldr	r3, [pc, #576]	; (8011d58 <_strtod_l+0xbc8>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	4630      	mov	r0, r6
 8011b1a:	4639      	mov	r1, r7
 8011b1c:	f7ef f806 	bl	8000b2c <__aeabi_dcmplt>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d15c      	bne.n	8011bde <_strtod_l+0xa4e>
 8011b24:	4630      	mov	r0, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	4b8c      	ldr	r3, [pc, #560]	; (8011d5c <_strtod_l+0xbcc>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f7ee fd8c 	bl	8000648 <__aeabi_dmul>
 8011b30:	4606      	mov	r6, r0
 8011b32:	460f      	mov	r7, r1
 8011b34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011b38:	9606      	str	r6, [sp, #24]
 8011b3a:	9307      	str	r3, [sp, #28]
 8011b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011b44:	4b86      	ldr	r3, [pc, #536]	; (8011d60 <_strtod_l+0xbd0>)
 8011b46:	ea0a 0303 	and.w	r3, sl, r3
 8011b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8011b4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b4e:	4b85      	ldr	r3, [pc, #532]	; (8011d64 <_strtod_l+0xbd4>)
 8011b50:	429a      	cmp	r2, r3
 8011b52:	f040 8090 	bne.w	8011c76 <_strtod_l+0xae6>
 8011b56:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8011b5a:	ec49 8b10 	vmov	d0, r8, r9
 8011b5e:	f7ff f9b9 	bl	8010ed4 <__ulp>
 8011b62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b66:	ec51 0b10 	vmov	r0, r1, d0
 8011b6a:	f7ee fd6d 	bl	8000648 <__aeabi_dmul>
 8011b6e:	4642      	mov	r2, r8
 8011b70:	464b      	mov	r3, r9
 8011b72:	f7ee fbb3 	bl	80002dc <__adddf3>
 8011b76:	460b      	mov	r3, r1
 8011b78:	4979      	ldr	r1, [pc, #484]	; (8011d60 <_strtod_l+0xbd0>)
 8011b7a:	4a7b      	ldr	r2, [pc, #492]	; (8011d68 <_strtod_l+0xbd8>)
 8011b7c:	4019      	ands	r1, r3
 8011b7e:	4291      	cmp	r1, r2
 8011b80:	4680      	mov	r8, r0
 8011b82:	d944      	bls.n	8011c0e <_strtod_l+0xa7e>
 8011b84:	ee18 2a90 	vmov	r2, s17
 8011b88:	4b78      	ldr	r3, [pc, #480]	; (8011d6c <_strtod_l+0xbdc>)
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d104      	bne.n	8011b98 <_strtod_l+0xa08>
 8011b8e:	ee18 3a10 	vmov	r3, s16
 8011b92:	3301      	adds	r3, #1
 8011b94:	f43f ad40 	beq.w	8011618 <_strtod_l+0x488>
 8011b98:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8011d6c <_strtod_l+0xbdc>
 8011b9c:	f04f 38ff 	mov.w	r8, #4294967295
 8011ba0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f7fe fe6a 	bl	801087c <_Bfree>
 8011ba8:	9905      	ldr	r1, [sp, #20]
 8011baa:	4620      	mov	r0, r4
 8011bac:	f7fe fe66 	bl	801087c <_Bfree>
 8011bb0:	4659      	mov	r1, fp
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f7fe fe62 	bl	801087c <_Bfree>
 8011bb8:	4629      	mov	r1, r5
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7fe fe5e 	bl	801087c <_Bfree>
 8011bc0:	e609      	b.n	80117d6 <_strtod_l+0x646>
 8011bc2:	f1b8 0f01 	cmp.w	r8, #1
 8011bc6:	d103      	bne.n	8011bd0 <_strtod_l+0xa40>
 8011bc8:	f1b9 0f00 	cmp.w	r9, #0
 8011bcc:	f43f ad95 	beq.w	80116fa <_strtod_l+0x56a>
 8011bd0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8011d28 <_strtod_l+0xb98>
 8011bd4:	4f60      	ldr	r7, [pc, #384]	; (8011d58 <_strtod_l+0xbc8>)
 8011bd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011bda:	2600      	movs	r6, #0
 8011bdc:	e7ae      	b.n	8011b3c <_strtod_l+0x9ac>
 8011bde:	4f5f      	ldr	r7, [pc, #380]	; (8011d5c <_strtod_l+0xbcc>)
 8011be0:	2600      	movs	r6, #0
 8011be2:	e7a7      	b.n	8011b34 <_strtod_l+0x9a4>
 8011be4:	4b5d      	ldr	r3, [pc, #372]	; (8011d5c <_strtod_l+0xbcc>)
 8011be6:	4630      	mov	r0, r6
 8011be8:	4639      	mov	r1, r7
 8011bea:	2200      	movs	r2, #0
 8011bec:	f7ee fd2c 	bl	8000648 <__aeabi_dmul>
 8011bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	460f      	mov	r7, r1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d09c      	beq.n	8011b34 <_strtod_l+0x9a4>
 8011bfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011bfe:	e79d      	b.n	8011b3c <_strtod_l+0x9ac>
 8011c00:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011d30 <_strtod_l+0xba0>
 8011c04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c08:	ec57 6b17 	vmov	r6, r7, d7
 8011c0c:	e796      	b.n	8011b3c <_strtod_l+0x9ac>
 8011c0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011c12:	9b04      	ldr	r3, [sp, #16]
 8011c14:	46ca      	mov	sl, r9
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d1c2      	bne.n	8011ba0 <_strtod_l+0xa10>
 8011c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c20:	0d1b      	lsrs	r3, r3, #20
 8011c22:	051b      	lsls	r3, r3, #20
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d1bb      	bne.n	8011ba0 <_strtod_l+0xa10>
 8011c28:	4630      	mov	r0, r6
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	f7ef f86c 	bl	8000d08 <__aeabi_d2lz>
 8011c30:	f7ee fcdc 	bl	80005ec <__aeabi_l2d>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7ee fb4c 	bl	80002d8 <__aeabi_dsub>
 8011c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c46:	ea43 0308 	orr.w	r3, r3, r8
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	460f      	mov	r7, r1
 8011c50:	d054      	beq.n	8011cfc <_strtod_l+0xb6c>
 8011c52:	a339      	add	r3, pc, #228	; (adr r3, 8011d38 <_strtod_l+0xba8>)
 8011c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c58:	f7ee ff68 	bl	8000b2c <__aeabi_dcmplt>
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	f47f ace5 	bne.w	801162c <_strtod_l+0x49c>
 8011c62:	a337      	add	r3, pc, #220	; (adr r3, 8011d40 <_strtod_l+0xbb0>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	4630      	mov	r0, r6
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	f7ee ff7c 	bl	8000b68 <__aeabi_dcmpgt>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d095      	beq.n	8011ba0 <_strtod_l+0xa10>
 8011c74:	e4da      	b.n	801162c <_strtod_l+0x49c>
 8011c76:	9b04      	ldr	r3, [sp, #16]
 8011c78:	b333      	cbz	r3, 8011cc8 <_strtod_l+0xb38>
 8011c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011c80:	d822      	bhi.n	8011cc8 <_strtod_l+0xb38>
 8011c82:	a331      	add	r3, pc, #196	; (adr r3, 8011d48 <_strtod_l+0xbb8>)
 8011c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c88:	4630      	mov	r0, r6
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	f7ee ff58 	bl	8000b40 <__aeabi_dcmple>
 8011c90:	b1a0      	cbz	r0, 8011cbc <_strtod_l+0xb2c>
 8011c92:	4639      	mov	r1, r7
 8011c94:	4630      	mov	r0, r6
 8011c96:	f7ee ffaf 	bl	8000bf8 <__aeabi_d2uiz>
 8011c9a:	2801      	cmp	r0, #1
 8011c9c:	bf38      	it	cc
 8011c9e:	2001      	movcc	r0, #1
 8011ca0:	f7ee fc58 	bl	8000554 <__aeabi_ui2d>
 8011ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ca6:	4606      	mov	r6, r0
 8011ca8:	460f      	mov	r7, r1
 8011caa:	bb23      	cbnz	r3, 8011cf6 <_strtod_l+0xb66>
 8011cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cb0:	9010      	str	r0, [sp, #64]	; 0x40
 8011cb2:	9311      	str	r3, [sp, #68]	; 0x44
 8011cb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011cb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011cc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011cc4:	1a9b      	subs	r3, r3, r2
 8011cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8011cd0:	eef0 0a68 	vmov.f32	s1, s17
 8011cd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011cd8:	f7ff f8fc 	bl	8010ed4 <__ulp>
 8011cdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011ce0:	ec53 2b10 	vmov	r2, r3, d0
 8011ce4:	f7ee fcb0 	bl	8000648 <__aeabi_dmul>
 8011ce8:	ec53 2b18 	vmov	r2, r3, d8
 8011cec:	f7ee faf6 	bl	80002dc <__adddf3>
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	4689      	mov	r9, r1
 8011cf4:	e78d      	b.n	8011c12 <_strtod_l+0xa82>
 8011cf6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011cfa:	e7db      	b.n	8011cb4 <_strtod_l+0xb24>
 8011cfc:	a314      	add	r3, pc, #80	; (adr r3, 8011d50 <_strtod_l+0xbc0>)
 8011cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d02:	f7ee ff13 	bl	8000b2c <__aeabi_dcmplt>
 8011d06:	e7b3      	b.n	8011c70 <_strtod_l+0xae0>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8011d0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d10:	6013      	str	r3, [r2, #0]
 8011d12:	f7ff ba7c 	b.w	801120e <_strtod_l+0x7e>
 8011d16:	2a65      	cmp	r2, #101	; 0x65
 8011d18:	f43f ab75 	beq.w	8011406 <_strtod_l+0x276>
 8011d1c:	2a45      	cmp	r2, #69	; 0x45
 8011d1e:	f43f ab72 	beq.w	8011406 <_strtod_l+0x276>
 8011d22:	2301      	movs	r3, #1
 8011d24:	f7ff bbaa 	b.w	801147c <_strtod_l+0x2ec>
 8011d28:	00000000 	.word	0x00000000
 8011d2c:	bff00000 	.word	0xbff00000
 8011d30:	00000000 	.word	0x00000000
 8011d34:	3ff00000 	.word	0x3ff00000
 8011d38:	94a03595 	.word	0x94a03595
 8011d3c:	3fdfffff 	.word	0x3fdfffff
 8011d40:	35afe535 	.word	0x35afe535
 8011d44:	3fe00000 	.word	0x3fe00000
 8011d48:	ffc00000 	.word	0xffc00000
 8011d4c:	41dfffff 	.word	0x41dfffff
 8011d50:	94a03595 	.word	0x94a03595
 8011d54:	3fcfffff 	.word	0x3fcfffff
 8011d58:	3ff00000 	.word	0x3ff00000
 8011d5c:	3fe00000 	.word	0x3fe00000
 8011d60:	7ff00000 	.word	0x7ff00000
 8011d64:	7fe00000 	.word	0x7fe00000
 8011d68:	7c9fffff 	.word	0x7c9fffff
 8011d6c:	7fefffff 	.word	0x7fefffff

08011d70 <_strtod_r>:
 8011d70:	4b01      	ldr	r3, [pc, #4]	; (8011d78 <_strtod_r+0x8>)
 8011d72:	f7ff ba0d 	b.w	8011190 <_strtod_l>
 8011d76:	bf00      	nop
 8011d78:	20000068 	.word	0x20000068

08011d7c <__ssputs_r>:
 8011d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d80:	688e      	ldr	r6, [r1, #8]
 8011d82:	461f      	mov	r7, r3
 8011d84:	42be      	cmp	r6, r7
 8011d86:	680b      	ldr	r3, [r1, #0]
 8011d88:	4682      	mov	sl, r0
 8011d8a:	460c      	mov	r4, r1
 8011d8c:	4690      	mov	r8, r2
 8011d8e:	d82c      	bhi.n	8011dea <__ssputs_r+0x6e>
 8011d90:	898a      	ldrh	r2, [r1, #12]
 8011d92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d96:	d026      	beq.n	8011de6 <__ssputs_r+0x6a>
 8011d98:	6965      	ldr	r5, [r4, #20]
 8011d9a:	6909      	ldr	r1, [r1, #16]
 8011d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011da0:	eba3 0901 	sub.w	r9, r3, r1
 8011da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011da8:	1c7b      	adds	r3, r7, #1
 8011daa:	444b      	add	r3, r9
 8011dac:	106d      	asrs	r5, r5, #1
 8011dae:	429d      	cmp	r5, r3
 8011db0:	bf38      	it	cc
 8011db2:	461d      	movcc	r5, r3
 8011db4:	0553      	lsls	r3, r2, #21
 8011db6:	d527      	bpl.n	8011e08 <__ssputs_r+0x8c>
 8011db8:	4629      	mov	r1, r5
 8011dba:	f7fe fc93 	bl	80106e4 <_malloc_r>
 8011dbe:	4606      	mov	r6, r0
 8011dc0:	b360      	cbz	r0, 8011e1c <__ssputs_r+0xa0>
 8011dc2:	6921      	ldr	r1, [r4, #16]
 8011dc4:	464a      	mov	r2, r9
 8011dc6:	f7fd fd8a 	bl	800f8de <memcpy>
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dd4:	81a3      	strh	r3, [r4, #12]
 8011dd6:	6126      	str	r6, [r4, #16]
 8011dd8:	6165      	str	r5, [r4, #20]
 8011dda:	444e      	add	r6, r9
 8011ddc:	eba5 0509 	sub.w	r5, r5, r9
 8011de0:	6026      	str	r6, [r4, #0]
 8011de2:	60a5      	str	r5, [r4, #8]
 8011de4:	463e      	mov	r6, r7
 8011de6:	42be      	cmp	r6, r7
 8011de8:	d900      	bls.n	8011dec <__ssputs_r+0x70>
 8011dea:	463e      	mov	r6, r7
 8011dec:	6820      	ldr	r0, [r4, #0]
 8011dee:	4632      	mov	r2, r6
 8011df0:	4641      	mov	r1, r8
 8011df2:	f000 f9c9 	bl	8012188 <memmove>
 8011df6:	68a3      	ldr	r3, [r4, #8]
 8011df8:	1b9b      	subs	r3, r3, r6
 8011dfa:	60a3      	str	r3, [r4, #8]
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	4433      	add	r3, r6
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	2000      	movs	r0, #0
 8011e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e08:	462a      	mov	r2, r5
 8011e0a:	f000 fd9e 	bl	801294a <_realloc_r>
 8011e0e:	4606      	mov	r6, r0
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d1e0      	bne.n	8011dd6 <__ssputs_r+0x5a>
 8011e14:	6921      	ldr	r1, [r4, #16]
 8011e16:	4650      	mov	r0, sl
 8011e18:	f7fe fbf0 	bl	80105fc <_free_r>
 8011e1c:	230c      	movs	r3, #12
 8011e1e:	f8ca 3000 	str.w	r3, [sl]
 8011e22:	89a3      	ldrh	r3, [r4, #12]
 8011e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e28:	81a3      	strh	r3, [r4, #12]
 8011e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e2e:	e7e9      	b.n	8011e04 <__ssputs_r+0x88>

08011e30 <_svfiprintf_r>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	4698      	mov	r8, r3
 8011e36:	898b      	ldrh	r3, [r1, #12]
 8011e38:	061b      	lsls	r3, r3, #24
 8011e3a:	b09d      	sub	sp, #116	; 0x74
 8011e3c:	4607      	mov	r7, r0
 8011e3e:	460d      	mov	r5, r1
 8011e40:	4614      	mov	r4, r2
 8011e42:	d50e      	bpl.n	8011e62 <_svfiprintf_r+0x32>
 8011e44:	690b      	ldr	r3, [r1, #16]
 8011e46:	b963      	cbnz	r3, 8011e62 <_svfiprintf_r+0x32>
 8011e48:	2140      	movs	r1, #64	; 0x40
 8011e4a:	f7fe fc4b 	bl	80106e4 <_malloc_r>
 8011e4e:	6028      	str	r0, [r5, #0]
 8011e50:	6128      	str	r0, [r5, #16]
 8011e52:	b920      	cbnz	r0, 8011e5e <_svfiprintf_r+0x2e>
 8011e54:	230c      	movs	r3, #12
 8011e56:	603b      	str	r3, [r7, #0]
 8011e58:	f04f 30ff 	mov.w	r0, #4294967295
 8011e5c:	e0d0      	b.n	8012000 <_svfiprintf_r+0x1d0>
 8011e5e:	2340      	movs	r3, #64	; 0x40
 8011e60:	616b      	str	r3, [r5, #20]
 8011e62:	2300      	movs	r3, #0
 8011e64:	9309      	str	r3, [sp, #36]	; 0x24
 8011e66:	2320      	movs	r3, #32
 8011e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e70:	2330      	movs	r3, #48	; 0x30
 8011e72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012018 <_svfiprintf_r+0x1e8>
 8011e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e7a:	f04f 0901 	mov.w	r9, #1
 8011e7e:	4623      	mov	r3, r4
 8011e80:	469a      	mov	sl, r3
 8011e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e86:	b10a      	cbz	r2, 8011e8c <_svfiprintf_r+0x5c>
 8011e88:	2a25      	cmp	r2, #37	; 0x25
 8011e8a:	d1f9      	bne.n	8011e80 <_svfiprintf_r+0x50>
 8011e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8011e90:	d00b      	beq.n	8011eaa <_svfiprintf_r+0x7a>
 8011e92:	465b      	mov	r3, fp
 8011e94:	4622      	mov	r2, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	4638      	mov	r0, r7
 8011e9a:	f7ff ff6f 	bl	8011d7c <__ssputs_r>
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	f000 80a9 	beq.w	8011ff6 <_svfiprintf_r+0x1c6>
 8011ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ea6:	445a      	add	r2, fp
 8011ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8011eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 80a1 	beq.w	8011ff6 <_svfiprintf_r+0x1c6>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ebe:	f10a 0a01 	add.w	sl, sl, #1
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	9307      	str	r3, [sp, #28]
 8011ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011eca:	931a      	str	r3, [sp, #104]	; 0x68
 8011ecc:	4654      	mov	r4, sl
 8011ece:	2205      	movs	r2, #5
 8011ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed4:	4850      	ldr	r0, [pc, #320]	; (8012018 <_svfiprintf_r+0x1e8>)
 8011ed6:	f7ee f9a3 	bl	8000220 <memchr>
 8011eda:	9a04      	ldr	r2, [sp, #16]
 8011edc:	b9d8      	cbnz	r0, 8011f16 <_svfiprintf_r+0xe6>
 8011ede:	06d0      	lsls	r0, r2, #27
 8011ee0:	bf44      	itt	mi
 8011ee2:	2320      	movmi	r3, #32
 8011ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ee8:	0711      	lsls	r1, r2, #28
 8011eea:	bf44      	itt	mi
 8011eec:	232b      	movmi	r3, #43	; 0x2b
 8011eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ef8:	d015      	beq.n	8011f26 <_svfiprintf_r+0xf6>
 8011efa:	9a07      	ldr	r2, [sp, #28]
 8011efc:	4654      	mov	r4, sl
 8011efe:	2000      	movs	r0, #0
 8011f00:	f04f 0c0a 	mov.w	ip, #10
 8011f04:	4621      	mov	r1, r4
 8011f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f0a:	3b30      	subs	r3, #48	; 0x30
 8011f0c:	2b09      	cmp	r3, #9
 8011f0e:	d94d      	bls.n	8011fac <_svfiprintf_r+0x17c>
 8011f10:	b1b0      	cbz	r0, 8011f40 <_svfiprintf_r+0x110>
 8011f12:	9207      	str	r2, [sp, #28]
 8011f14:	e014      	b.n	8011f40 <_svfiprintf_r+0x110>
 8011f16:	eba0 0308 	sub.w	r3, r0, r8
 8011f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	9304      	str	r3, [sp, #16]
 8011f22:	46a2      	mov	sl, r4
 8011f24:	e7d2      	b.n	8011ecc <_svfiprintf_r+0x9c>
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	1d19      	adds	r1, r3, #4
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	9103      	str	r1, [sp, #12]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	bfbb      	ittet	lt
 8011f32:	425b      	neglt	r3, r3
 8011f34:	f042 0202 	orrlt.w	r2, r2, #2
 8011f38:	9307      	strge	r3, [sp, #28]
 8011f3a:	9307      	strlt	r3, [sp, #28]
 8011f3c:	bfb8      	it	lt
 8011f3e:	9204      	strlt	r2, [sp, #16]
 8011f40:	7823      	ldrb	r3, [r4, #0]
 8011f42:	2b2e      	cmp	r3, #46	; 0x2e
 8011f44:	d10c      	bne.n	8011f60 <_svfiprintf_r+0x130>
 8011f46:	7863      	ldrb	r3, [r4, #1]
 8011f48:	2b2a      	cmp	r3, #42	; 0x2a
 8011f4a:	d134      	bne.n	8011fb6 <_svfiprintf_r+0x186>
 8011f4c:	9b03      	ldr	r3, [sp, #12]
 8011f4e:	1d1a      	adds	r2, r3, #4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	9203      	str	r2, [sp, #12]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	bfb8      	it	lt
 8011f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f5c:	3402      	adds	r4, #2
 8011f5e:	9305      	str	r3, [sp, #20]
 8011f60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012028 <_svfiprintf_r+0x1f8>
 8011f64:	7821      	ldrb	r1, [r4, #0]
 8011f66:	2203      	movs	r2, #3
 8011f68:	4650      	mov	r0, sl
 8011f6a:	f7ee f959 	bl	8000220 <memchr>
 8011f6e:	b138      	cbz	r0, 8011f80 <_svfiprintf_r+0x150>
 8011f70:	9b04      	ldr	r3, [sp, #16]
 8011f72:	eba0 000a 	sub.w	r0, r0, sl
 8011f76:	2240      	movs	r2, #64	; 0x40
 8011f78:	4082      	lsls	r2, r0
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	3401      	adds	r4, #1
 8011f7e:	9304      	str	r3, [sp, #16]
 8011f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f84:	4825      	ldr	r0, [pc, #148]	; (801201c <_svfiprintf_r+0x1ec>)
 8011f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f8a:	2206      	movs	r2, #6
 8011f8c:	f7ee f948 	bl	8000220 <memchr>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d038      	beq.n	8012006 <_svfiprintf_r+0x1d6>
 8011f94:	4b22      	ldr	r3, [pc, #136]	; (8012020 <_svfiprintf_r+0x1f0>)
 8011f96:	bb1b      	cbnz	r3, 8011fe0 <_svfiprintf_r+0x1b0>
 8011f98:	9b03      	ldr	r3, [sp, #12]
 8011f9a:	3307      	adds	r3, #7
 8011f9c:	f023 0307 	bic.w	r3, r3, #7
 8011fa0:	3308      	adds	r3, #8
 8011fa2:	9303      	str	r3, [sp, #12]
 8011fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa6:	4433      	add	r3, r6
 8011fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8011faa:	e768      	b.n	8011e7e <_svfiprintf_r+0x4e>
 8011fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	e7a6      	b.n	8011f04 <_svfiprintf_r+0xd4>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	3401      	adds	r4, #1
 8011fba:	9305      	str	r3, [sp, #20]
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	f04f 0c0a 	mov.w	ip, #10
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fc8:	3a30      	subs	r2, #48	; 0x30
 8011fca:	2a09      	cmp	r2, #9
 8011fcc:	d903      	bls.n	8011fd6 <_svfiprintf_r+0x1a6>
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d0c6      	beq.n	8011f60 <_svfiprintf_r+0x130>
 8011fd2:	9105      	str	r1, [sp, #20]
 8011fd4:	e7c4      	b.n	8011f60 <_svfiprintf_r+0x130>
 8011fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fda:	4604      	mov	r4, r0
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e7f0      	b.n	8011fc2 <_svfiprintf_r+0x192>
 8011fe0:	ab03      	add	r3, sp, #12
 8011fe2:	9300      	str	r3, [sp, #0]
 8011fe4:	462a      	mov	r2, r5
 8011fe6:	4b0f      	ldr	r3, [pc, #60]	; (8012024 <_svfiprintf_r+0x1f4>)
 8011fe8:	a904      	add	r1, sp, #16
 8011fea:	4638      	mov	r0, r7
 8011fec:	f7fc fce6 	bl	800e9bc <_printf_float>
 8011ff0:	1c42      	adds	r2, r0, #1
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	d1d6      	bne.n	8011fa4 <_svfiprintf_r+0x174>
 8011ff6:	89ab      	ldrh	r3, [r5, #12]
 8011ff8:	065b      	lsls	r3, r3, #25
 8011ffa:	f53f af2d 	bmi.w	8011e58 <_svfiprintf_r+0x28>
 8011ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012000:	b01d      	add	sp, #116	; 0x74
 8012002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012006:	ab03      	add	r3, sp, #12
 8012008:	9300      	str	r3, [sp, #0]
 801200a:	462a      	mov	r2, r5
 801200c:	4b05      	ldr	r3, [pc, #20]	; (8012024 <_svfiprintf_r+0x1f4>)
 801200e:	a904      	add	r1, sp, #16
 8012010:	4638      	mov	r0, r7
 8012012:	f7fc ff77 	bl	800ef04 <_printf_i>
 8012016:	e7eb      	b.n	8011ff0 <_svfiprintf_r+0x1c0>
 8012018:	08013838 	.word	0x08013838
 801201c:	08013842 	.word	0x08013842
 8012020:	0800e9bd 	.word	0x0800e9bd
 8012024:	08011d7d 	.word	0x08011d7d
 8012028:	0801383e 	.word	0x0801383e

0801202c <__sflush_r>:
 801202c:	898a      	ldrh	r2, [r1, #12]
 801202e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012032:	4605      	mov	r5, r0
 8012034:	0710      	lsls	r0, r2, #28
 8012036:	460c      	mov	r4, r1
 8012038:	d458      	bmi.n	80120ec <__sflush_r+0xc0>
 801203a:	684b      	ldr	r3, [r1, #4]
 801203c:	2b00      	cmp	r3, #0
 801203e:	dc05      	bgt.n	801204c <__sflush_r+0x20>
 8012040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012042:	2b00      	cmp	r3, #0
 8012044:	dc02      	bgt.n	801204c <__sflush_r+0x20>
 8012046:	2000      	movs	r0, #0
 8012048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801204e:	2e00      	cmp	r6, #0
 8012050:	d0f9      	beq.n	8012046 <__sflush_r+0x1a>
 8012052:	2300      	movs	r3, #0
 8012054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012058:	682f      	ldr	r7, [r5, #0]
 801205a:	6a21      	ldr	r1, [r4, #32]
 801205c:	602b      	str	r3, [r5, #0]
 801205e:	d032      	beq.n	80120c6 <__sflush_r+0x9a>
 8012060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	075a      	lsls	r2, r3, #29
 8012066:	d505      	bpl.n	8012074 <__sflush_r+0x48>
 8012068:	6863      	ldr	r3, [r4, #4]
 801206a:	1ac0      	subs	r0, r0, r3
 801206c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801206e:	b10b      	cbz	r3, 8012074 <__sflush_r+0x48>
 8012070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012072:	1ac0      	subs	r0, r0, r3
 8012074:	2300      	movs	r3, #0
 8012076:	4602      	mov	r2, r0
 8012078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801207a:	6a21      	ldr	r1, [r4, #32]
 801207c:	4628      	mov	r0, r5
 801207e:	47b0      	blx	r6
 8012080:	1c43      	adds	r3, r0, #1
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	d106      	bne.n	8012094 <__sflush_r+0x68>
 8012086:	6829      	ldr	r1, [r5, #0]
 8012088:	291d      	cmp	r1, #29
 801208a:	d82b      	bhi.n	80120e4 <__sflush_r+0xb8>
 801208c:	4a29      	ldr	r2, [pc, #164]	; (8012134 <__sflush_r+0x108>)
 801208e:	410a      	asrs	r2, r1
 8012090:	07d6      	lsls	r6, r2, #31
 8012092:	d427      	bmi.n	80120e4 <__sflush_r+0xb8>
 8012094:	2200      	movs	r2, #0
 8012096:	6062      	str	r2, [r4, #4]
 8012098:	04d9      	lsls	r1, r3, #19
 801209a:	6922      	ldr	r2, [r4, #16]
 801209c:	6022      	str	r2, [r4, #0]
 801209e:	d504      	bpl.n	80120aa <__sflush_r+0x7e>
 80120a0:	1c42      	adds	r2, r0, #1
 80120a2:	d101      	bne.n	80120a8 <__sflush_r+0x7c>
 80120a4:	682b      	ldr	r3, [r5, #0]
 80120a6:	b903      	cbnz	r3, 80120aa <__sflush_r+0x7e>
 80120a8:	6560      	str	r0, [r4, #84]	; 0x54
 80120aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120ac:	602f      	str	r7, [r5, #0]
 80120ae:	2900      	cmp	r1, #0
 80120b0:	d0c9      	beq.n	8012046 <__sflush_r+0x1a>
 80120b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120b6:	4299      	cmp	r1, r3
 80120b8:	d002      	beq.n	80120c0 <__sflush_r+0x94>
 80120ba:	4628      	mov	r0, r5
 80120bc:	f7fe fa9e 	bl	80105fc <_free_r>
 80120c0:	2000      	movs	r0, #0
 80120c2:	6360      	str	r0, [r4, #52]	; 0x34
 80120c4:	e7c0      	b.n	8012048 <__sflush_r+0x1c>
 80120c6:	2301      	movs	r3, #1
 80120c8:	4628      	mov	r0, r5
 80120ca:	47b0      	blx	r6
 80120cc:	1c41      	adds	r1, r0, #1
 80120ce:	d1c8      	bne.n	8012062 <__sflush_r+0x36>
 80120d0:	682b      	ldr	r3, [r5, #0]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d0c5      	beq.n	8012062 <__sflush_r+0x36>
 80120d6:	2b1d      	cmp	r3, #29
 80120d8:	d001      	beq.n	80120de <__sflush_r+0xb2>
 80120da:	2b16      	cmp	r3, #22
 80120dc:	d101      	bne.n	80120e2 <__sflush_r+0xb6>
 80120de:	602f      	str	r7, [r5, #0]
 80120e0:	e7b1      	b.n	8012046 <__sflush_r+0x1a>
 80120e2:	89a3      	ldrh	r3, [r4, #12]
 80120e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	e7ad      	b.n	8012048 <__sflush_r+0x1c>
 80120ec:	690f      	ldr	r7, [r1, #16]
 80120ee:	2f00      	cmp	r7, #0
 80120f0:	d0a9      	beq.n	8012046 <__sflush_r+0x1a>
 80120f2:	0793      	lsls	r3, r2, #30
 80120f4:	680e      	ldr	r6, [r1, #0]
 80120f6:	bf08      	it	eq
 80120f8:	694b      	ldreq	r3, [r1, #20]
 80120fa:	600f      	str	r7, [r1, #0]
 80120fc:	bf18      	it	ne
 80120fe:	2300      	movne	r3, #0
 8012100:	eba6 0807 	sub.w	r8, r6, r7
 8012104:	608b      	str	r3, [r1, #8]
 8012106:	f1b8 0f00 	cmp.w	r8, #0
 801210a:	dd9c      	ble.n	8012046 <__sflush_r+0x1a>
 801210c:	6a21      	ldr	r1, [r4, #32]
 801210e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012110:	4643      	mov	r3, r8
 8012112:	463a      	mov	r2, r7
 8012114:	4628      	mov	r0, r5
 8012116:	47b0      	blx	r6
 8012118:	2800      	cmp	r0, #0
 801211a:	dc06      	bgt.n	801212a <__sflush_r+0xfe>
 801211c:	89a3      	ldrh	r3, [r4, #12]
 801211e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012122:	81a3      	strh	r3, [r4, #12]
 8012124:	f04f 30ff 	mov.w	r0, #4294967295
 8012128:	e78e      	b.n	8012048 <__sflush_r+0x1c>
 801212a:	4407      	add	r7, r0
 801212c:	eba8 0800 	sub.w	r8, r8, r0
 8012130:	e7e9      	b.n	8012106 <__sflush_r+0xda>
 8012132:	bf00      	nop
 8012134:	dfbffffe 	.word	0xdfbffffe

08012138 <_fflush_r>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	690b      	ldr	r3, [r1, #16]
 801213c:	4605      	mov	r5, r0
 801213e:	460c      	mov	r4, r1
 8012140:	b913      	cbnz	r3, 8012148 <_fflush_r+0x10>
 8012142:	2500      	movs	r5, #0
 8012144:	4628      	mov	r0, r5
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	b118      	cbz	r0, 8012152 <_fflush_r+0x1a>
 801214a:	6a03      	ldr	r3, [r0, #32]
 801214c:	b90b      	cbnz	r3, 8012152 <_fflush_r+0x1a>
 801214e:	f7fd fa97 	bl	800f680 <__sinit>
 8012152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d0f3      	beq.n	8012142 <_fflush_r+0xa>
 801215a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801215c:	07d0      	lsls	r0, r2, #31
 801215e:	d404      	bmi.n	801216a <_fflush_r+0x32>
 8012160:	0599      	lsls	r1, r3, #22
 8012162:	d402      	bmi.n	801216a <_fflush_r+0x32>
 8012164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012166:	f7fd fbb8 	bl	800f8da <__retarget_lock_acquire_recursive>
 801216a:	4628      	mov	r0, r5
 801216c:	4621      	mov	r1, r4
 801216e:	f7ff ff5d 	bl	801202c <__sflush_r>
 8012172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012174:	07da      	lsls	r2, r3, #31
 8012176:	4605      	mov	r5, r0
 8012178:	d4e4      	bmi.n	8012144 <_fflush_r+0xc>
 801217a:	89a3      	ldrh	r3, [r4, #12]
 801217c:	059b      	lsls	r3, r3, #22
 801217e:	d4e1      	bmi.n	8012144 <_fflush_r+0xc>
 8012180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012182:	f7fd fbab 	bl	800f8dc <__retarget_lock_release_recursive>
 8012186:	e7dd      	b.n	8012144 <_fflush_r+0xc>

08012188 <memmove>:
 8012188:	4288      	cmp	r0, r1
 801218a:	b510      	push	{r4, lr}
 801218c:	eb01 0402 	add.w	r4, r1, r2
 8012190:	d902      	bls.n	8012198 <memmove+0x10>
 8012192:	4284      	cmp	r4, r0
 8012194:	4623      	mov	r3, r4
 8012196:	d807      	bhi.n	80121a8 <memmove+0x20>
 8012198:	1e43      	subs	r3, r0, #1
 801219a:	42a1      	cmp	r1, r4
 801219c:	d008      	beq.n	80121b0 <memmove+0x28>
 801219e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121a6:	e7f8      	b.n	801219a <memmove+0x12>
 80121a8:	4402      	add	r2, r0
 80121aa:	4601      	mov	r1, r0
 80121ac:	428a      	cmp	r2, r1
 80121ae:	d100      	bne.n	80121b2 <memmove+0x2a>
 80121b0:	bd10      	pop	{r4, pc}
 80121b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80121ba:	e7f7      	b.n	80121ac <memmove+0x24>

080121bc <strncmp>:
 80121bc:	b510      	push	{r4, lr}
 80121be:	b16a      	cbz	r2, 80121dc <strncmp+0x20>
 80121c0:	3901      	subs	r1, #1
 80121c2:	1884      	adds	r4, r0, r2
 80121c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d103      	bne.n	80121d8 <strncmp+0x1c>
 80121d0:	42a0      	cmp	r0, r4
 80121d2:	d001      	beq.n	80121d8 <strncmp+0x1c>
 80121d4:	2a00      	cmp	r2, #0
 80121d6:	d1f5      	bne.n	80121c4 <strncmp+0x8>
 80121d8:	1ad0      	subs	r0, r2, r3
 80121da:	bd10      	pop	{r4, pc}
 80121dc:	4610      	mov	r0, r2
 80121de:	e7fc      	b.n	80121da <strncmp+0x1e>

080121e0 <_sbrk_r>:
 80121e0:	b538      	push	{r3, r4, r5, lr}
 80121e2:	4d06      	ldr	r5, [pc, #24]	; (80121fc <_sbrk_r+0x1c>)
 80121e4:	2300      	movs	r3, #0
 80121e6:	4604      	mov	r4, r0
 80121e8:	4608      	mov	r0, r1
 80121ea:	602b      	str	r3, [r5, #0]
 80121ec:	f7f6 fcba 	bl	8008b64 <_sbrk>
 80121f0:	1c43      	adds	r3, r0, #1
 80121f2:	d102      	bne.n	80121fa <_sbrk_r+0x1a>
 80121f4:	682b      	ldr	r3, [r5, #0]
 80121f6:	b103      	cbz	r3, 80121fa <_sbrk_r+0x1a>
 80121f8:	6023      	str	r3, [r4, #0]
 80121fa:	bd38      	pop	{r3, r4, r5, pc}
 80121fc:	20001430 	.word	0x20001430

08012200 <nan>:
 8012200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012208 <nan+0x8>
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop
 8012208:	00000000 	.word	0x00000000
 801220c:	7ff80000 	.word	0x7ff80000

08012210 <__assert_func>:
 8012210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012212:	4614      	mov	r4, r2
 8012214:	461a      	mov	r2, r3
 8012216:	4b09      	ldr	r3, [pc, #36]	; (801223c <__assert_func+0x2c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4605      	mov	r5, r0
 801221c:	68d8      	ldr	r0, [r3, #12]
 801221e:	b14c      	cbz	r4, 8012234 <__assert_func+0x24>
 8012220:	4b07      	ldr	r3, [pc, #28]	; (8012240 <__assert_func+0x30>)
 8012222:	9100      	str	r1, [sp, #0]
 8012224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012228:	4906      	ldr	r1, [pc, #24]	; (8012244 <__assert_func+0x34>)
 801222a:	462b      	mov	r3, r5
 801222c:	f000 fbca 	bl	80129c4 <fiprintf>
 8012230:	f000 fbda 	bl	80129e8 <abort>
 8012234:	4b04      	ldr	r3, [pc, #16]	; (8012248 <__assert_func+0x38>)
 8012236:	461c      	mov	r4, r3
 8012238:	e7f3      	b.n	8012222 <__assert_func+0x12>
 801223a:	bf00      	nop
 801223c:	20000064 	.word	0x20000064
 8012240:	08013851 	.word	0x08013851
 8012244:	0801385e 	.word	0x0801385e
 8012248:	0801388c 	.word	0x0801388c

0801224c <_calloc_r>:
 801224c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801224e:	fba1 2402 	umull	r2, r4, r1, r2
 8012252:	b94c      	cbnz	r4, 8012268 <_calloc_r+0x1c>
 8012254:	4611      	mov	r1, r2
 8012256:	9201      	str	r2, [sp, #4]
 8012258:	f7fe fa44 	bl	80106e4 <_malloc_r>
 801225c:	9a01      	ldr	r2, [sp, #4]
 801225e:	4605      	mov	r5, r0
 8012260:	b930      	cbnz	r0, 8012270 <_calloc_r+0x24>
 8012262:	4628      	mov	r0, r5
 8012264:	b003      	add	sp, #12
 8012266:	bd30      	pop	{r4, r5, pc}
 8012268:	220c      	movs	r2, #12
 801226a:	6002      	str	r2, [r0, #0]
 801226c:	2500      	movs	r5, #0
 801226e:	e7f8      	b.n	8012262 <_calloc_r+0x16>
 8012270:	4621      	mov	r1, r4
 8012272:	f7fd fa9e 	bl	800f7b2 <memset>
 8012276:	e7f4      	b.n	8012262 <_calloc_r+0x16>

08012278 <rshift>:
 8012278:	6903      	ldr	r3, [r0, #16]
 801227a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801227e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012282:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012286:	f100 0414 	add.w	r4, r0, #20
 801228a:	dd45      	ble.n	8012318 <rshift+0xa0>
 801228c:	f011 011f 	ands.w	r1, r1, #31
 8012290:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012294:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012298:	d10c      	bne.n	80122b4 <rshift+0x3c>
 801229a:	f100 0710 	add.w	r7, r0, #16
 801229e:	4629      	mov	r1, r5
 80122a0:	42b1      	cmp	r1, r6
 80122a2:	d334      	bcc.n	801230e <rshift+0x96>
 80122a4:	1a9b      	subs	r3, r3, r2
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	1eea      	subs	r2, r5, #3
 80122aa:	4296      	cmp	r6, r2
 80122ac:	bf38      	it	cc
 80122ae:	2300      	movcc	r3, #0
 80122b0:	4423      	add	r3, r4
 80122b2:	e015      	b.n	80122e0 <rshift+0x68>
 80122b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80122b8:	f1c1 0820 	rsb	r8, r1, #32
 80122bc:	40cf      	lsrs	r7, r1
 80122be:	f105 0e04 	add.w	lr, r5, #4
 80122c2:	46a1      	mov	r9, r4
 80122c4:	4576      	cmp	r6, lr
 80122c6:	46f4      	mov	ip, lr
 80122c8:	d815      	bhi.n	80122f6 <rshift+0x7e>
 80122ca:	1a9a      	subs	r2, r3, r2
 80122cc:	0092      	lsls	r2, r2, #2
 80122ce:	3a04      	subs	r2, #4
 80122d0:	3501      	adds	r5, #1
 80122d2:	42ae      	cmp	r6, r5
 80122d4:	bf38      	it	cc
 80122d6:	2200      	movcc	r2, #0
 80122d8:	18a3      	adds	r3, r4, r2
 80122da:	50a7      	str	r7, [r4, r2]
 80122dc:	b107      	cbz	r7, 80122e0 <rshift+0x68>
 80122de:	3304      	adds	r3, #4
 80122e0:	1b1a      	subs	r2, r3, r4
 80122e2:	42a3      	cmp	r3, r4
 80122e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80122e8:	bf08      	it	eq
 80122ea:	2300      	moveq	r3, #0
 80122ec:	6102      	str	r2, [r0, #16]
 80122ee:	bf08      	it	eq
 80122f0:	6143      	streq	r3, [r0, #20]
 80122f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122f6:	f8dc c000 	ldr.w	ip, [ip]
 80122fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80122fe:	ea4c 0707 	orr.w	r7, ip, r7
 8012302:	f849 7b04 	str.w	r7, [r9], #4
 8012306:	f85e 7b04 	ldr.w	r7, [lr], #4
 801230a:	40cf      	lsrs	r7, r1
 801230c:	e7da      	b.n	80122c4 <rshift+0x4c>
 801230e:	f851 cb04 	ldr.w	ip, [r1], #4
 8012312:	f847 cf04 	str.w	ip, [r7, #4]!
 8012316:	e7c3      	b.n	80122a0 <rshift+0x28>
 8012318:	4623      	mov	r3, r4
 801231a:	e7e1      	b.n	80122e0 <rshift+0x68>

0801231c <__hexdig_fun>:
 801231c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012320:	2b09      	cmp	r3, #9
 8012322:	d802      	bhi.n	801232a <__hexdig_fun+0xe>
 8012324:	3820      	subs	r0, #32
 8012326:	b2c0      	uxtb	r0, r0
 8012328:	4770      	bx	lr
 801232a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801232e:	2b05      	cmp	r3, #5
 8012330:	d801      	bhi.n	8012336 <__hexdig_fun+0x1a>
 8012332:	3847      	subs	r0, #71	; 0x47
 8012334:	e7f7      	b.n	8012326 <__hexdig_fun+0xa>
 8012336:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801233a:	2b05      	cmp	r3, #5
 801233c:	d801      	bhi.n	8012342 <__hexdig_fun+0x26>
 801233e:	3827      	subs	r0, #39	; 0x27
 8012340:	e7f1      	b.n	8012326 <__hexdig_fun+0xa>
 8012342:	2000      	movs	r0, #0
 8012344:	4770      	bx	lr
	...

08012348 <__gethex>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	4617      	mov	r7, r2
 801234e:	680a      	ldr	r2, [r1, #0]
 8012350:	b085      	sub	sp, #20
 8012352:	f102 0b02 	add.w	fp, r2, #2
 8012356:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801235a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801235e:	4681      	mov	r9, r0
 8012360:	468a      	mov	sl, r1
 8012362:	9302      	str	r3, [sp, #8]
 8012364:	32fe      	adds	r2, #254	; 0xfe
 8012366:	eb02 030b 	add.w	r3, r2, fp
 801236a:	46d8      	mov	r8, fp
 801236c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012370:	9301      	str	r3, [sp, #4]
 8012372:	2830      	cmp	r0, #48	; 0x30
 8012374:	d0f7      	beq.n	8012366 <__gethex+0x1e>
 8012376:	f7ff ffd1 	bl	801231c <__hexdig_fun>
 801237a:	4604      	mov	r4, r0
 801237c:	2800      	cmp	r0, #0
 801237e:	d138      	bne.n	80123f2 <__gethex+0xaa>
 8012380:	49a7      	ldr	r1, [pc, #668]	; (8012620 <__gethex+0x2d8>)
 8012382:	2201      	movs	r2, #1
 8012384:	4640      	mov	r0, r8
 8012386:	f7ff ff19 	bl	80121bc <strncmp>
 801238a:	4606      	mov	r6, r0
 801238c:	2800      	cmp	r0, #0
 801238e:	d169      	bne.n	8012464 <__gethex+0x11c>
 8012390:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012394:	465d      	mov	r5, fp
 8012396:	f7ff ffc1 	bl	801231c <__hexdig_fun>
 801239a:	2800      	cmp	r0, #0
 801239c:	d064      	beq.n	8012468 <__gethex+0x120>
 801239e:	465a      	mov	r2, fp
 80123a0:	7810      	ldrb	r0, [r2, #0]
 80123a2:	2830      	cmp	r0, #48	; 0x30
 80123a4:	4690      	mov	r8, r2
 80123a6:	f102 0201 	add.w	r2, r2, #1
 80123aa:	d0f9      	beq.n	80123a0 <__gethex+0x58>
 80123ac:	f7ff ffb6 	bl	801231c <__hexdig_fun>
 80123b0:	2301      	movs	r3, #1
 80123b2:	fab0 f480 	clz	r4, r0
 80123b6:	0964      	lsrs	r4, r4, #5
 80123b8:	465e      	mov	r6, fp
 80123ba:	9301      	str	r3, [sp, #4]
 80123bc:	4642      	mov	r2, r8
 80123be:	4615      	mov	r5, r2
 80123c0:	3201      	adds	r2, #1
 80123c2:	7828      	ldrb	r0, [r5, #0]
 80123c4:	f7ff ffaa 	bl	801231c <__hexdig_fun>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d1f8      	bne.n	80123be <__gethex+0x76>
 80123cc:	4994      	ldr	r1, [pc, #592]	; (8012620 <__gethex+0x2d8>)
 80123ce:	2201      	movs	r2, #1
 80123d0:	4628      	mov	r0, r5
 80123d2:	f7ff fef3 	bl	80121bc <strncmp>
 80123d6:	b978      	cbnz	r0, 80123f8 <__gethex+0xb0>
 80123d8:	b946      	cbnz	r6, 80123ec <__gethex+0xa4>
 80123da:	1c6e      	adds	r6, r5, #1
 80123dc:	4632      	mov	r2, r6
 80123de:	4615      	mov	r5, r2
 80123e0:	3201      	adds	r2, #1
 80123e2:	7828      	ldrb	r0, [r5, #0]
 80123e4:	f7ff ff9a 	bl	801231c <__hexdig_fun>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	d1f8      	bne.n	80123de <__gethex+0x96>
 80123ec:	1b73      	subs	r3, r6, r5
 80123ee:	009e      	lsls	r6, r3, #2
 80123f0:	e004      	b.n	80123fc <__gethex+0xb4>
 80123f2:	2400      	movs	r4, #0
 80123f4:	4626      	mov	r6, r4
 80123f6:	e7e1      	b.n	80123bc <__gethex+0x74>
 80123f8:	2e00      	cmp	r6, #0
 80123fa:	d1f7      	bne.n	80123ec <__gethex+0xa4>
 80123fc:	782b      	ldrb	r3, [r5, #0]
 80123fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012402:	2b50      	cmp	r3, #80	; 0x50
 8012404:	d13d      	bne.n	8012482 <__gethex+0x13a>
 8012406:	786b      	ldrb	r3, [r5, #1]
 8012408:	2b2b      	cmp	r3, #43	; 0x2b
 801240a:	d02f      	beq.n	801246c <__gethex+0x124>
 801240c:	2b2d      	cmp	r3, #45	; 0x2d
 801240e:	d031      	beq.n	8012474 <__gethex+0x12c>
 8012410:	1c69      	adds	r1, r5, #1
 8012412:	f04f 0b00 	mov.w	fp, #0
 8012416:	7808      	ldrb	r0, [r1, #0]
 8012418:	f7ff ff80 	bl	801231c <__hexdig_fun>
 801241c:	1e42      	subs	r2, r0, #1
 801241e:	b2d2      	uxtb	r2, r2
 8012420:	2a18      	cmp	r2, #24
 8012422:	d82e      	bhi.n	8012482 <__gethex+0x13a>
 8012424:	f1a0 0210 	sub.w	r2, r0, #16
 8012428:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801242c:	f7ff ff76 	bl	801231c <__hexdig_fun>
 8012430:	f100 3cff 	add.w	ip, r0, #4294967295
 8012434:	fa5f fc8c 	uxtb.w	ip, ip
 8012438:	f1bc 0f18 	cmp.w	ip, #24
 801243c:	d91d      	bls.n	801247a <__gethex+0x132>
 801243e:	f1bb 0f00 	cmp.w	fp, #0
 8012442:	d000      	beq.n	8012446 <__gethex+0xfe>
 8012444:	4252      	negs	r2, r2
 8012446:	4416      	add	r6, r2
 8012448:	f8ca 1000 	str.w	r1, [sl]
 801244c:	b1dc      	cbz	r4, 8012486 <__gethex+0x13e>
 801244e:	9b01      	ldr	r3, [sp, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	bf14      	ite	ne
 8012454:	f04f 0800 	movne.w	r8, #0
 8012458:	f04f 0806 	moveq.w	r8, #6
 801245c:	4640      	mov	r0, r8
 801245e:	b005      	add	sp, #20
 8012460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012464:	4645      	mov	r5, r8
 8012466:	4626      	mov	r6, r4
 8012468:	2401      	movs	r4, #1
 801246a:	e7c7      	b.n	80123fc <__gethex+0xb4>
 801246c:	f04f 0b00 	mov.w	fp, #0
 8012470:	1ca9      	adds	r1, r5, #2
 8012472:	e7d0      	b.n	8012416 <__gethex+0xce>
 8012474:	f04f 0b01 	mov.w	fp, #1
 8012478:	e7fa      	b.n	8012470 <__gethex+0x128>
 801247a:	230a      	movs	r3, #10
 801247c:	fb03 0002 	mla	r0, r3, r2, r0
 8012480:	e7d0      	b.n	8012424 <__gethex+0xdc>
 8012482:	4629      	mov	r1, r5
 8012484:	e7e0      	b.n	8012448 <__gethex+0x100>
 8012486:	eba5 0308 	sub.w	r3, r5, r8
 801248a:	3b01      	subs	r3, #1
 801248c:	4621      	mov	r1, r4
 801248e:	2b07      	cmp	r3, #7
 8012490:	dc0a      	bgt.n	80124a8 <__gethex+0x160>
 8012492:	4648      	mov	r0, r9
 8012494:	f7fe f9b2 	bl	80107fc <_Balloc>
 8012498:	4604      	mov	r4, r0
 801249a:	b940      	cbnz	r0, 80124ae <__gethex+0x166>
 801249c:	4b61      	ldr	r3, [pc, #388]	; (8012624 <__gethex+0x2dc>)
 801249e:	4602      	mov	r2, r0
 80124a0:	21e4      	movs	r1, #228	; 0xe4
 80124a2:	4861      	ldr	r0, [pc, #388]	; (8012628 <__gethex+0x2e0>)
 80124a4:	f7ff feb4 	bl	8012210 <__assert_func>
 80124a8:	3101      	adds	r1, #1
 80124aa:	105b      	asrs	r3, r3, #1
 80124ac:	e7ef      	b.n	801248e <__gethex+0x146>
 80124ae:	f100 0a14 	add.w	sl, r0, #20
 80124b2:	2300      	movs	r3, #0
 80124b4:	495a      	ldr	r1, [pc, #360]	; (8012620 <__gethex+0x2d8>)
 80124b6:	f8cd a004 	str.w	sl, [sp, #4]
 80124ba:	469b      	mov	fp, r3
 80124bc:	45a8      	cmp	r8, r5
 80124be:	d342      	bcc.n	8012546 <__gethex+0x1fe>
 80124c0:	9801      	ldr	r0, [sp, #4]
 80124c2:	f840 bb04 	str.w	fp, [r0], #4
 80124c6:	eba0 000a 	sub.w	r0, r0, sl
 80124ca:	1080      	asrs	r0, r0, #2
 80124cc:	6120      	str	r0, [r4, #16]
 80124ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80124d2:	4658      	mov	r0, fp
 80124d4:	f7fe fa84 	bl	80109e0 <__hi0bits>
 80124d8:	683d      	ldr	r5, [r7, #0]
 80124da:	eba8 0000 	sub.w	r0, r8, r0
 80124de:	42a8      	cmp	r0, r5
 80124e0:	dd59      	ble.n	8012596 <__gethex+0x24e>
 80124e2:	eba0 0805 	sub.w	r8, r0, r5
 80124e6:	4641      	mov	r1, r8
 80124e8:	4620      	mov	r0, r4
 80124ea:	f7fe fe13 	bl	8011114 <__any_on>
 80124ee:	4683      	mov	fp, r0
 80124f0:	b1b8      	cbz	r0, 8012522 <__gethex+0x1da>
 80124f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80124f6:	1159      	asrs	r1, r3, #5
 80124f8:	f003 021f 	and.w	r2, r3, #31
 80124fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012500:	f04f 0b01 	mov.w	fp, #1
 8012504:	fa0b f202 	lsl.w	r2, fp, r2
 8012508:	420a      	tst	r2, r1
 801250a:	d00a      	beq.n	8012522 <__gethex+0x1da>
 801250c:	455b      	cmp	r3, fp
 801250e:	dd06      	ble.n	801251e <__gethex+0x1d6>
 8012510:	f1a8 0102 	sub.w	r1, r8, #2
 8012514:	4620      	mov	r0, r4
 8012516:	f7fe fdfd 	bl	8011114 <__any_on>
 801251a:	2800      	cmp	r0, #0
 801251c:	d138      	bne.n	8012590 <__gethex+0x248>
 801251e:	f04f 0b02 	mov.w	fp, #2
 8012522:	4641      	mov	r1, r8
 8012524:	4620      	mov	r0, r4
 8012526:	f7ff fea7 	bl	8012278 <rshift>
 801252a:	4446      	add	r6, r8
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	42b3      	cmp	r3, r6
 8012530:	da41      	bge.n	80125b6 <__gethex+0x26e>
 8012532:	4621      	mov	r1, r4
 8012534:	4648      	mov	r0, r9
 8012536:	f7fe f9a1 	bl	801087c <_Bfree>
 801253a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801253c:	2300      	movs	r3, #0
 801253e:	6013      	str	r3, [r2, #0]
 8012540:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012544:	e78a      	b.n	801245c <__gethex+0x114>
 8012546:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801254a:	2a2e      	cmp	r2, #46	; 0x2e
 801254c:	d014      	beq.n	8012578 <__gethex+0x230>
 801254e:	2b20      	cmp	r3, #32
 8012550:	d106      	bne.n	8012560 <__gethex+0x218>
 8012552:	9b01      	ldr	r3, [sp, #4]
 8012554:	f843 bb04 	str.w	fp, [r3], #4
 8012558:	f04f 0b00 	mov.w	fp, #0
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	465b      	mov	r3, fp
 8012560:	7828      	ldrb	r0, [r5, #0]
 8012562:	9303      	str	r3, [sp, #12]
 8012564:	f7ff feda 	bl	801231c <__hexdig_fun>
 8012568:	9b03      	ldr	r3, [sp, #12]
 801256a:	f000 000f 	and.w	r0, r0, #15
 801256e:	4098      	lsls	r0, r3
 8012570:	ea4b 0b00 	orr.w	fp, fp, r0
 8012574:	3304      	adds	r3, #4
 8012576:	e7a1      	b.n	80124bc <__gethex+0x174>
 8012578:	45a8      	cmp	r8, r5
 801257a:	d8e8      	bhi.n	801254e <__gethex+0x206>
 801257c:	2201      	movs	r2, #1
 801257e:	4628      	mov	r0, r5
 8012580:	9303      	str	r3, [sp, #12]
 8012582:	f7ff fe1b 	bl	80121bc <strncmp>
 8012586:	4926      	ldr	r1, [pc, #152]	; (8012620 <__gethex+0x2d8>)
 8012588:	9b03      	ldr	r3, [sp, #12]
 801258a:	2800      	cmp	r0, #0
 801258c:	d1df      	bne.n	801254e <__gethex+0x206>
 801258e:	e795      	b.n	80124bc <__gethex+0x174>
 8012590:	f04f 0b03 	mov.w	fp, #3
 8012594:	e7c5      	b.n	8012522 <__gethex+0x1da>
 8012596:	da0b      	bge.n	80125b0 <__gethex+0x268>
 8012598:	eba5 0800 	sub.w	r8, r5, r0
 801259c:	4621      	mov	r1, r4
 801259e:	4642      	mov	r2, r8
 80125a0:	4648      	mov	r0, r9
 80125a2:	f7fe fb85 	bl	8010cb0 <__lshift>
 80125a6:	eba6 0608 	sub.w	r6, r6, r8
 80125aa:	4604      	mov	r4, r0
 80125ac:	f100 0a14 	add.w	sl, r0, #20
 80125b0:	f04f 0b00 	mov.w	fp, #0
 80125b4:	e7ba      	b.n	801252c <__gethex+0x1e4>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	42b3      	cmp	r3, r6
 80125ba:	dd73      	ble.n	80126a4 <__gethex+0x35c>
 80125bc:	1b9e      	subs	r6, r3, r6
 80125be:	42b5      	cmp	r5, r6
 80125c0:	dc34      	bgt.n	801262c <__gethex+0x2e4>
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	2b02      	cmp	r3, #2
 80125c6:	d023      	beq.n	8012610 <__gethex+0x2c8>
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d025      	beq.n	8012618 <__gethex+0x2d0>
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d115      	bne.n	80125fc <__gethex+0x2b4>
 80125d0:	42b5      	cmp	r5, r6
 80125d2:	d113      	bne.n	80125fc <__gethex+0x2b4>
 80125d4:	2d01      	cmp	r5, #1
 80125d6:	d10b      	bne.n	80125f0 <__gethex+0x2a8>
 80125d8:	9a02      	ldr	r2, [sp, #8]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6013      	str	r3, [r2, #0]
 80125de:	2301      	movs	r3, #1
 80125e0:	6123      	str	r3, [r4, #16]
 80125e2:	f8ca 3000 	str.w	r3, [sl]
 80125e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80125ec:	601c      	str	r4, [r3, #0]
 80125ee:	e735      	b.n	801245c <__gethex+0x114>
 80125f0:	1e69      	subs	r1, r5, #1
 80125f2:	4620      	mov	r0, r4
 80125f4:	f7fe fd8e 	bl	8011114 <__any_on>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d1ed      	bne.n	80125d8 <__gethex+0x290>
 80125fc:	4621      	mov	r1, r4
 80125fe:	4648      	mov	r0, r9
 8012600:	f7fe f93c 	bl	801087c <_Bfree>
 8012604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012606:	2300      	movs	r3, #0
 8012608:	6013      	str	r3, [r2, #0]
 801260a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801260e:	e725      	b.n	801245c <__gethex+0x114>
 8012610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1f2      	bne.n	80125fc <__gethex+0x2b4>
 8012616:	e7df      	b.n	80125d8 <__gethex+0x290>
 8012618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1dc      	bne.n	80125d8 <__gethex+0x290>
 801261e:	e7ed      	b.n	80125fc <__gethex+0x2b4>
 8012620:	080137e4 	.word	0x080137e4
 8012624:	0801367a 	.word	0x0801367a
 8012628:	0801388d 	.word	0x0801388d
 801262c:	f106 38ff 	add.w	r8, r6, #4294967295
 8012630:	f1bb 0f00 	cmp.w	fp, #0
 8012634:	d133      	bne.n	801269e <__gethex+0x356>
 8012636:	f1b8 0f00 	cmp.w	r8, #0
 801263a:	d004      	beq.n	8012646 <__gethex+0x2fe>
 801263c:	4641      	mov	r1, r8
 801263e:	4620      	mov	r0, r4
 8012640:	f7fe fd68 	bl	8011114 <__any_on>
 8012644:	4683      	mov	fp, r0
 8012646:	ea4f 1268 	mov.w	r2, r8, asr #5
 801264a:	2301      	movs	r3, #1
 801264c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012650:	f008 081f 	and.w	r8, r8, #31
 8012654:	fa03 f308 	lsl.w	r3, r3, r8
 8012658:	4213      	tst	r3, r2
 801265a:	4631      	mov	r1, r6
 801265c:	4620      	mov	r0, r4
 801265e:	bf18      	it	ne
 8012660:	f04b 0b02 	orrne.w	fp, fp, #2
 8012664:	1bad      	subs	r5, r5, r6
 8012666:	f7ff fe07 	bl	8012278 <rshift>
 801266a:	687e      	ldr	r6, [r7, #4]
 801266c:	f04f 0802 	mov.w	r8, #2
 8012670:	f1bb 0f00 	cmp.w	fp, #0
 8012674:	d04a      	beq.n	801270c <__gethex+0x3c4>
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2b02      	cmp	r3, #2
 801267a:	d016      	beq.n	80126aa <__gethex+0x362>
 801267c:	2b03      	cmp	r3, #3
 801267e:	d018      	beq.n	80126b2 <__gethex+0x36a>
 8012680:	2b01      	cmp	r3, #1
 8012682:	d109      	bne.n	8012698 <__gethex+0x350>
 8012684:	f01b 0f02 	tst.w	fp, #2
 8012688:	d006      	beq.n	8012698 <__gethex+0x350>
 801268a:	f8da 3000 	ldr.w	r3, [sl]
 801268e:	ea4b 0b03 	orr.w	fp, fp, r3
 8012692:	f01b 0f01 	tst.w	fp, #1
 8012696:	d10f      	bne.n	80126b8 <__gethex+0x370>
 8012698:	f048 0810 	orr.w	r8, r8, #16
 801269c:	e036      	b.n	801270c <__gethex+0x3c4>
 801269e:	f04f 0b01 	mov.w	fp, #1
 80126a2:	e7d0      	b.n	8012646 <__gethex+0x2fe>
 80126a4:	f04f 0801 	mov.w	r8, #1
 80126a8:	e7e2      	b.n	8012670 <__gethex+0x328>
 80126aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126ac:	f1c3 0301 	rsb	r3, r3, #1
 80126b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80126b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d0ef      	beq.n	8012698 <__gethex+0x350>
 80126b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80126bc:	f104 0214 	add.w	r2, r4, #20
 80126c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80126ca:	2300      	movs	r3, #0
 80126cc:	4694      	mov	ip, r2
 80126ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80126d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80126d6:	d01e      	beq.n	8012716 <__gethex+0x3ce>
 80126d8:	3101      	adds	r1, #1
 80126da:	f8cc 1000 	str.w	r1, [ip]
 80126de:	f1b8 0f02 	cmp.w	r8, #2
 80126e2:	f104 0214 	add.w	r2, r4, #20
 80126e6:	d13d      	bne.n	8012764 <__gethex+0x41c>
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	3b01      	subs	r3, #1
 80126ec:	42ab      	cmp	r3, r5
 80126ee:	d10b      	bne.n	8012708 <__gethex+0x3c0>
 80126f0:	1169      	asrs	r1, r5, #5
 80126f2:	2301      	movs	r3, #1
 80126f4:	f005 051f 	and.w	r5, r5, #31
 80126f8:	fa03 f505 	lsl.w	r5, r3, r5
 80126fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012700:	421d      	tst	r5, r3
 8012702:	bf18      	it	ne
 8012704:	f04f 0801 	movne.w	r8, #1
 8012708:	f048 0820 	orr.w	r8, r8, #32
 801270c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801270e:	601c      	str	r4, [r3, #0]
 8012710:	9b02      	ldr	r3, [sp, #8]
 8012712:	601e      	str	r6, [r3, #0]
 8012714:	e6a2      	b.n	801245c <__gethex+0x114>
 8012716:	4290      	cmp	r0, r2
 8012718:	f842 3c04 	str.w	r3, [r2, #-4]
 801271c:	d8d6      	bhi.n	80126cc <__gethex+0x384>
 801271e:	68a2      	ldr	r2, [r4, #8]
 8012720:	4593      	cmp	fp, r2
 8012722:	db17      	blt.n	8012754 <__gethex+0x40c>
 8012724:	6861      	ldr	r1, [r4, #4]
 8012726:	4648      	mov	r0, r9
 8012728:	3101      	adds	r1, #1
 801272a:	f7fe f867 	bl	80107fc <_Balloc>
 801272e:	4682      	mov	sl, r0
 8012730:	b918      	cbnz	r0, 801273a <__gethex+0x3f2>
 8012732:	4b1b      	ldr	r3, [pc, #108]	; (80127a0 <__gethex+0x458>)
 8012734:	4602      	mov	r2, r0
 8012736:	2184      	movs	r1, #132	; 0x84
 8012738:	e6b3      	b.n	80124a2 <__gethex+0x15a>
 801273a:	6922      	ldr	r2, [r4, #16]
 801273c:	3202      	adds	r2, #2
 801273e:	f104 010c 	add.w	r1, r4, #12
 8012742:	0092      	lsls	r2, r2, #2
 8012744:	300c      	adds	r0, #12
 8012746:	f7fd f8ca 	bl	800f8de <memcpy>
 801274a:	4621      	mov	r1, r4
 801274c:	4648      	mov	r0, r9
 801274e:	f7fe f895 	bl	801087c <_Bfree>
 8012752:	4654      	mov	r4, sl
 8012754:	6922      	ldr	r2, [r4, #16]
 8012756:	1c51      	adds	r1, r2, #1
 8012758:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801275c:	6121      	str	r1, [r4, #16]
 801275e:	2101      	movs	r1, #1
 8012760:	6151      	str	r1, [r2, #20]
 8012762:	e7bc      	b.n	80126de <__gethex+0x396>
 8012764:	6921      	ldr	r1, [r4, #16]
 8012766:	4559      	cmp	r1, fp
 8012768:	dd0b      	ble.n	8012782 <__gethex+0x43a>
 801276a:	2101      	movs	r1, #1
 801276c:	4620      	mov	r0, r4
 801276e:	f7ff fd83 	bl	8012278 <rshift>
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	3601      	adds	r6, #1
 8012776:	42b3      	cmp	r3, r6
 8012778:	f6ff aedb 	blt.w	8012532 <__gethex+0x1ea>
 801277c:	f04f 0801 	mov.w	r8, #1
 8012780:	e7c2      	b.n	8012708 <__gethex+0x3c0>
 8012782:	f015 051f 	ands.w	r5, r5, #31
 8012786:	d0f9      	beq.n	801277c <__gethex+0x434>
 8012788:	9b01      	ldr	r3, [sp, #4]
 801278a:	441a      	add	r2, r3
 801278c:	f1c5 0520 	rsb	r5, r5, #32
 8012790:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012794:	f7fe f924 	bl	80109e0 <__hi0bits>
 8012798:	42a8      	cmp	r0, r5
 801279a:	dbe6      	blt.n	801276a <__gethex+0x422>
 801279c:	e7ee      	b.n	801277c <__gethex+0x434>
 801279e:	bf00      	nop
 80127a0:	0801367a 	.word	0x0801367a

080127a4 <L_shift>:
 80127a4:	f1c2 0208 	rsb	r2, r2, #8
 80127a8:	0092      	lsls	r2, r2, #2
 80127aa:	b570      	push	{r4, r5, r6, lr}
 80127ac:	f1c2 0620 	rsb	r6, r2, #32
 80127b0:	6843      	ldr	r3, [r0, #4]
 80127b2:	6804      	ldr	r4, [r0, #0]
 80127b4:	fa03 f506 	lsl.w	r5, r3, r6
 80127b8:	432c      	orrs	r4, r5
 80127ba:	40d3      	lsrs	r3, r2
 80127bc:	6004      	str	r4, [r0, #0]
 80127be:	f840 3f04 	str.w	r3, [r0, #4]!
 80127c2:	4288      	cmp	r0, r1
 80127c4:	d3f4      	bcc.n	80127b0 <L_shift+0xc>
 80127c6:	bd70      	pop	{r4, r5, r6, pc}

080127c8 <__match>:
 80127c8:	b530      	push	{r4, r5, lr}
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	3301      	adds	r3, #1
 80127ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127d2:	b914      	cbnz	r4, 80127da <__match+0x12>
 80127d4:	6003      	str	r3, [r0, #0]
 80127d6:	2001      	movs	r0, #1
 80127d8:	bd30      	pop	{r4, r5, pc}
 80127da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80127e2:	2d19      	cmp	r5, #25
 80127e4:	bf98      	it	ls
 80127e6:	3220      	addls	r2, #32
 80127e8:	42a2      	cmp	r2, r4
 80127ea:	d0f0      	beq.n	80127ce <__match+0x6>
 80127ec:	2000      	movs	r0, #0
 80127ee:	e7f3      	b.n	80127d8 <__match+0x10>

080127f0 <__hexnan>:
 80127f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f4:	680b      	ldr	r3, [r1, #0]
 80127f6:	6801      	ldr	r1, [r0, #0]
 80127f8:	115e      	asrs	r6, r3, #5
 80127fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80127fe:	f013 031f 	ands.w	r3, r3, #31
 8012802:	b087      	sub	sp, #28
 8012804:	bf18      	it	ne
 8012806:	3604      	addne	r6, #4
 8012808:	2500      	movs	r5, #0
 801280a:	1f37      	subs	r7, r6, #4
 801280c:	4682      	mov	sl, r0
 801280e:	4690      	mov	r8, r2
 8012810:	9301      	str	r3, [sp, #4]
 8012812:	f846 5c04 	str.w	r5, [r6, #-4]
 8012816:	46b9      	mov	r9, r7
 8012818:	463c      	mov	r4, r7
 801281a:	9502      	str	r5, [sp, #8]
 801281c:	46ab      	mov	fp, r5
 801281e:	784a      	ldrb	r2, [r1, #1]
 8012820:	1c4b      	adds	r3, r1, #1
 8012822:	9303      	str	r3, [sp, #12]
 8012824:	b342      	cbz	r2, 8012878 <__hexnan+0x88>
 8012826:	4610      	mov	r0, r2
 8012828:	9105      	str	r1, [sp, #20]
 801282a:	9204      	str	r2, [sp, #16]
 801282c:	f7ff fd76 	bl	801231c <__hexdig_fun>
 8012830:	2800      	cmp	r0, #0
 8012832:	d14f      	bne.n	80128d4 <__hexnan+0xe4>
 8012834:	9a04      	ldr	r2, [sp, #16]
 8012836:	9905      	ldr	r1, [sp, #20]
 8012838:	2a20      	cmp	r2, #32
 801283a:	d818      	bhi.n	801286e <__hexnan+0x7e>
 801283c:	9b02      	ldr	r3, [sp, #8]
 801283e:	459b      	cmp	fp, r3
 8012840:	dd13      	ble.n	801286a <__hexnan+0x7a>
 8012842:	454c      	cmp	r4, r9
 8012844:	d206      	bcs.n	8012854 <__hexnan+0x64>
 8012846:	2d07      	cmp	r5, #7
 8012848:	dc04      	bgt.n	8012854 <__hexnan+0x64>
 801284a:	462a      	mov	r2, r5
 801284c:	4649      	mov	r1, r9
 801284e:	4620      	mov	r0, r4
 8012850:	f7ff ffa8 	bl	80127a4 <L_shift>
 8012854:	4544      	cmp	r4, r8
 8012856:	d950      	bls.n	80128fa <__hexnan+0x10a>
 8012858:	2300      	movs	r3, #0
 801285a:	f1a4 0904 	sub.w	r9, r4, #4
 801285e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012862:	f8cd b008 	str.w	fp, [sp, #8]
 8012866:	464c      	mov	r4, r9
 8012868:	461d      	mov	r5, r3
 801286a:	9903      	ldr	r1, [sp, #12]
 801286c:	e7d7      	b.n	801281e <__hexnan+0x2e>
 801286e:	2a29      	cmp	r2, #41	; 0x29
 8012870:	d155      	bne.n	801291e <__hexnan+0x12e>
 8012872:	3102      	adds	r1, #2
 8012874:	f8ca 1000 	str.w	r1, [sl]
 8012878:	f1bb 0f00 	cmp.w	fp, #0
 801287c:	d04f      	beq.n	801291e <__hexnan+0x12e>
 801287e:	454c      	cmp	r4, r9
 8012880:	d206      	bcs.n	8012890 <__hexnan+0xa0>
 8012882:	2d07      	cmp	r5, #7
 8012884:	dc04      	bgt.n	8012890 <__hexnan+0xa0>
 8012886:	462a      	mov	r2, r5
 8012888:	4649      	mov	r1, r9
 801288a:	4620      	mov	r0, r4
 801288c:	f7ff ff8a 	bl	80127a4 <L_shift>
 8012890:	4544      	cmp	r4, r8
 8012892:	d934      	bls.n	80128fe <__hexnan+0x10e>
 8012894:	f1a8 0204 	sub.w	r2, r8, #4
 8012898:	4623      	mov	r3, r4
 801289a:	f853 1b04 	ldr.w	r1, [r3], #4
 801289e:	f842 1f04 	str.w	r1, [r2, #4]!
 80128a2:	429f      	cmp	r7, r3
 80128a4:	d2f9      	bcs.n	801289a <__hexnan+0xaa>
 80128a6:	1b3b      	subs	r3, r7, r4
 80128a8:	f023 0303 	bic.w	r3, r3, #3
 80128ac:	3304      	adds	r3, #4
 80128ae:	3e03      	subs	r6, #3
 80128b0:	3401      	adds	r4, #1
 80128b2:	42a6      	cmp	r6, r4
 80128b4:	bf38      	it	cc
 80128b6:	2304      	movcc	r3, #4
 80128b8:	4443      	add	r3, r8
 80128ba:	2200      	movs	r2, #0
 80128bc:	f843 2b04 	str.w	r2, [r3], #4
 80128c0:	429f      	cmp	r7, r3
 80128c2:	d2fb      	bcs.n	80128bc <__hexnan+0xcc>
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	b91b      	cbnz	r3, 80128d0 <__hexnan+0xe0>
 80128c8:	4547      	cmp	r7, r8
 80128ca:	d126      	bne.n	801291a <__hexnan+0x12a>
 80128cc:	2301      	movs	r3, #1
 80128ce:	603b      	str	r3, [r7, #0]
 80128d0:	2005      	movs	r0, #5
 80128d2:	e025      	b.n	8012920 <__hexnan+0x130>
 80128d4:	3501      	adds	r5, #1
 80128d6:	2d08      	cmp	r5, #8
 80128d8:	f10b 0b01 	add.w	fp, fp, #1
 80128dc:	dd06      	ble.n	80128ec <__hexnan+0xfc>
 80128de:	4544      	cmp	r4, r8
 80128e0:	d9c3      	bls.n	801286a <__hexnan+0x7a>
 80128e2:	2300      	movs	r3, #0
 80128e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80128e8:	2501      	movs	r5, #1
 80128ea:	3c04      	subs	r4, #4
 80128ec:	6822      	ldr	r2, [r4, #0]
 80128ee:	f000 000f 	and.w	r0, r0, #15
 80128f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80128f6:	6020      	str	r0, [r4, #0]
 80128f8:	e7b7      	b.n	801286a <__hexnan+0x7a>
 80128fa:	2508      	movs	r5, #8
 80128fc:	e7b5      	b.n	801286a <__hexnan+0x7a>
 80128fe:	9b01      	ldr	r3, [sp, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d0df      	beq.n	80128c4 <__hexnan+0xd4>
 8012904:	f1c3 0320 	rsb	r3, r3, #32
 8012908:	f04f 32ff 	mov.w	r2, #4294967295
 801290c:	40da      	lsrs	r2, r3
 801290e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012912:	4013      	ands	r3, r2
 8012914:	f846 3c04 	str.w	r3, [r6, #-4]
 8012918:	e7d4      	b.n	80128c4 <__hexnan+0xd4>
 801291a:	3f04      	subs	r7, #4
 801291c:	e7d2      	b.n	80128c4 <__hexnan+0xd4>
 801291e:	2004      	movs	r0, #4
 8012920:	b007      	add	sp, #28
 8012922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012926 <__ascii_mbtowc>:
 8012926:	b082      	sub	sp, #8
 8012928:	b901      	cbnz	r1, 801292c <__ascii_mbtowc+0x6>
 801292a:	a901      	add	r1, sp, #4
 801292c:	b142      	cbz	r2, 8012940 <__ascii_mbtowc+0x1a>
 801292e:	b14b      	cbz	r3, 8012944 <__ascii_mbtowc+0x1e>
 8012930:	7813      	ldrb	r3, [r2, #0]
 8012932:	600b      	str	r3, [r1, #0]
 8012934:	7812      	ldrb	r2, [r2, #0]
 8012936:	1e10      	subs	r0, r2, #0
 8012938:	bf18      	it	ne
 801293a:	2001      	movne	r0, #1
 801293c:	b002      	add	sp, #8
 801293e:	4770      	bx	lr
 8012940:	4610      	mov	r0, r2
 8012942:	e7fb      	b.n	801293c <__ascii_mbtowc+0x16>
 8012944:	f06f 0001 	mvn.w	r0, #1
 8012948:	e7f8      	b.n	801293c <__ascii_mbtowc+0x16>

0801294a <_realloc_r>:
 801294a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801294e:	4680      	mov	r8, r0
 8012950:	4614      	mov	r4, r2
 8012952:	460e      	mov	r6, r1
 8012954:	b921      	cbnz	r1, 8012960 <_realloc_r+0x16>
 8012956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801295a:	4611      	mov	r1, r2
 801295c:	f7fd bec2 	b.w	80106e4 <_malloc_r>
 8012960:	b92a      	cbnz	r2, 801296e <_realloc_r+0x24>
 8012962:	f7fd fe4b 	bl	80105fc <_free_r>
 8012966:	4625      	mov	r5, r4
 8012968:	4628      	mov	r0, r5
 801296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296e:	f000 f842 	bl	80129f6 <_malloc_usable_size_r>
 8012972:	4284      	cmp	r4, r0
 8012974:	4607      	mov	r7, r0
 8012976:	d802      	bhi.n	801297e <_realloc_r+0x34>
 8012978:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801297c:	d812      	bhi.n	80129a4 <_realloc_r+0x5a>
 801297e:	4621      	mov	r1, r4
 8012980:	4640      	mov	r0, r8
 8012982:	f7fd feaf 	bl	80106e4 <_malloc_r>
 8012986:	4605      	mov	r5, r0
 8012988:	2800      	cmp	r0, #0
 801298a:	d0ed      	beq.n	8012968 <_realloc_r+0x1e>
 801298c:	42bc      	cmp	r4, r7
 801298e:	4622      	mov	r2, r4
 8012990:	4631      	mov	r1, r6
 8012992:	bf28      	it	cs
 8012994:	463a      	movcs	r2, r7
 8012996:	f7fc ffa2 	bl	800f8de <memcpy>
 801299a:	4631      	mov	r1, r6
 801299c:	4640      	mov	r0, r8
 801299e:	f7fd fe2d 	bl	80105fc <_free_r>
 80129a2:	e7e1      	b.n	8012968 <_realloc_r+0x1e>
 80129a4:	4635      	mov	r5, r6
 80129a6:	e7df      	b.n	8012968 <_realloc_r+0x1e>

080129a8 <__ascii_wctomb>:
 80129a8:	b149      	cbz	r1, 80129be <__ascii_wctomb+0x16>
 80129aa:	2aff      	cmp	r2, #255	; 0xff
 80129ac:	bf85      	ittet	hi
 80129ae:	238a      	movhi	r3, #138	; 0x8a
 80129b0:	6003      	strhi	r3, [r0, #0]
 80129b2:	700a      	strbls	r2, [r1, #0]
 80129b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80129b8:	bf98      	it	ls
 80129ba:	2001      	movls	r0, #1
 80129bc:	4770      	bx	lr
 80129be:	4608      	mov	r0, r1
 80129c0:	4770      	bx	lr
	...

080129c4 <fiprintf>:
 80129c4:	b40e      	push	{r1, r2, r3}
 80129c6:	b503      	push	{r0, r1, lr}
 80129c8:	4601      	mov	r1, r0
 80129ca:	ab03      	add	r3, sp, #12
 80129cc:	4805      	ldr	r0, [pc, #20]	; (80129e4 <fiprintf+0x20>)
 80129ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80129d2:	6800      	ldr	r0, [r0, #0]
 80129d4:	9301      	str	r3, [sp, #4]
 80129d6:	f000 f83f 	bl	8012a58 <_vfiprintf_r>
 80129da:	b002      	add	sp, #8
 80129dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80129e0:	b003      	add	sp, #12
 80129e2:	4770      	bx	lr
 80129e4:	20000064 	.word	0x20000064

080129e8 <abort>:
 80129e8:	b508      	push	{r3, lr}
 80129ea:	2006      	movs	r0, #6
 80129ec:	f000 fa0c 	bl	8012e08 <raise>
 80129f0:	2001      	movs	r0, #1
 80129f2:	f7f6 f85b 	bl	8008aac <_exit>

080129f6 <_malloc_usable_size_r>:
 80129f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129fa:	1f18      	subs	r0, r3, #4
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	bfbc      	itt	lt
 8012a00:	580b      	ldrlt	r3, [r1, r0]
 8012a02:	18c0      	addlt	r0, r0, r3
 8012a04:	4770      	bx	lr

08012a06 <__sfputc_r>:
 8012a06:	6893      	ldr	r3, [r2, #8]
 8012a08:	3b01      	subs	r3, #1
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	b410      	push	{r4}
 8012a0e:	6093      	str	r3, [r2, #8]
 8012a10:	da08      	bge.n	8012a24 <__sfputc_r+0x1e>
 8012a12:	6994      	ldr	r4, [r2, #24]
 8012a14:	42a3      	cmp	r3, r4
 8012a16:	db01      	blt.n	8012a1c <__sfputc_r+0x16>
 8012a18:	290a      	cmp	r1, #10
 8012a1a:	d103      	bne.n	8012a24 <__sfputc_r+0x1e>
 8012a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a20:	f000 b934 	b.w	8012c8c <__swbuf_r>
 8012a24:	6813      	ldr	r3, [r2, #0]
 8012a26:	1c58      	adds	r0, r3, #1
 8012a28:	6010      	str	r0, [r2, #0]
 8012a2a:	7019      	strb	r1, [r3, #0]
 8012a2c:	4608      	mov	r0, r1
 8012a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <__sfputs_r>:
 8012a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a36:	4606      	mov	r6, r0
 8012a38:	460f      	mov	r7, r1
 8012a3a:	4614      	mov	r4, r2
 8012a3c:	18d5      	adds	r5, r2, r3
 8012a3e:	42ac      	cmp	r4, r5
 8012a40:	d101      	bne.n	8012a46 <__sfputs_r+0x12>
 8012a42:	2000      	movs	r0, #0
 8012a44:	e007      	b.n	8012a56 <__sfputs_r+0x22>
 8012a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a4a:	463a      	mov	r2, r7
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f7ff ffda 	bl	8012a06 <__sfputc_r>
 8012a52:	1c43      	adds	r3, r0, #1
 8012a54:	d1f3      	bne.n	8012a3e <__sfputs_r+0xa>
 8012a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a58 <_vfiprintf_r>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	460d      	mov	r5, r1
 8012a5e:	b09d      	sub	sp, #116	; 0x74
 8012a60:	4614      	mov	r4, r2
 8012a62:	4698      	mov	r8, r3
 8012a64:	4606      	mov	r6, r0
 8012a66:	b118      	cbz	r0, 8012a70 <_vfiprintf_r+0x18>
 8012a68:	6a03      	ldr	r3, [r0, #32]
 8012a6a:	b90b      	cbnz	r3, 8012a70 <_vfiprintf_r+0x18>
 8012a6c:	f7fc fe08 	bl	800f680 <__sinit>
 8012a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a72:	07d9      	lsls	r1, r3, #31
 8012a74:	d405      	bmi.n	8012a82 <_vfiprintf_r+0x2a>
 8012a76:	89ab      	ldrh	r3, [r5, #12]
 8012a78:	059a      	lsls	r2, r3, #22
 8012a7a:	d402      	bmi.n	8012a82 <_vfiprintf_r+0x2a>
 8012a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a7e:	f7fc ff2c 	bl	800f8da <__retarget_lock_acquire_recursive>
 8012a82:	89ab      	ldrh	r3, [r5, #12]
 8012a84:	071b      	lsls	r3, r3, #28
 8012a86:	d501      	bpl.n	8012a8c <_vfiprintf_r+0x34>
 8012a88:	692b      	ldr	r3, [r5, #16]
 8012a8a:	b99b      	cbnz	r3, 8012ab4 <_vfiprintf_r+0x5c>
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f000 f93a 	bl	8012d08 <__swsetup_r>
 8012a94:	b170      	cbz	r0, 8012ab4 <_vfiprintf_r+0x5c>
 8012a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a98:	07dc      	lsls	r4, r3, #31
 8012a9a:	d504      	bpl.n	8012aa6 <_vfiprintf_r+0x4e>
 8012a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa0:	b01d      	add	sp, #116	; 0x74
 8012aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa6:	89ab      	ldrh	r3, [r5, #12]
 8012aa8:	0598      	lsls	r0, r3, #22
 8012aaa:	d4f7      	bmi.n	8012a9c <_vfiprintf_r+0x44>
 8012aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aae:	f7fc ff15 	bl	800f8dc <__retarget_lock_release_recursive>
 8012ab2:	e7f3      	b.n	8012a9c <_vfiprintf_r+0x44>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ab8:	2320      	movs	r3, #32
 8012aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ac2:	2330      	movs	r3, #48	; 0x30
 8012ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012c78 <_vfiprintf_r+0x220>
 8012ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012acc:	f04f 0901 	mov.w	r9, #1
 8012ad0:	4623      	mov	r3, r4
 8012ad2:	469a      	mov	sl, r3
 8012ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ad8:	b10a      	cbz	r2, 8012ade <_vfiprintf_r+0x86>
 8012ada:	2a25      	cmp	r2, #37	; 0x25
 8012adc:	d1f9      	bne.n	8012ad2 <_vfiprintf_r+0x7a>
 8012ade:	ebba 0b04 	subs.w	fp, sl, r4
 8012ae2:	d00b      	beq.n	8012afc <_vfiprintf_r+0xa4>
 8012ae4:	465b      	mov	r3, fp
 8012ae6:	4622      	mov	r2, r4
 8012ae8:	4629      	mov	r1, r5
 8012aea:	4630      	mov	r0, r6
 8012aec:	f7ff ffa2 	bl	8012a34 <__sfputs_r>
 8012af0:	3001      	adds	r0, #1
 8012af2:	f000 80a9 	beq.w	8012c48 <_vfiprintf_r+0x1f0>
 8012af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012af8:	445a      	add	r2, fp
 8012afa:	9209      	str	r2, [sp, #36]	; 0x24
 8012afc:	f89a 3000 	ldrb.w	r3, [sl]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	f000 80a1 	beq.w	8012c48 <_vfiprintf_r+0x1f0>
 8012b06:	2300      	movs	r3, #0
 8012b08:	f04f 32ff 	mov.w	r2, #4294967295
 8012b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b10:	f10a 0a01 	add.w	sl, sl, #1
 8012b14:	9304      	str	r3, [sp, #16]
 8012b16:	9307      	str	r3, [sp, #28]
 8012b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8012b1e:	4654      	mov	r4, sl
 8012b20:	2205      	movs	r2, #5
 8012b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b26:	4854      	ldr	r0, [pc, #336]	; (8012c78 <_vfiprintf_r+0x220>)
 8012b28:	f7ed fb7a 	bl	8000220 <memchr>
 8012b2c:	9a04      	ldr	r2, [sp, #16]
 8012b2e:	b9d8      	cbnz	r0, 8012b68 <_vfiprintf_r+0x110>
 8012b30:	06d1      	lsls	r1, r2, #27
 8012b32:	bf44      	itt	mi
 8012b34:	2320      	movmi	r3, #32
 8012b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b3a:	0713      	lsls	r3, r2, #28
 8012b3c:	bf44      	itt	mi
 8012b3e:	232b      	movmi	r3, #43	; 0x2b
 8012b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b44:	f89a 3000 	ldrb.w	r3, [sl]
 8012b48:	2b2a      	cmp	r3, #42	; 0x2a
 8012b4a:	d015      	beq.n	8012b78 <_vfiprintf_r+0x120>
 8012b4c:	9a07      	ldr	r2, [sp, #28]
 8012b4e:	4654      	mov	r4, sl
 8012b50:	2000      	movs	r0, #0
 8012b52:	f04f 0c0a 	mov.w	ip, #10
 8012b56:	4621      	mov	r1, r4
 8012b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b5c:	3b30      	subs	r3, #48	; 0x30
 8012b5e:	2b09      	cmp	r3, #9
 8012b60:	d94d      	bls.n	8012bfe <_vfiprintf_r+0x1a6>
 8012b62:	b1b0      	cbz	r0, 8012b92 <_vfiprintf_r+0x13a>
 8012b64:	9207      	str	r2, [sp, #28]
 8012b66:	e014      	b.n	8012b92 <_vfiprintf_r+0x13a>
 8012b68:	eba0 0308 	sub.w	r3, r0, r8
 8012b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8012b70:	4313      	orrs	r3, r2
 8012b72:	9304      	str	r3, [sp, #16]
 8012b74:	46a2      	mov	sl, r4
 8012b76:	e7d2      	b.n	8012b1e <_vfiprintf_r+0xc6>
 8012b78:	9b03      	ldr	r3, [sp, #12]
 8012b7a:	1d19      	adds	r1, r3, #4
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	9103      	str	r1, [sp, #12]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	bfbb      	ittet	lt
 8012b84:	425b      	neglt	r3, r3
 8012b86:	f042 0202 	orrlt.w	r2, r2, #2
 8012b8a:	9307      	strge	r3, [sp, #28]
 8012b8c:	9307      	strlt	r3, [sp, #28]
 8012b8e:	bfb8      	it	lt
 8012b90:	9204      	strlt	r2, [sp, #16]
 8012b92:	7823      	ldrb	r3, [r4, #0]
 8012b94:	2b2e      	cmp	r3, #46	; 0x2e
 8012b96:	d10c      	bne.n	8012bb2 <_vfiprintf_r+0x15a>
 8012b98:	7863      	ldrb	r3, [r4, #1]
 8012b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8012b9c:	d134      	bne.n	8012c08 <_vfiprintf_r+0x1b0>
 8012b9e:	9b03      	ldr	r3, [sp, #12]
 8012ba0:	1d1a      	adds	r2, r3, #4
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	9203      	str	r2, [sp, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	bfb8      	it	lt
 8012baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bae:	3402      	adds	r4, #2
 8012bb0:	9305      	str	r3, [sp, #20]
 8012bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012c88 <_vfiprintf_r+0x230>
 8012bb6:	7821      	ldrb	r1, [r4, #0]
 8012bb8:	2203      	movs	r2, #3
 8012bba:	4650      	mov	r0, sl
 8012bbc:	f7ed fb30 	bl	8000220 <memchr>
 8012bc0:	b138      	cbz	r0, 8012bd2 <_vfiprintf_r+0x17a>
 8012bc2:	9b04      	ldr	r3, [sp, #16]
 8012bc4:	eba0 000a 	sub.w	r0, r0, sl
 8012bc8:	2240      	movs	r2, #64	; 0x40
 8012bca:	4082      	lsls	r2, r0
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	3401      	adds	r4, #1
 8012bd0:	9304      	str	r3, [sp, #16]
 8012bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bd6:	4829      	ldr	r0, [pc, #164]	; (8012c7c <_vfiprintf_r+0x224>)
 8012bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bdc:	2206      	movs	r2, #6
 8012bde:	f7ed fb1f 	bl	8000220 <memchr>
 8012be2:	2800      	cmp	r0, #0
 8012be4:	d03f      	beq.n	8012c66 <_vfiprintf_r+0x20e>
 8012be6:	4b26      	ldr	r3, [pc, #152]	; (8012c80 <_vfiprintf_r+0x228>)
 8012be8:	bb1b      	cbnz	r3, 8012c32 <_vfiprintf_r+0x1da>
 8012bea:	9b03      	ldr	r3, [sp, #12]
 8012bec:	3307      	adds	r3, #7
 8012bee:	f023 0307 	bic.w	r3, r3, #7
 8012bf2:	3308      	adds	r3, #8
 8012bf4:	9303      	str	r3, [sp, #12]
 8012bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bf8:	443b      	add	r3, r7
 8012bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8012bfc:	e768      	b.n	8012ad0 <_vfiprintf_r+0x78>
 8012bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c02:	460c      	mov	r4, r1
 8012c04:	2001      	movs	r0, #1
 8012c06:	e7a6      	b.n	8012b56 <_vfiprintf_r+0xfe>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	3401      	adds	r4, #1
 8012c0c:	9305      	str	r3, [sp, #20]
 8012c0e:	4619      	mov	r1, r3
 8012c10:	f04f 0c0a 	mov.w	ip, #10
 8012c14:	4620      	mov	r0, r4
 8012c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c1a:	3a30      	subs	r2, #48	; 0x30
 8012c1c:	2a09      	cmp	r2, #9
 8012c1e:	d903      	bls.n	8012c28 <_vfiprintf_r+0x1d0>
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d0c6      	beq.n	8012bb2 <_vfiprintf_r+0x15a>
 8012c24:	9105      	str	r1, [sp, #20]
 8012c26:	e7c4      	b.n	8012bb2 <_vfiprintf_r+0x15a>
 8012c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	2301      	movs	r3, #1
 8012c30:	e7f0      	b.n	8012c14 <_vfiprintf_r+0x1bc>
 8012c32:	ab03      	add	r3, sp, #12
 8012c34:	9300      	str	r3, [sp, #0]
 8012c36:	462a      	mov	r2, r5
 8012c38:	4b12      	ldr	r3, [pc, #72]	; (8012c84 <_vfiprintf_r+0x22c>)
 8012c3a:	a904      	add	r1, sp, #16
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f7fb febd 	bl	800e9bc <_printf_float>
 8012c42:	4607      	mov	r7, r0
 8012c44:	1c78      	adds	r0, r7, #1
 8012c46:	d1d6      	bne.n	8012bf6 <_vfiprintf_r+0x19e>
 8012c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c4a:	07d9      	lsls	r1, r3, #31
 8012c4c:	d405      	bmi.n	8012c5a <_vfiprintf_r+0x202>
 8012c4e:	89ab      	ldrh	r3, [r5, #12]
 8012c50:	059a      	lsls	r2, r3, #22
 8012c52:	d402      	bmi.n	8012c5a <_vfiprintf_r+0x202>
 8012c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c56:	f7fc fe41 	bl	800f8dc <__retarget_lock_release_recursive>
 8012c5a:	89ab      	ldrh	r3, [r5, #12]
 8012c5c:	065b      	lsls	r3, r3, #25
 8012c5e:	f53f af1d 	bmi.w	8012a9c <_vfiprintf_r+0x44>
 8012c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c64:	e71c      	b.n	8012aa0 <_vfiprintf_r+0x48>
 8012c66:	ab03      	add	r3, sp, #12
 8012c68:	9300      	str	r3, [sp, #0]
 8012c6a:	462a      	mov	r2, r5
 8012c6c:	4b05      	ldr	r3, [pc, #20]	; (8012c84 <_vfiprintf_r+0x22c>)
 8012c6e:	a904      	add	r1, sp, #16
 8012c70:	4630      	mov	r0, r6
 8012c72:	f7fc f947 	bl	800ef04 <_printf_i>
 8012c76:	e7e4      	b.n	8012c42 <_vfiprintf_r+0x1ea>
 8012c78:	08013838 	.word	0x08013838
 8012c7c:	08013842 	.word	0x08013842
 8012c80:	0800e9bd 	.word	0x0800e9bd
 8012c84:	08012a35 	.word	0x08012a35
 8012c88:	0801383e 	.word	0x0801383e

08012c8c <__swbuf_r>:
 8012c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c8e:	460e      	mov	r6, r1
 8012c90:	4614      	mov	r4, r2
 8012c92:	4605      	mov	r5, r0
 8012c94:	b118      	cbz	r0, 8012c9e <__swbuf_r+0x12>
 8012c96:	6a03      	ldr	r3, [r0, #32]
 8012c98:	b90b      	cbnz	r3, 8012c9e <__swbuf_r+0x12>
 8012c9a:	f7fc fcf1 	bl	800f680 <__sinit>
 8012c9e:	69a3      	ldr	r3, [r4, #24]
 8012ca0:	60a3      	str	r3, [r4, #8]
 8012ca2:	89a3      	ldrh	r3, [r4, #12]
 8012ca4:	071a      	lsls	r2, r3, #28
 8012ca6:	d525      	bpl.n	8012cf4 <__swbuf_r+0x68>
 8012ca8:	6923      	ldr	r3, [r4, #16]
 8012caa:	b31b      	cbz	r3, 8012cf4 <__swbuf_r+0x68>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	6922      	ldr	r2, [r4, #16]
 8012cb0:	1a98      	subs	r0, r3, r2
 8012cb2:	6963      	ldr	r3, [r4, #20]
 8012cb4:	b2f6      	uxtb	r6, r6
 8012cb6:	4283      	cmp	r3, r0
 8012cb8:	4637      	mov	r7, r6
 8012cba:	dc04      	bgt.n	8012cc6 <__swbuf_r+0x3a>
 8012cbc:	4621      	mov	r1, r4
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	f7ff fa3a 	bl	8012138 <_fflush_r>
 8012cc4:	b9e0      	cbnz	r0, 8012d00 <__swbuf_r+0x74>
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	60a3      	str	r3, [r4, #8]
 8012ccc:	6823      	ldr	r3, [r4, #0]
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	6022      	str	r2, [r4, #0]
 8012cd2:	701e      	strb	r6, [r3, #0]
 8012cd4:	6962      	ldr	r2, [r4, #20]
 8012cd6:	1c43      	adds	r3, r0, #1
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d004      	beq.n	8012ce6 <__swbuf_r+0x5a>
 8012cdc:	89a3      	ldrh	r3, [r4, #12]
 8012cde:	07db      	lsls	r3, r3, #31
 8012ce0:	d506      	bpl.n	8012cf0 <__swbuf_r+0x64>
 8012ce2:	2e0a      	cmp	r6, #10
 8012ce4:	d104      	bne.n	8012cf0 <__swbuf_r+0x64>
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	4628      	mov	r0, r5
 8012cea:	f7ff fa25 	bl	8012138 <_fflush_r>
 8012cee:	b938      	cbnz	r0, 8012d00 <__swbuf_r+0x74>
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 f806 	bl	8012d08 <__swsetup_r>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d0d5      	beq.n	8012cac <__swbuf_r+0x20>
 8012d00:	f04f 37ff 	mov.w	r7, #4294967295
 8012d04:	e7f4      	b.n	8012cf0 <__swbuf_r+0x64>
	...

08012d08 <__swsetup_r>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	4b2a      	ldr	r3, [pc, #168]	; (8012db4 <__swsetup_r+0xac>)
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	6818      	ldr	r0, [r3, #0]
 8012d10:	460c      	mov	r4, r1
 8012d12:	b118      	cbz	r0, 8012d1c <__swsetup_r+0x14>
 8012d14:	6a03      	ldr	r3, [r0, #32]
 8012d16:	b90b      	cbnz	r3, 8012d1c <__swsetup_r+0x14>
 8012d18:	f7fc fcb2 	bl	800f680 <__sinit>
 8012d1c:	89a3      	ldrh	r3, [r4, #12]
 8012d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d22:	0718      	lsls	r0, r3, #28
 8012d24:	d422      	bmi.n	8012d6c <__swsetup_r+0x64>
 8012d26:	06d9      	lsls	r1, r3, #27
 8012d28:	d407      	bmi.n	8012d3a <__swsetup_r+0x32>
 8012d2a:	2309      	movs	r3, #9
 8012d2c:	602b      	str	r3, [r5, #0]
 8012d2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d32:	81a3      	strh	r3, [r4, #12]
 8012d34:	f04f 30ff 	mov.w	r0, #4294967295
 8012d38:	e034      	b.n	8012da4 <__swsetup_r+0x9c>
 8012d3a:	0758      	lsls	r0, r3, #29
 8012d3c:	d512      	bpl.n	8012d64 <__swsetup_r+0x5c>
 8012d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d40:	b141      	cbz	r1, 8012d54 <__swsetup_r+0x4c>
 8012d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d46:	4299      	cmp	r1, r3
 8012d48:	d002      	beq.n	8012d50 <__swsetup_r+0x48>
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	f7fd fc56 	bl	80105fc <_free_r>
 8012d50:	2300      	movs	r3, #0
 8012d52:	6363      	str	r3, [r4, #52]	; 0x34
 8012d54:	89a3      	ldrh	r3, [r4, #12]
 8012d56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d5a:	81a3      	strh	r3, [r4, #12]
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	6063      	str	r3, [r4, #4]
 8012d60:	6923      	ldr	r3, [r4, #16]
 8012d62:	6023      	str	r3, [r4, #0]
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	f043 0308 	orr.w	r3, r3, #8
 8012d6a:	81a3      	strh	r3, [r4, #12]
 8012d6c:	6923      	ldr	r3, [r4, #16]
 8012d6e:	b94b      	cbnz	r3, 8012d84 <__swsetup_r+0x7c>
 8012d70:	89a3      	ldrh	r3, [r4, #12]
 8012d72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d7a:	d003      	beq.n	8012d84 <__swsetup_r+0x7c>
 8012d7c:	4621      	mov	r1, r4
 8012d7e:	4628      	mov	r0, r5
 8012d80:	f000 f884 	bl	8012e8c <__smakebuf_r>
 8012d84:	89a0      	ldrh	r0, [r4, #12]
 8012d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d8a:	f010 0301 	ands.w	r3, r0, #1
 8012d8e:	d00a      	beq.n	8012da6 <__swsetup_r+0x9e>
 8012d90:	2300      	movs	r3, #0
 8012d92:	60a3      	str	r3, [r4, #8]
 8012d94:	6963      	ldr	r3, [r4, #20]
 8012d96:	425b      	negs	r3, r3
 8012d98:	61a3      	str	r3, [r4, #24]
 8012d9a:	6923      	ldr	r3, [r4, #16]
 8012d9c:	b943      	cbnz	r3, 8012db0 <__swsetup_r+0xa8>
 8012d9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012da2:	d1c4      	bne.n	8012d2e <__swsetup_r+0x26>
 8012da4:	bd38      	pop	{r3, r4, r5, pc}
 8012da6:	0781      	lsls	r1, r0, #30
 8012da8:	bf58      	it	pl
 8012daa:	6963      	ldrpl	r3, [r4, #20]
 8012dac:	60a3      	str	r3, [r4, #8]
 8012dae:	e7f4      	b.n	8012d9a <__swsetup_r+0x92>
 8012db0:	2000      	movs	r0, #0
 8012db2:	e7f7      	b.n	8012da4 <__swsetup_r+0x9c>
 8012db4:	20000064 	.word	0x20000064

08012db8 <_raise_r>:
 8012db8:	291f      	cmp	r1, #31
 8012dba:	b538      	push	{r3, r4, r5, lr}
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	460d      	mov	r5, r1
 8012dc0:	d904      	bls.n	8012dcc <_raise_r+0x14>
 8012dc2:	2316      	movs	r3, #22
 8012dc4:	6003      	str	r3, [r0, #0]
 8012dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012dce:	b112      	cbz	r2, 8012dd6 <_raise_r+0x1e>
 8012dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012dd4:	b94b      	cbnz	r3, 8012dea <_raise_r+0x32>
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f000 f830 	bl	8012e3c <_getpid_r>
 8012ddc:	462a      	mov	r2, r5
 8012dde:	4601      	mov	r1, r0
 8012de0:	4620      	mov	r0, r4
 8012de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012de6:	f000 b817 	b.w	8012e18 <_kill_r>
 8012dea:	2b01      	cmp	r3, #1
 8012dec:	d00a      	beq.n	8012e04 <_raise_r+0x4c>
 8012dee:	1c59      	adds	r1, r3, #1
 8012df0:	d103      	bne.n	8012dfa <_raise_r+0x42>
 8012df2:	2316      	movs	r3, #22
 8012df4:	6003      	str	r3, [r0, #0]
 8012df6:	2001      	movs	r0, #1
 8012df8:	e7e7      	b.n	8012dca <_raise_r+0x12>
 8012dfa:	2400      	movs	r4, #0
 8012dfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012e00:	4628      	mov	r0, r5
 8012e02:	4798      	blx	r3
 8012e04:	2000      	movs	r0, #0
 8012e06:	e7e0      	b.n	8012dca <_raise_r+0x12>

08012e08 <raise>:
 8012e08:	4b02      	ldr	r3, [pc, #8]	; (8012e14 <raise+0xc>)
 8012e0a:	4601      	mov	r1, r0
 8012e0c:	6818      	ldr	r0, [r3, #0]
 8012e0e:	f7ff bfd3 	b.w	8012db8 <_raise_r>
 8012e12:	bf00      	nop
 8012e14:	20000064 	.word	0x20000064

08012e18 <_kill_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	; (8012e38 <_kill_r+0x20>)
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4604      	mov	r4, r0
 8012e20:	4608      	mov	r0, r1
 8012e22:	4611      	mov	r1, r2
 8012e24:	602b      	str	r3, [r5, #0]
 8012e26:	f7f5 fe31 	bl	8008a8c <_kill>
 8012e2a:	1c43      	adds	r3, r0, #1
 8012e2c:	d102      	bne.n	8012e34 <_kill_r+0x1c>
 8012e2e:	682b      	ldr	r3, [r5, #0]
 8012e30:	b103      	cbz	r3, 8012e34 <_kill_r+0x1c>
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	bd38      	pop	{r3, r4, r5, pc}
 8012e36:	bf00      	nop
 8012e38:	20001430 	.word	0x20001430

08012e3c <_getpid_r>:
 8012e3c:	f7f5 be1e 	b.w	8008a7c <_getpid>

08012e40 <__swhatbuf_r>:
 8012e40:	b570      	push	{r4, r5, r6, lr}
 8012e42:	460c      	mov	r4, r1
 8012e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e48:	2900      	cmp	r1, #0
 8012e4a:	b096      	sub	sp, #88	; 0x58
 8012e4c:	4615      	mov	r5, r2
 8012e4e:	461e      	mov	r6, r3
 8012e50:	da0d      	bge.n	8012e6e <__swhatbuf_r+0x2e>
 8012e52:	89a3      	ldrh	r3, [r4, #12]
 8012e54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012e58:	f04f 0100 	mov.w	r1, #0
 8012e5c:	bf0c      	ite	eq
 8012e5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012e62:	2340      	movne	r3, #64	; 0x40
 8012e64:	2000      	movs	r0, #0
 8012e66:	6031      	str	r1, [r6, #0]
 8012e68:	602b      	str	r3, [r5, #0]
 8012e6a:	b016      	add	sp, #88	; 0x58
 8012e6c:	bd70      	pop	{r4, r5, r6, pc}
 8012e6e:	466a      	mov	r2, sp
 8012e70:	f000 f848 	bl	8012f04 <_fstat_r>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	dbec      	blt.n	8012e52 <__swhatbuf_r+0x12>
 8012e78:	9901      	ldr	r1, [sp, #4]
 8012e7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012e7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012e82:	4259      	negs	r1, r3
 8012e84:	4159      	adcs	r1, r3
 8012e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e8a:	e7eb      	b.n	8012e64 <__swhatbuf_r+0x24>

08012e8c <__smakebuf_r>:
 8012e8c:	898b      	ldrh	r3, [r1, #12]
 8012e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e90:	079d      	lsls	r5, r3, #30
 8012e92:	4606      	mov	r6, r0
 8012e94:	460c      	mov	r4, r1
 8012e96:	d507      	bpl.n	8012ea8 <__smakebuf_r+0x1c>
 8012e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e9c:	6023      	str	r3, [r4, #0]
 8012e9e:	6123      	str	r3, [r4, #16]
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	6163      	str	r3, [r4, #20]
 8012ea4:	b002      	add	sp, #8
 8012ea6:	bd70      	pop	{r4, r5, r6, pc}
 8012ea8:	ab01      	add	r3, sp, #4
 8012eaa:	466a      	mov	r2, sp
 8012eac:	f7ff ffc8 	bl	8012e40 <__swhatbuf_r>
 8012eb0:	9900      	ldr	r1, [sp, #0]
 8012eb2:	4605      	mov	r5, r0
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f7fd fc15 	bl	80106e4 <_malloc_r>
 8012eba:	b948      	cbnz	r0, 8012ed0 <__smakebuf_r+0x44>
 8012ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ec0:	059a      	lsls	r2, r3, #22
 8012ec2:	d4ef      	bmi.n	8012ea4 <__smakebuf_r+0x18>
 8012ec4:	f023 0303 	bic.w	r3, r3, #3
 8012ec8:	f043 0302 	orr.w	r3, r3, #2
 8012ecc:	81a3      	strh	r3, [r4, #12]
 8012ece:	e7e3      	b.n	8012e98 <__smakebuf_r+0xc>
 8012ed0:	89a3      	ldrh	r3, [r4, #12]
 8012ed2:	6020      	str	r0, [r4, #0]
 8012ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ed8:	81a3      	strh	r3, [r4, #12]
 8012eda:	9b00      	ldr	r3, [sp, #0]
 8012edc:	6163      	str	r3, [r4, #20]
 8012ede:	9b01      	ldr	r3, [sp, #4]
 8012ee0:	6120      	str	r0, [r4, #16]
 8012ee2:	b15b      	cbz	r3, 8012efc <__smakebuf_r+0x70>
 8012ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ee8:	4630      	mov	r0, r6
 8012eea:	f000 f81d 	bl	8012f28 <_isatty_r>
 8012eee:	b128      	cbz	r0, 8012efc <__smakebuf_r+0x70>
 8012ef0:	89a3      	ldrh	r3, [r4, #12]
 8012ef2:	f023 0303 	bic.w	r3, r3, #3
 8012ef6:	f043 0301 	orr.w	r3, r3, #1
 8012efa:	81a3      	strh	r3, [r4, #12]
 8012efc:	89a3      	ldrh	r3, [r4, #12]
 8012efe:	431d      	orrs	r5, r3
 8012f00:	81a5      	strh	r5, [r4, #12]
 8012f02:	e7cf      	b.n	8012ea4 <__smakebuf_r+0x18>

08012f04 <_fstat_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4d07      	ldr	r5, [pc, #28]	; (8012f24 <_fstat_r+0x20>)
 8012f08:	2300      	movs	r3, #0
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	4608      	mov	r0, r1
 8012f0e:	4611      	mov	r1, r2
 8012f10:	602b      	str	r3, [r5, #0]
 8012f12:	f7f5 fdfe 	bl	8008b12 <_fstat>
 8012f16:	1c43      	adds	r3, r0, #1
 8012f18:	d102      	bne.n	8012f20 <_fstat_r+0x1c>
 8012f1a:	682b      	ldr	r3, [r5, #0]
 8012f1c:	b103      	cbz	r3, 8012f20 <_fstat_r+0x1c>
 8012f1e:	6023      	str	r3, [r4, #0]
 8012f20:	bd38      	pop	{r3, r4, r5, pc}
 8012f22:	bf00      	nop
 8012f24:	20001430 	.word	0x20001430

08012f28 <_isatty_r>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4d06      	ldr	r5, [pc, #24]	; (8012f44 <_isatty_r+0x1c>)
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	4604      	mov	r4, r0
 8012f30:	4608      	mov	r0, r1
 8012f32:	602b      	str	r3, [r5, #0]
 8012f34:	f7f5 fdfd 	bl	8008b32 <_isatty>
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	d102      	bne.n	8012f42 <_isatty_r+0x1a>
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	b103      	cbz	r3, 8012f42 <_isatty_r+0x1a>
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	20001430 	.word	0x20001430

08012f48 <_init>:
 8012f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f4a:	bf00      	nop
 8012f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f4e:	bc08      	pop	{r3}
 8012f50:	469e      	mov	lr, r3
 8012f52:	4770      	bx	lr

08012f54 <_fini>:
 8012f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f56:	bf00      	nop
 8012f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f5a:	bc08      	pop	{r3}
 8012f5c:	469e      	mov	lr, r3
 8012f5e:	4770      	bx	lr
