
TestModuleFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007370  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d0  080078d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080078d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  20000068  08007940  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  08007940  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147d8  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bff  00000000  00000000  000348b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  000374b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef2  00000000  00000000  000387e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f95d  00000000  00000000  000396d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bd0  00000000  00000000  0005902f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90ad  00000000  00000000  0006ebff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005880  00000000  00000000  00137cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013d52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007538 	.word	0x08007538

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007538 	.word	0x08007538

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Set_A1_PWM>:
#define SET_A3_PWM(x)    TIM1->CCR3 = x

#define SET_B_PWM(x)     TIM3->CCR1 = x; TIM3->CCR2 = x; TIM3->CCR3 = x;

 void Set_A1_PWM (uint8_t val)
 {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	SET_A1_PWM(val);
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <Set_A1_PWM+0x1c>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	6353      	str	r3, [r2, #52]	; 0x34
	On_A1 ();
 80005dc:	f000 f826 	bl	800062c <On_A1>
 }
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40012c00 	.word	0x40012c00

080005ec <Set_A2_PWM>:

 void Set_A2_PWM (uint8_t val)
 {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	 SET_A2_PWM(val);
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <Set_A2_PWM+0x1c>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	6393      	str	r3, [r2, #56]	; 0x38
	 On_A2 ();
 80005fc:	f000 f820 	bl	8000640 <On_A2>
 }
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40012c00 	.word	0x40012c00

0800060c <Set_A3_PWM>:


void Set_A3_PWM (uint8_t val)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	SET_A3_PWM(val);
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <Set_A3_PWM+0x1c>)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	63d3      	str	r3, [r2, #60]	; 0x3c
	On_A3 ();
 800061c:	f000 f81a 	bl	8000654 <On_A3>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40012c00 	.word	0x40012c00

0800062c <On_A1>:
	SET_B1_PWM(val);
	On_B3 ();
}

void On_A1 (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <On_A1+0x10>)
 8000634:	f002 fe40 	bl	80032b8 <HAL_TIM_PWM_Start>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000053c 	.word	0x2000053c

08000640 <On_A2>:


void On_A2 (void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000644:	2104      	movs	r1, #4
 8000646:	4802      	ldr	r0, [pc, #8]	; (8000650 <On_A2+0x10>)
 8000648:	f002 fe36 	bl	80032b8 <HAL_TIM_PWM_Start>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000053c 	.word	0x2000053c

08000654 <On_A3>:

void On_A3 (void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000658:	2108      	movs	r1, #8
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <On_A3+0x10>)
 800065c:	f002 fe2c 	bl	80032b8 <HAL_TIM_PWM_Start>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000053c 	.word	0x2000053c

08000668 <On_B1>:

void On_B1 (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800066c:	2100      	movs	r1, #0
 800066e:	4802      	ldr	r0, [pc, #8]	; (8000678 <On_B1+0x10>)
 8000670:	f002 fe22 	bl	80032b8 <HAL_TIM_PWM_Start>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000588 	.word	0x20000588

0800067c <On_B2>:

void On_B2 (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000680:	2104      	movs	r1, #4
 8000682:	4802      	ldr	r0, [pc, #8]	; (800068c <On_B2+0x10>)
 8000684:	f002 fe18 	bl	80032b8 <HAL_TIM_PWM_Start>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000588 	.word	0x20000588

08000690 <On_B3>:

void On_B3 (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000694:	2108      	movs	r1, #8
 8000696:	4802      	ldr	r0, [pc, #8]	; (80006a0 <On_B3+0x10>)
 8000698:	f002 fe0e 	bl	80032b8 <HAL_TIM_PWM_Start>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000588 	.word	0x20000588

080006a4 <Off_A1>:

void Off_A1 (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80006a8:	2100      	movs	r1, #0
 80006aa:	4802      	ldr	r0, [pc, #8]	; (80006b4 <Off_A1+0x10>)
 80006ac:	f002 ff04 	bl	80034b8 <HAL_TIM_PWM_Stop>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000053c 	.word	0x2000053c

080006b8 <Off_A2>:

void Off_A2 (void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80006bc:	2104      	movs	r1, #4
 80006be:	4802      	ldr	r0, [pc, #8]	; (80006c8 <Off_A2+0x10>)
 80006c0:	f002 fefa 	bl	80034b8 <HAL_TIM_PWM_Stop>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000053c 	.word	0x2000053c

080006cc <Off_A3>:

void Off_A3 (void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80006d0:	2108      	movs	r1, #8
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <Off_A3+0x10>)
 80006d4:	f002 fef0 	bl	80034b8 <HAL_TIM_PWM_Stop>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000053c 	.word	0x2000053c

080006e0 <Off_B1>:

void Off_B1 (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <Off_B1+0x10>)
 80006e8:	f002 fee6 	bl	80034b8 <HAL_TIM_PWM_Stop>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000588 	.word	0x20000588

080006f4 <Off_B2>:

void Off_B2 (void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80006f8:	2104      	movs	r1, #4
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <Off_B2+0x10>)
 80006fc:	f002 fedc 	bl	80034b8 <HAL_TIM_PWM_Stop>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000588 	.word	0x20000588

08000708 <Off_B3>:

void Off_B3 (void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800070c:	2108      	movs	r1, #8
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <Off_B3+0x10>)
 8000710:	f002 fed2 	bl	80034b8 <HAL_TIM_PWM_Stop>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000588 	.word	0x20000588

0800071c <Dis_M1>:

void Dis_M1 (void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f001 fd27 	bl	800217c <HAL_GPIO_WritePin>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <Dsi_M2>:

void Dsi_M2 (void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, M2_DIS_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f001 fd1c 	bl	800217c <HAL_GPIO_WritePin>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <En_M1>:

void En_M1 (void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f001 fd11 	bl	800217c <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <En_M2>:

void En_M2 (void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f001 fd06 	bl	800217c <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <_DoInit+0x8c>)
 800077c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2203      	movs	r2, #3
 8000782:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2203      	movs	r2, #3
 8000788:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <_DoInit+0x90>)
 800078e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <_DoInit+0x94>)
 8000794:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_DoInit+0x90>)
 80007b4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <_DoInit+0x98>)
 80007ba:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2210      	movs	r2, #16
 80007c0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3307      	adds	r3, #7
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <_DoInit+0x9c>)
 80007da:	6810      	ldr	r0, [r2, #0]
 80007dc:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <_DoInit+0xa0>)
 80007e2:	6810      	ldr	r0, [r2, #0]
 80007e4:	6018      	str	r0, [r3, #0]
 80007e6:	8891      	ldrh	r1, [r2, #4]
 80007e8:	7992      	ldrb	r2, [r2, #6]
 80007ea:	8099      	strh	r1, [r3, #4]
 80007ec:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2220      	movs	r2, #32
 80007f2:	719a      	strb	r2, [r3, #6]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000084 	.word	0x20000084
 8000804:	08007550 	.word	0x08007550
 8000808:	2000012c 	.word	0x2000012c
 800080c:	2000052c 	.word	0x2000052c
 8000810:	0800755c 	.word	0x0800755c
 8000814:	08007560 	.word	0x08007560

08000818 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	429a      	cmp	r2, r3
 800083a:	d905      	bls.n	8000848 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	3b01      	subs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	e007      	b.n	8000858 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	6939      	ldr	r1, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	1acb      	subs	r3, r1, r3
 8000852:	4413      	add	r3, r2
 8000854:	3b01      	subs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	69fa      	ldr	r2, [r7, #28]
 8000862:	4293      	cmp	r3, r2
 8000864:	bf28      	it	cs
 8000866:	4613      	movcs	r3, r2
 8000868:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4293      	cmp	r3, r2
 8000870:	bf28      	it	cs
 8000872:	4613      	movcs	r3, r2
 8000874:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	4413      	add	r3, r2
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	4618      	mov	r0, r3
 8000884:	f006 f8a5 	bl	80069d2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	4413      	add	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	4413      	add	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	4413      	add	r3, r2
 80008a6:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d101      	bne.n	80008b6 <_WriteBlocking+0x9e>
      WrOff = 0u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1b5      	bne.n	800082e <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 80008c2:	69bb      	ldr	r3, [r7, #24]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d90e      	bls.n	800090e <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	4413      	add	r3, r2
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 f868 	bl	80069d2 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	441a      	add	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800090c:	e01a      	b.n	8000944 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4413      	add	r3, r2
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	4618      	mov	r0, r3
 8000920:	f006 f857 	bl	80069d2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6858      	ldr	r0, [r3, #4]
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	4413      	add	r3, r2
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4619      	mov	r1, r3
 800093a:	f006 f84a 	bl	80069d2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	60da      	str	r2, [r3, #12]
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d808      	bhi.n	800097a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4413      	add	r3, r2
 8000974:	3b01      	subs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e004      	b.n	8000984 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	3b01      	subs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000984:	697b      	ldr	r3, [r7, #20]
}
 8000986:	4618      	mov	r0, r3
 8000988:	371c      	adds	r7, #28
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <SEGGER_RTT_WriteNoLock+0x9c>)
 80009b2:	4413      	add	r3, r2
 80009b4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d029      	beq.n	8000a12 <SEGGER_RTT_WriteNoLock+0x7e>
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d82e      	bhi.n	8000a20 <SEGGER_RTT_WriteNoLock+0x8c>
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <SEGGER_RTT_WriteNoLock+0x38>
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d013      	beq.n	80009f2 <SEGGER_RTT_WriteNoLock+0x5e>
 80009ca:	e029      	b.n	8000a20 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80009cc:	6978      	ldr	r0, [r7, #20]
 80009ce:	f7ff ffbd 	bl	800094c <_GetAvailWriteSpace>
 80009d2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d202      	bcs.n	80009e2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80009e0:	e021      	b.n	8000a26 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	69b9      	ldr	r1, [r7, #24]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff6e 	bl	80008cc <_WriteNoCheck>
    break;
 80009f0:	e019      	b.n	8000a26 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ffaa 	bl	800094c <_GetAvailWriteSpace>
 80009f8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	bf28      	it	cs
 8000a02:	4613      	movcs	r3, r2
 8000a04:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	69b9      	ldr	r1, [r7, #24]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff5e 	bl	80008cc <_WriteNoCheck>
    break;
 8000a10:	e009      	b.n	8000a26 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	69b9      	ldr	r1, [r7, #24]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff fefe 	bl	8000818 <_WriteBlocking>
 8000a1c:	61f8      	str	r0, [r7, #28]
    break;
 8000a1e:	e002      	b.n	8000a26 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    break;
 8000a24:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000a26:	69fb      	ldr	r3, [r7, #28]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000084 	.word	0x20000084

08000a34 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <SEGGER_RTT_Write+0x44>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <SEGGER_RTT_Write+0x18>
 8000a48:	f7ff fe94 	bl	8000774 <_DoInit>
  SEGGER_RTT_LOCK();
 8000a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8000a50:	f04f 0120 	mov.w	r1, #32
 8000a54:	f381 8811 	msr	BASEPRI, r1
 8000a58:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff ff98 	bl	8000994 <SEGGER_RTT_WriteNoLock>
 8000a64:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000a6c:	693b      	ldr	r3, [r7, #16]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000084 	.word	0x20000084

08000a7c <_write>:
*   Low-level write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write(int file, char *ptr, int len) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff ffd0 	bl	8000a34 <SEGGER_RTT_Write>
  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_UART_RxCpltCallback>:

#define MAX_LEN  10
uint8_t getVal = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <HAL_UART_RxCpltCallback+0xf8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d16d      	bne.n	8000b8e <HAL_UART_RxCpltCallback+0xee>
	{
		if (rxByte == '\n')
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <HAL_UART_RxCpltCallback+0xfc>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d153      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0xc2>
		{
			numCMD = 0;
 8000aba:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <HAL_UART_RxCpltCallback+0x100>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < NUM_CMD; i++)
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <HAL_UART_RxCpltCallback+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e03a      	b.n	8000b3e <HAL_UART_RxCpltCallback+0x9e>
			{
				if (strstr((char*)&UART_Data.rxBuff[0], (char*) &listCMD[i][0])!= 0)
 8000ac8:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <HAL_UART_RxCpltCallback+0x104>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <HAL_UART_RxCpltCallback+0x108>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <HAL_UART_RxCpltCallback+0x10c>)
 8000adc:	f005 feef 	bl	80068be <strstr>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d026      	beq.n	8000b34 <HAL_UART_RxCpltCallback+0x94>
				{
					numCMD = i + 1;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_UART_RxCpltCallback+0x104>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <HAL_UART_RxCpltCallback+0x100>)
 8000af2:	701a      	strb	r2, [r3, #0]

				    for(uint8_t pos_val = 0; pos_val < MAX_LEN; pos_val++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e018      	b.n	8000b2c <HAL_UART_RxCpltCallback+0x8c>
				    {
				      if(UART_Data.rxBuff[pos_val] == 0x20)
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000afe:	4413      	add	r3, r2
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	2b20      	cmp	r3, #32
 8000b04:	d10f      	bne.n	8000b26 <HAL_UART_RxCpltCallback+0x86>
				      {
				    	  pos_val++;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
				    	  getVal = atoi((uint8_t*)&UART_Data.rxBuff[pos_val]);
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4a28      	ldr	r2, [pc, #160]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000b10:	4413      	add	r3, r2
 8000b12:	3301      	adds	r3, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 fd23 	bl	8006560 <atoi>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <HAL_UART_RxCpltCallback+0x114>)
 8000b20:	701a      	strb	r2, [r3, #0]
				    	  break;
 8000b22:	bf00      	nop
				      }
				    }
					break;
 8000b24:	e00f      	b.n	8000b46 <HAL_UART_RxCpltCallback+0xa6>
				    for(uint8_t pos_val = 0; pos_val < MAX_LEN; pos_val++)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b09      	cmp	r3, #9
 8000b30:	d9e3      	bls.n	8000afa <HAL_UART_RxCpltCallback+0x5a>
					break;
 8000b32:	e008      	b.n	8000b46 <HAL_UART_RxCpltCallback+0xa6>
			for (i = 0; i < NUM_CMD; i++)
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_UART_RxCpltCallback+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_UART_RxCpltCallback+0x104>)
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_RxCpltCallback+0x104>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b15      	cmp	r3, #21
 8000b44:	ddc0      	ble.n	8000ac8 <HAL_UART_RxCpltCallback+0x28>
				}
			}
			if(numCMD == 0)
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_UART_RxCpltCallback+0x100>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <HAL_UART_RxCpltCallback+0xb4>
			{
				numCMD = 0xFF;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_UART_RxCpltCallback+0x100>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	701a      	strb	r2, [r3, #0]
			}
			memset((char*) &UART_Data, 0x00, sizeof(UART_Data));
 8000b54:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000b5c:	f005 fea7 	bl	80068ae <memset>
 8000b60:	e010      	b.n	8000b84 <HAL_UART_RxCpltCallback+0xe4>
		}
		else
		{
			//if(rxByte != '\r')
			{
			  UART_Data.rxBuff[UART_Data.rxCntBuff] = rxByte;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000b64:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_UART_RxCpltCallback+0xfc>)
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000b70:	440b      	add	r3, r1
 8000b72:	705a      	strb	r2, [r3, #1]
			  UART_Data.rxCntBuff++;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000b76:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_UART_RxCpltCallback+0x110>)
 8000b80:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			}
		}
		HAL_UART_Receive_IT(&huart3,  &rxByte, 1);
 8000b84:	2201      	movs	r2, #1
 8000b86:	4905      	ldr	r1, [pc, #20]	; (8000b9c <HAL_UART_RxCpltCallback+0xfc>)
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_UART_RxCpltCallback+0x118>)
 8000b8a:	f003 fd89 	bl	80046a0 <HAL_UART_Receive_IT>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004800 	.word	0x40004800
 8000b9c:	20000886 	.word	0x20000886
 8000ba0:	20000887 	.word	0x20000887
 8000ba4:	20000888 	.word	0x20000888
 8000ba8:	08007678 	.word	0x08007678
 8000bac:	20000785 	.word	0x20000785
 8000bb0:	20000784 	.word	0x20000784
 8000bb4:	2000088c 	.word	0x2000088c
 8000bb8:	200006f4 	.word	0x200006f4

08000bbc <SendRsp>:
void SendRsp( char *str)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen((char*)str), 100);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb2b 	bl	8000220 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <SendRsp+0x30>)
 8000bd4:	f003 fcce 	bl	8004574 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n", 2, 100);
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4904      	ldr	r1, [pc, #16]	; (8000bf0 <SendRsp+0x34>)
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <SendRsp+0x30>)
 8000be0:	f003 fcc8 	bl	8004574 <HAL_UART_Transmit>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200006f4 	.word	0x200006f4
 8000bf0:	08007568 	.word	0x08007568

08000bf4 <getPWM_Val>:


uint8_t getPWM_Val( uint8_t *getPWM_Val)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  if(getVal > 100)
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <getPWM_Val+0x2c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b64      	cmp	r3, #100	; 0x64
 8000c02:	d904      	bls.n	8000c0e <getPWM_Val+0x1a>
  {
	  SendRsp("Value must be 0..100 ");
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <getPWM_Val+0x30>)
 8000c06:	f7ff ffd9 	bl	8000bbc <SendRsp>
	  return 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e004      	b.n	8000c18 <getPWM_Val+0x24>
  }

   *getPWM_Val = getVal;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <getPWM_Val+0x2c>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	701a      	strb	r2, [r3, #0]
   return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000088c 	.word	0x2000088c
 8000c24:	0800756c 	.word	0x0800756c

08000c28 <CMD_Handler>:
uint8_t setVal = 0;

void CMD_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if(numCMD == 0)
 8000c2c:	4b78      	ldr	r3, [pc, #480]	; (8000e10 <CMD_Handler+0x1e8>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80eb 	beq.w	8000e0c <CMD_Handler+0x1e4>
	{
		return;
	}

	switch(numCMD)
 8000c36:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <CMD_Handler+0x1e8>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	2b13      	cmp	r3, #19
 8000c3e:	f200 80d6 	bhi.w	8000dee <CMD_Handler+0x1c6>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <CMD_Handler+0x20>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c99 	.word	0x08000c99
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000ce5 	.word	0x08000ce5
 8000c54:	08000d0b 	.word	0x08000d0b
 8000c58:	08000d2f 	.word	0x08000d2f
 8000c5c:	08000d3b 	.word	0x08000d3b
 8000c60:	08000d47 	.word	0x08000d47
 8000c64:	08000d53 	.word	0x08000d53
 8000c68:	08000d5f 	.word	0x08000d5f
 8000c6c:	08000d6b 	.word	0x08000d6b
 8000c70:	08000d77 	.word	0x08000d77
 8000c74:	08000d83 	.word	0x08000d83
 8000c78:	08000d8f 	.word	0x08000d8f
 8000c7c:	08000d9b 	.word	0x08000d9b
 8000c80:	08000da7 	.word	0x08000da7
 8000c84:	08000db3 	.word	0x08000db3
 8000c88:	08000dbf 	.word	0x08000dbf
 8000c8c:	08000dcb 	.word	0x08000dcb
 8000c90:	08000dd7 	.word	0x08000dd7
 8000c94:	08000de3 	.word	0x08000de3
	{
	   case SET_A1:
		   if( getPWM_Val(&setVal))
 8000c98:	485e      	ldr	r0, [pc, #376]	; (8000e14 <CMD_Handler+0x1ec>)
 8000c9a:	f7ff ffab 	bl	8000bf4 <getPWM_Val>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 80a8 	beq.w	8000df6 <CMD_Handler+0x1ce>
		   {
			   Set_A1_PWM(setVal);
 8000ca6:	4b5b      	ldr	r3, [pc, #364]	; (8000e14 <CMD_Handler+0x1ec>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc8e 	bl	80005cc <Set_A1_PWM>
			   printf("Set PWM A1 to %d \n", setVal ); //SendRsp("Set PWM A1");
 8000cb0:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <CMD_Handler+0x1ec>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4858      	ldr	r0, [pc, #352]	; (8000e18 <CMD_Handler+0x1f0>)
 8000cb8:	f005 fda4 	bl	8006804 <iprintf>
		   }
	   break;
 8000cbc:	e09b      	b.n	8000df6 <CMD_Handler+0x1ce>

	   case	SET_A2:
		   if( getPWM_Val(&setVal))
 8000cbe:	4855      	ldr	r0, [pc, #340]	; (8000e14 <CMD_Handler+0x1ec>)
 8000cc0:	f7ff ff98 	bl	8000bf4 <getPWM_Val>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8097 	beq.w	8000dfa <CMD_Handler+0x1d2>
		   {
		  	   Set_A2_PWM(setVal);
 8000ccc:	4b51      	ldr	r3, [pc, #324]	; (8000e14 <CMD_Handler+0x1ec>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc8b 	bl	80005ec <Set_A2_PWM>
		  	   printf("Set PWM A2 to %d \n", setVal ); //SendRsp("Set PWM A1");
 8000cd6:	4b4f      	ldr	r3, [pc, #316]	; (8000e14 <CMD_Handler+0x1ec>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	484f      	ldr	r0, [pc, #316]	; (8000e1c <CMD_Handler+0x1f4>)
 8000cde:	f005 fd91 	bl	8006804 <iprintf>
		   }
	   break;
 8000ce2:	e08a      	b.n	8000dfa <CMD_Handler+0x1d2>

	   case SET_A3:
		   if( getPWM_Val(&setVal))
 8000ce4:	484b      	ldr	r0, [pc, #300]	; (8000e14 <CMD_Handler+0x1ec>)
 8000ce6:	f7ff ff85 	bl	8000bf4 <getPWM_Val>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8086 	beq.w	8000dfe <CMD_Handler+0x1d6>
		   {
		     	Set_A3_PWM(setVal);
 8000cf2:	4b48      	ldr	r3, [pc, #288]	; (8000e14 <CMD_Handler+0x1ec>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc88 	bl	800060c <Set_A3_PWM>
		   		printf("Set PWM A3 to %d \n", setVal ); //SendRsp("Set PWM A1");
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <CMD_Handler+0x1ec>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	4847      	ldr	r0, [pc, #284]	; (8000e20 <CMD_Handler+0x1f8>)
 8000d04:	f005 fd7e 	bl	8006804 <iprintf>
		   }
	   break;
 8000d08:	e079      	b.n	8000dfe <CMD_Handler+0x1d6>
	   case	SET_B:
		   if( getPWM_Val(&setVal))
 8000d0a:	4842      	ldr	r0, [pc, #264]	; (8000e14 <CMD_Handler+0x1ec>)
 8000d0c:	f7ff ff72 	bl	8000bf4 <getPWM_Val>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d075      	beq.n	8000e02 <CMD_Handler+0x1da>
		    {
		   		Set_A3_PWM(setVal);
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <CMD_Handler+0x1ec>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc76 	bl	800060c <Set_A3_PWM>
		   		printf("Set PWM B to %d \n", setVal ); //SendRsp("Set PWM A1");
 8000d20:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <CMD_Handler+0x1ec>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	483f      	ldr	r0, [pc, #252]	; (8000e24 <CMD_Handler+0x1fc>)
 8000d28:	f005 fd6c 	bl	8006804 <iprintf>
		    }
	   break;
 8000d2c:	e069      	b.n	8000e02 <CMD_Handler+0x1da>
	   case	ON_A1:
		   On_A1();
 8000d2e:	f7ff fc7d 	bl	800062c <On_A1>
		   SendRsp("ON PWM A1");
 8000d32:	483d      	ldr	r0, [pc, #244]	; (8000e28 <CMD_Handler+0x200>)
 8000d34:	f7ff ff42 	bl	8000bbc <SendRsp>
	   break;
 8000d38:	e064      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	ON_A2:
		   On_A2();
 8000d3a:	f7ff fc81 	bl	8000640 <On_A2>
		   SendRsp("ON PWM A2");
 8000d3e:	483b      	ldr	r0, [pc, #236]	; (8000e2c <CMD_Handler+0x204>)
 8000d40:	f7ff ff3c 	bl	8000bbc <SendRsp>
	   break;
 8000d44:	e05e      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	ON_A3:
		   On_A3();
 8000d46:	f7ff fc85 	bl	8000654 <On_A3>
		   SendRsp("ON PWM A3");
 8000d4a:	4839      	ldr	r0, [pc, #228]	; (8000e30 <CMD_Handler+0x208>)
 8000d4c:	f7ff ff36 	bl	8000bbc <SendRsp>
	   break;
 8000d50:	e058      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	ON_B1:
		   On_B1();
 8000d52:	f7ff fc89 	bl	8000668 <On_B1>
		   SendRsp("ON PWM B1");
 8000d56:	4837      	ldr	r0, [pc, #220]	; (8000e34 <CMD_Handler+0x20c>)
 8000d58:	f7ff ff30 	bl	8000bbc <SendRsp>
	   break;
 8000d5c:	e052      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	ON_B2:
	   		On_B2();
 8000d5e:	f7ff fc8d 	bl	800067c <On_B2>
	   		SendRsp("ON PWM B2");
 8000d62:	4835      	ldr	r0, [pc, #212]	; (8000e38 <CMD_Handler+0x210>)
 8000d64:	f7ff ff2a 	bl	8000bbc <SendRsp>
	   break;
 8000d68:	e04c      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	ON_B3:
	   	   	On_B3();
 8000d6a:	f7ff fc91 	bl	8000690 <On_B3>
	   	   	SendRsp("ON PWM B3");
 8000d6e:	4833      	ldr	r0, [pc, #204]	; (8000e3c <CMD_Handler+0x214>)
 8000d70:	f7ff ff24 	bl	8000bbc <SendRsp>
	   break;
 8000d74:	e046      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	OFF_A1:
		   Off_A1();
 8000d76:	f7ff fc95 	bl	80006a4 <Off_A1>
		   SendRsp("OFF A1");
 8000d7a:	4831      	ldr	r0, [pc, #196]	; (8000e40 <CMD_Handler+0x218>)
 8000d7c:	f7ff ff1e 	bl	8000bbc <SendRsp>
	   break;
 8000d80:	e040      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	OFF_A2:
		   Off_A2();
 8000d82:	f7ff fc99 	bl	80006b8 <Off_A2>
		   SendRsp("OFF A2");
 8000d86:	482f      	ldr	r0, [pc, #188]	; (8000e44 <CMD_Handler+0x21c>)
 8000d88:	f7ff ff18 	bl	8000bbc <SendRsp>
	   break;
 8000d8c:	e03a      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	OFF_A3:
		   Off_A3();
 8000d8e:	f7ff fc9d 	bl	80006cc <Off_A3>
		   SendRsp("OFF A3");
 8000d92:	482d      	ldr	r0, [pc, #180]	; (8000e48 <CMD_Handler+0x220>)
 8000d94:	f7ff ff12 	bl	8000bbc <SendRsp>
	   break;
 8000d98:	e034      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	OFF_B1:
		    Off_B1();
 8000d9a:	f7ff fca1 	bl	80006e0 <Off_B1>
		    SendRsp("OFF B1");
 8000d9e:	482b      	ldr	r0, [pc, #172]	; (8000e4c <CMD_Handler+0x224>)
 8000da0:	f7ff ff0c 	bl	8000bbc <SendRsp>
	   break;
 8000da4:	e02e      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	OFF_B2:
	   		Off_B2();
 8000da6:	f7ff fca5 	bl	80006f4 <Off_B2>
	   		SendRsp("OFF B2");
 8000daa:	4829      	ldr	r0, [pc, #164]	; (8000e50 <CMD_Handler+0x228>)
 8000dac:	f7ff ff06 	bl	8000bbc <SendRsp>
	   break;
 8000db0:	e028      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	OFF_B3:
	   	   	Off_B3();
 8000db2:	f7ff fca9 	bl	8000708 <Off_B3>
	   	   	SendRsp("OFF B3");
 8000db6:	4827      	ldr	r0, [pc, #156]	; (8000e54 <CMD_Handler+0x22c>)
 8000db8:	f7ff ff00 	bl	8000bbc <SendRsp>
	   break;
 8000dbc:	e022      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	DIS_M1:
		   Dis_M1();
 8000dbe:	f7ff fcad 	bl	800071c <Dis_M1>
		   SendRsp("DIS M1");
 8000dc2:	4825      	ldr	r0, [pc, #148]	; (8000e58 <CMD_Handler+0x230>)
 8000dc4:	f7ff fefa 	bl	8000bbc <SendRsp>
	   break;
 8000dc8:	e01c      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case DIS_M2:
		   Dsi_M2();
 8000dca:	f7ff fcb2 	bl	8000732 <Dsi_M2>
		   SendRsp("DIS M2");
 8000dce:	4823      	ldr	r0, [pc, #140]	; (8000e5c <CMD_Handler+0x234>)
 8000dd0:	f7ff fef4 	bl	8000bbc <SendRsp>
	   break;
 8000dd4:	e016      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case EN_M1:
		   En_M1();
 8000dd6:	f7ff fcb7 	bl	8000748 <En_M1>
		   SendRsp("EN M1");
 8000dda:	4821      	ldr	r0, [pc, #132]	; (8000e60 <CMD_Handler+0x238>)
 8000ddc:	f7ff feee 	bl	8000bbc <SendRsp>
	   break;
 8000de0:	e010      	b.n	8000e04 <CMD_Handler+0x1dc>
	   case	EN_M2:
		   En_M2();
 8000de2:	f7ff fcbc 	bl	800075e <En_M2>
		   SendRsp("EN M2");
 8000de6:	481f      	ldr	r0, [pc, #124]	; (8000e64 <CMD_Handler+0x23c>)
 8000de8:	f7ff fee8 	bl	8000bbc <SendRsp>
	   break;
 8000dec:	e00a      	b.n	8000e04 <CMD_Handler+0x1dc>
	   default:     SendRsp("Wrong CMD"); break;
 8000dee:	481e      	ldr	r0, [pc, #120]	; (8000e68 <CMD_Handler+0x240>)
 8000df0:	f7ff fee4 	bl	8000bbc <SendRsp>
 8000df4:	e006      	b.n	8000e04 <CMD_Handler+0x1dc>
	   break;
 8000df6:	bf00      	nop
 8000df8:	e004      	b.n	8000e04 <CMD_Handler+0x1dc>
	   break;
 8000dfa:	bf00      	nop
 8000dfc:	e002      	b.n	8000e04 <CMD_Handler+0x1dc>
	   break;
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <CMD_Handler+0x1dc>
	   break;
 8000e02:	bf00      	nop
	}

	numCMD = 0;
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <CMD_Handler+0x1e8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e000      	b.n	8000e0e <CMD_Handler+0x1e6>
		return;
 8000e0c:	bf00      	nop
}
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000887 	.word	0x20000887
 8000e14:	2000088d 	.word	0x2000088d
 8000e18:	08007584 	.word	0x08007584
 8000e1c:	08007598 	.word	0x08007598
 8000e20:	080075ac 	.word	0x080075ac
 8000e24:	080075c0 	.word	0x080075c0
 8000e28:	080075d4 	.word	0x080075d4
 8000e2c:	080075e0 	.word	0x080075e0
 8000e30:	080075ec 	.word	0x080075ec
 8000e34:	080075f8 	.word	0x080075f8
 8000e38:	08007604 	.word	0x08007604
 8000e3c:	08007610 	.word	0x08007610
 8000e40:	0800761c 	.word	0x0800761c
 8000e44:	08007624 	.word	0x08007624
 8000e48:	0800762c 	.word	0x0800762c
 8000e4c:	08007634 	.word	0x08007634
 8000e50:	0800763c 	.word	0x0800763c
 8000e54:	08007644 	.word	0x08007644
 8000e58:	0800764c 	.word	0x0800764c
 8000e5c:	08007654 	.word	0x08007654
 8000e60:	0800765c 	.word	0x0800765c
 8000e64:	08007664 	.word	0x08007664
 8000e68:	0800766c 	.word	0x0800766c

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fdc1 	bl	80019f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f818 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 fa84 	bl	8001384 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e7c:	f000 f99a 	bl	80011b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e80:	f000 f9e6 	bl	8001250 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e84:	f000 fa32 	bl	80012ec <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000e88:	f000 f858 	bl	8000f3c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e8c:	f000 f922 	bl	80010d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <main+0x34>)
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <main+0x38>)
 8000e96:	f003 fc03 	bl	80046a0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CMD_Handler();
 8000e9a:	f7ff fec5 	bl	8000c28 <CMD_Handler>
 8000e9e:	e7fc      	b.n	8000e9a <main+0x2e>
 8000ea0:	20000886 	.word	0x20000886
 8000ea4:	200006f4 	.word	0x200006f4

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	2238      	movs	r2, #56	; 0x38
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 fcf9 	bl	80068ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f001 f96e 	bl	80021ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ee6:	2328      	movs	r3, #40	; 0x28
 8000ee8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fa0a 	bl	8002314 <HAL_RCC_OscConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f06:	f000 fa95 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2104      	movs	r1, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fd0e 	bl	8002944 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f2e:	f000 fa81 	bl	8001434 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	; 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2234      	movs	r2, #52	; 0x34
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fc99 	bl	80068ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <MX_TIM1_Init+0x190>)
 8000f7e:	4a54      	ldr	r2, [pc, #336]	; (80010d0 <MX_TIM1_Init+0x194>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000f82:	4b52      	ldr	r3, [pc, #328]	; (80010cc <MX_TIM1_Init+0x190>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b50      	ldr	r3, [pc, #320]	; (80010cc <MX_TIM1_Init+0x190>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f8e:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <MX_TIM1_Init+0x190>)
 8000f90:	2264      	movs	r2, #100	; 0x64
 8000f92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <MX_TIM1_Init+0x190>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <MX_TIM1_Init+0x190>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <MX_TIM1_Init+0x190>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa6:	4849      	ldr	r0, [pc, #292]	; (80010cc <MX_TIM1_Init+0x190>)
 8000fa8:	f002 f8d8 	bl	800315c <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fb2:	f000 fa3f 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4842      	ldr	r0, [pc, #264]	; (80010cc <MX_TIM1_Init+0x190>)
 8000fc4:	f002 fc22 	bl	800380c <HAL_TIM_ConfigClockSource>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fce:	f000 fa31 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd2:	483e      	ldr	r0, [pc, #248]	; (80010cc <MX_TIM1_Init+0x190>)
 8000fd4:	f002 f919 	bl	800320a <HAL_TIM_PWM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fde:	f000 fa29 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4835      	ldr	r0, [pc, #212]	; (80010cc <MX_TIM1_Init+0x190>)
 8000ff6:	f003 f94b 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001000:	f000 fa18 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	; 0x60
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 25;
 8001008:	2319      	movs	r3, #25
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <MX_TIM1_Init+0x190>)
 800102a:	f002 fadb 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001034:	f000 f9fe 	bl	8001434 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001040:	2204      	movs	r2, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4821      	ldr	r0, [pc, #132]	; (80010cc <MX_TIM1_Init+0x190>)
 8001046:	f002 facd 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001050:	f000 f9f0 	bl	8001434 <Error_Handler>
  }
  sConfigOC.Pulse = 75;
 8001054:	234b      	movs	r3, #75	; 0x4b
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001058:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105c:	2208      	movs	r2, #8
 800105e:	4619      	mov	r1, r3
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <MX_TIM1_Init+0x190>)
 8001062:	f002 fabf 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800106c:	f000 f9e2 	bl	8001434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <MX_TIM1_Init+0x190>)
 80010ae:	f003 f971 	bl	8004394 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 80010b8:	f000 f9bc 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <MX_TIM1_Init+0x190>)
 80010be:	f000 fa23 	bl	8001508 <HAL_TIM_MspPostInit>

}
 80010c2:	bf00      	nop
 80010c4:	3770      	adds	r7, #112	; 0x70
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000053c 	.word	0x2000053c
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_TIM3_Init+0xd8>)
 80010fa:	4a2d      	ldr	r2, [pc, #180]	; (80011b0 <MX_TIM3_Init+0xdc>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <MX_TIM3_Init+0xd8>)
 8001100:	2203      	movs	r2, #3
 8001102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_TIM3_Init+0xd8>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <MX_TIM3_Init+0xd8>)
 800110c:	2264      	movs	r2, #100	; 0x64
 800110e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_TIM3_Init+0xd8>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_TIM3_Init+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_TIM3_Init+0xd8>)
 800111e:	f002 f874 	bl	800320a <HAL_TIM_PWM_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001128:	f000 f984 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	481c      	ldr	r0, [pc, #112]	; (80011ac <MX_TIM3_Init+0xd8>)
 800113c:	f003 f8a8 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001146:	f000 f975 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114a:	2360      	movs	r3, #96	; 0x60
 800114c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 800114e:	2332      	movs	r3, #50	; 0x32
 8001150:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_TIM3_Init+0xd8>)
 8001162:	f002 fa3f 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800116c:	f000 f962 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2204      	movs	r2, #4
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_TIM3_Init+0xd8>)
 8001178:	f002 fa34 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001182:	f000 f957 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_TIM3_Init+0xd8>)
 800118e:	f002 fa29 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001198:	f000 f94c 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <MX_TIM3_Init+0xd8>)
 800119e:	f000 f9b3 	bl	8001508 <HAL_TIM_MspPostInit>

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000588 	.word	0x20000588
 80011b0:	40000400 	.word	0x40000400

080011b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <MX_USART1_UART_Init+0x94>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <MX_USART1_UART_Init+0x98>)
 80011c2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011d8:	220c      	movs	r2, #12
 80011da:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fa:	4812      	ldr	r0, [pc, #72]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011fc:	f003 f96a 	bl	80044d4 <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001206:	f000 f915 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_USART1_UART_Init+0x90>)
 800120e:	f005 f8dc 	bl	80063ca <HAL_UARTEx_SetTxFifoThreshold>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001218:	f000 f90c 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_USART1_UART_Init+0x90>)
 8001220:	f005 f911 	bl	8006446 <HAL_UARTEx_SetRxFifoThreshold>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800122a:	f000 f903 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART1_UART_Init+0x90>)
 8001230:	f005 f892 	bl	8006358 <HAL_UARTEx_DisableFifoMode>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800123a:	f000 f8fb 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200005d4 	.word	0x200005d4
 8001248:	40013800 	.word	0x40013800
 800124c:	0003d090 	.word	0x0003d090

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <MX_USART2_UART_Init+0x94>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800125c:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <MX_USART2_UART_Init+0x98>)
 800125e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001274:	220c      	movs	r2, #12
 8001276:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001296:	4812      	ldr	r0, [pc, #72]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001298:	f003 f91c 	bl	80044d4 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80012a2:	f000 f8c7 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012aa:	f005 f88e 	bl	80063ca <HAL_UARTEx_SetTxFifoThreshold>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80012b4:	f000 f8be 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012bc:	f005 f8c3 	bl	8006446 <HAL_UARTEx_SetRxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80012c6:	f000 f8b5 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012cc:	f005 f844 	bl	8006358 <HAL_UARTEx_DisableFifoMode>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80012d6:	f000 f8ad 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000664 	.word	0x20000664
 80012e4:	40004400 	.word	0x40004400
 80012e8:	0003d090 	.word	0x0003d090

080012ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <MX_USART3_UART_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001336:	f003 f8cd 	bl	80044d4 <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f000 f878 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001348:	f005 f83f 	bl	80063ca <HAL_UARTEx_SetTxFifoThreshold>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001352:	f000 f86f 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_USART3_UART_Init+0x90>)
 800135a:	f005 f874 	bl	8006446 <HAL_UARTEx_SetRxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 f866 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_USART3_UART_Init+0x90>)
 800136a:	f004 fff5 	bl	8006358 <HAL_UARTEx_DisableFifoMode>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f85e 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200006f4 	.word	0x200006f4
 8001380:	40004800 	.word	0x40004800

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <MX_GPIO_Init+0xac>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <MX_GPIO_Init+0xac>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_GPIO_Init+0xac>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_GPIO_Init+0xac>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <MX_GPIO_Init+0xac>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_GPIO_Init+0xac>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_GPIO_Init+0xac>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_GPIO_Init+0xac>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_GPIO_Init+0xac>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_GPIO_Init+0xac>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_GPIO_Init+0xac>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_GPIO_Init+0xac>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIS_Pin|M2_DIS_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f000 feba 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIS_Pin M2_DIS_Pin */
  GPIO_InitStruct.Pin = M1_DIS_Pin|M2_DIS_Pin;
 8001408:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f000 fd28 	bl	8001e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x44>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x44>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x44>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001476:	f000 ff3d 	bl	80022f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_TIM_Base_MspInit+0x38>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10b      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0x3c>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_TIM_Base_MspInit+0x3c>)
 80014a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a4:	6613      	str	r3, [r2, #96]	; 0x60
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_TIM_Base_MspInit+0x3c>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_TIM_PWM_MspInit+0x38>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10b      	bne.n	80014f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_TIM_PWM_MspInit+0x3c>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_TIM_PWM_MspInit+0x3c>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6593      	str	r3, [r2, #88]	; 0x58
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_TIM_PWM_MspInit+0x3c>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40000400 	.word	0x40000400
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a23      	ldr	r2, [pc, #140]	; (80015b4 <HAL_TIM_MspPostInit+0xac>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d11e      	bne.n	8001568 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_TIM_MspPostInit+0xb0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_TIM_MspPostInit+0xb0>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_TIM_MspPostInit+0xb0>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001542:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001554:	2306      	movs	r3, #6
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001562:	f000 fc89 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001566:	e021      	b.n	80015ac <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_TIM_MspPostInit+0xb4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d11c      	bne.n	80015ac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_TIM_MspPostInit+0xb0>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_TIM_MspPostInit+0xb0>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_TIM_MspPostInit+0xb0>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800158a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159c:	2302      	movs	r3, #2
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <HAL_TIM_MspPostInit+0xb8>)
 80015a8:	f000 fc66 	bl	8001e78 <HAL_GPIO_Init>
}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40012c00 	.word	0x40012c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40000400 	.word	0x40000400
 80015c0:	48000800 	.word	0x48000800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a0      	sub	sp, #128	; 0x80
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e0:	2244      	movs	r2, #68	; 0x44
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 f962 	bl	80068ae <memset>
  if(huart->Instance==USART1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a76      	ldr	r2, [pc, #472]	; (80017c8 <HAL_UART_MspInit+0x204>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d13e      	bne.n	8001672 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fbbb 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f7ff ff12 	bl	8001434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	4b6e      	ldr	r3, [pc, #440]	; (80017cc <HAL_UART_MspInit+0x208>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	4a6d      	ldr	r2, [pc, #436]	; (80017cc <HAL_UART_MspInit+0x208>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	6613      	str	r3, [r2, #96]	; 0x60
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_UART_MspInit+0x208>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_UART_MspInit+0x208>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_UART_MspInit+0x208>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_UART_MspInit+0x208>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = M1_TX_Pin|M1_RX_Pin;
 8001640:	2330      	movs	r3, #48	; 0x30
 8001642:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001650:	2307      	movs	r3, #7
 8001652:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001658:	4619      	mov	r1, r3
 800165a:	485d      	ldr	r0, [pc, #372]	; (80017d0 <HAL_UART_MspInit+0x20c>)
 800165c:	f000 fc0c 	bl	8001e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2025      	movs	r0, #37	; 0x25
 8001666:	f000 fb12 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166a:	2025      	movs	r0, #37	; 0x25
 800166c:	f000 fb29 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001670:	e0a5      	b.n	80017be <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_UART_MspInit+0x210>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d15c      	bne.n	8001736 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800167c:	2302      	movs	r3, #2
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001688:	4618      	mov	r0, r3
 800168a:	f001 fb77 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001694:	f7ff fece 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001698:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_UART_MspInit+0x208>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	4a4b      	ldr	r2, [pc, #300]	; (80017cc <HAL_UART_MspInit+0x208>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6593      	str	r3, [r2, #88]	; 0x58
 80016a4:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	4a45      	ldr	r2, [pc, #276]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016bc:	4b43      	ldr	r3, [pc, #268]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a3f      	ldr	r2, [pc, #252]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_UART_MspInit+0x208>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M_RX_Pin;
 80016e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f2:	2307      	movs	r3, #7
 80016f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(M_RX_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f000 fbba 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M_TX_Pin;
 8001704:	2308      	movs	r3, #8
 8001706:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001714:	2307      	movs	r3, #7
 8001716:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(M_TX_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800171c:	4619      	mov	r1, r3
 800171e:	482e      	ldr	r0, [pc, #184]	; (80017d8 <HAL_UART_MspInit+0x214>)
 8001720:	f000 fbaa 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2026      	movs	r0, #38	; 0x26
 800172a:	f000 fab0 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172e:	2026      	movs	r0, #38	; 0x26
 8001730:	f000 fac7 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
}
 8001734:	e043      	b.n	80017be <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_UART_MspInit+0x218>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d13e      	bne.n	80017be <HAL_UART_MspInit+0x1fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001740:	2304      	movs	r3, #4
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fb15 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8001758:	f7ff fe6c 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_UART_MspInit+0x208>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_UART_MspInit+0x208>)
 8001762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_UART_MspInit+0x208>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0x208>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_UART_MspInit+0x208>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_UART_MspInit+0x208>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FT_RX_Pin|FT_TX_Pin;
 800178c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001790:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179e:	2307      	movs	r3, #7
 80017a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017a6:	4619      	mov	r1, r3
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HAL_UART_MspInit+0x214>)
 80017aa:	f000 fb65 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2027      	movs	r0, #39	; 0x27
 80017b4:	f000 fa6b 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017b8:	2027      	movs	r0, #39	; 0x27
 80017ba:	f000 fa82 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3780      	adds	r7, #128	; 0x80
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000800 	.word	0x48000800
 80017d4:	40004400 	.word	0x40004400
 80017d8:	48000400 	.word	0x48000400
 80017dc:	40004800 	.word	0x40004800

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f936 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <USART1_IRQHandler+0x10>)
 800183a:	f002 ff87 	bl	800474c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200005d4 	.word	0x200005d4

08001848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <USART2_IRQHandler+0x10>)
 800184e:	f002 ff7d 	bl	800474c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000664 	.word	0x20000664

0800185c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <USART3_IRQHandler+0x10>)
 8001862:	f002 ff73 	bl	800474c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200006f4 	.word	0x200006f4

08001870 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001882:	f3af 8000 	nop.w
 8001886:	4601      	mov	r1, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf0      	blt.n	8001882 <_read+0x12>
  }

  return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d2:	605a      	str	r2, [r3, #4]
  return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_isatty>:

int _isatty(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f005 f818 	bl	8006978 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20008000 	.word	0x20008000
 8001974:	00000400 	.word	0x00000400
 8001978:	20000890 	.word	0x20000890
 800197c:	200009e8 	.word	0x200009e8

08001980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <SystemInit+0x20>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <SystemInit+0x20>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490e      	ldr	r1, [pc, #56]	; (80019e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0b      	ldr	r4, [pc, #44]	; (80019f0 <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ce:	f7ff ffd7 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f004 ffd7 	bl	8006984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d6:	f7ff fa49 	bl	8000e6c <main>

080019da <LoopForever>:

LoopForever:
    b LoopForever
 80019da:	e7fe      	b.n	80019da <LoopForever>
  ldr   r0, =_estack
 80019dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019e8:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 80019ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019f0:	200009e4 	.word	0x200009e4

080019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_2_IRQHandler>

080019f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f939 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f80e 	bl	8001a28 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	e001      	b.n	8001a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a18:	f7ff fd12 	bl	8001440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_InitTick+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d022      	beq.n	8001a82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_InitTick+0x6c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_InitTick+0x68>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f944 	bl	8001cde <HAL_SYSTICK_Config>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10f      	bne.n	8001a7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d809      	bhi.n	8001a76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a62:	2200      	movs	r2, #0
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6a:	f000 f910 	bl	8001c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_InitTick+0x70>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e007      	b.n	8001a86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e004      	b.n	8001a86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20000894 	.word	0x20000894
 8001abc:	20000008 	.word	0x20000008

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000894 	.word	0x20000894

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff40 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff90 	bl	8001bcc <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5f 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff33 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa4 	bl	8001c34 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d005      	beq.n	8001d1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e037      	b.n	8001d8a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020e 	bic.w	r2, r2, #14
 8001d28:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f003 021f 	and.w	r2, r3, #31
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d66:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00c      	beq.n	8001d8a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d7e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d88:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d00d      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e047      	b.n	8001e6c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020e 	bic.w	r2, r2, #14
 8001dea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
    }
  }
  return status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e86:	e15a      	b.n	800213e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 814c 	beq.w	8002138 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a6 	beq.w	8002138 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002004:	4a56      	ldr	r2, [pc, #344]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202e:	d01f      	beq.n	8002070 <HAL_GPIO_Init+0x1f8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x2ec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d019      	beq.n	800206c <HAL_GPIO_Init+0x1f4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x2f0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1f0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_GPIO_Init+0x2f4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2fc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1e4>
 8002058:	2305      	movs	r3, #5
 800205a:	e00a      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 800205c:	2306      	movs	r3, #6
 800205e:	e008      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002060:	2304      	movs	r3, #4
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002064:	2303      	movs	r3, #3
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002070:	2300      	movs	r3, #0
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002082:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_GPIO_Init+0x300>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f ae9d 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	48000400 	.word	0x48000400
 8002168:	48000800 	.word	0x48000800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48001000 	.word	0x48001000
 8002174:	48001400 	.word	0x48001400
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d141      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c6:	d131      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ce:	4a46      	ldr	r2, [pc, #280]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e0:	4a41      	ldr	r2, [pc, #260]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2232      	movs	r2, #50	; 0x32
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fe:	e002      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d102      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f2      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d158      	bne.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e057      	b.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800223c:	e04d      	b.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d141      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d131      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226c:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2232      	movs	r2, #50	; 0x32
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	e002      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3b01      	subs	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d102      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f2      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b2:	d112      	bne.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e011      	b.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022c8:	e007      	b.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40007000 	.word	0x40007000
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	6093      	str	r3, [r2, #8]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40007000 	.word	0x40007000

08002314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e306      	b.n	8002934 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d075      	beq.n	800241e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	4b97      	ldr	r3, [pc, #604]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233c:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d102      	bne.n	8002352 <HAL_RCC_OscConfig+0x3e>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d002      	beq.n	8002358 <HAL_RCC_OscConfig+0x44>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d10b      	bne.n	8002370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d05b      	beq.n	800241c <HAL_RCC_OscConfig+0x108>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d157      	bne.n	800241c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e2e1      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x74>
 800237a:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a84      	ldr	r2, [pc, #528]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x98>
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7e      	ldr	r2, [pc, #504]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7b      	ldr	r2, [pc, #492]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 80023ac:	4b78      	ldr	r3, [pc, #480]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a77      	ldr	r2, [pc, #476]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a74      	ldr	r2, [pc, #464]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fb78 	bl	8001ac0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fb74 	bl	8001ac0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e2a6      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xc0>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fb64 	bl	8001ac0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fb60 	bl	8001ac0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e292      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240e:	4b60      	ldr	r3, [pc, #384]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0xe8>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d075      	beq.n	8002516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002434:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d102      	bne.n	800244a <HAL_RCC_OscConfig+0x136>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d002      	beq.n	8002450 <HAL_RCC_OscConfig+0x13c>
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11f      	bne.n	8002490 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x154>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e265      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4946      	ldr	r1, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCC_OscConfig+0x280>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fad1 	bl	8001a28 <HAL_InitTick>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d043      	beq.n	8002514 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e251      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3c      	ldr	r2, [pc, #240]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fb0c 	bl	8001ac0 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fb08 	bl	8001ac0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e23a      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	492d      	ldr	r1, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 80024de:	e01a      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff fae8 	bl	8001ac0 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff fae4 	bl	8001ac0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e216      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e0>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d041      	beq.n	80025a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01c      	beq.n	8002564 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7ff fac1 	bl	8001ac0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002542:	f7ff fabd 	bl	8001ac0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1ef      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <HAL_RCC_OscConfig+0x22e>
 8002562:	e020      	b.n	80025a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff faa4 	bl	8001ac0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800257a:	e00d      	b.n	8002598 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7ff faa0 	bl	8001ac0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d906      	bls.n	8002598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1d2      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ea      	bne.n	800257c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80a6 	beq.w	8002700 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2b4>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x2b6>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6593      	str	r3, [r2, #88]	; 0x58
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7ff fa5d 	bl	8001ac0 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7ff fa59 	bl	8001ac0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e18b      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_RCC_OscConfig+0x32e>
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	e024      	b.n	800268c <HAL_RCC_OscConfig+0x378>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d110      	bne.n	800266c <HAL_RCC_OscConfig+0x358>
 800264a:	4b60      	ldr	r3, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002650:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266a:	e00f      	b.n	800268c <HAL_RCC_OscConfig+0x378>
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d016      	beq.n	80026c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7ff fa14 	bl	8001ac0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7ff fa10 	bl	8001ac0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e140      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ed      	beq.n	800269c <HAL_RCC_OscConfig+0x388>
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff f9fd 	bl	8001ac0 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f9f9 	bl	8001ac0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e129      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ed      	bne.n	80026ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a34      	ldr	r2, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d03c      	beq.n	8002786 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01c      	beq.n	800274e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff f9cc 	bl	8001ac0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272c:	f7ff f9c8 	bl	8001ac0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0fa      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ef      	beq.n	800272c <HAL_RCC_OscConfig+0x418>
 800274c:	e01b      	b.n	8002786 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7ff f9af 	bl	8001ac0 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002766:	f7ff f9ab 	bl	8001ac0 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0dd      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800277a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ef      	bne.n	8002766 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80d1 	beq.w	8002932 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b0c      	cmp	r3, #12
 800279a:	f000 808b 	beq.w	80028b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d15e      	bne.n	8002864 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80027ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff f985 	bl	8001ac0 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e00c      	b.n	80027d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff f981 	bl	8001ac0 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d905      	bls.n	80027d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0b3      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ec      	bne.n	80027ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	4b56      	ldr	r3, [pc, #344]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b56      	ldr	r3, [pc, #344]	; (8002940 <HAL_RCC_OscConfig+0x62c>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6a11      	ldr	r1, [r2, #32]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f0:	3a01      	subs	r2, #1
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	4311      	orrs	r1, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027fa:	0212      	lsls	r2, r2, #8
 80027fc:	4311      	orrs	r1, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002802:	0852      	lsrs	r2, r2, #1
 8002804:	3a01      	subs	r2, #1
 8002806:	0552      	lsls	r2, r2, #21
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800280e:	0852      	lsrs	r2, r2, #1
 8002810:	3a01      	subs	r2, #1
 8002812:	0652      	lsls	r2, r2, #25
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800281a:	06d2      	lsls	r2, r2, #27
 800281c:	430a      	orrs	r2, r1
 800281e:	4947      	ldr	r1, [pc, #284]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002820:	4313      	orrs	r3, r2
 8002822:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a44      	ldr	r2, [pc, #272]	; (800293c <HAL_RCC_OscConfig+0x628>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002830:	4b42      	ldr	r3, [pc, #264]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a41      	ldr	r2, [pc, #260]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff f940 	bl	8001ac0 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff f93c 	bl	8001ac0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e06e      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x530>
 8002862:	e066      	b.n	8002932 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a34      	ldr	r2, [pc, #208]	; (800293c <HAL_RCC_OscConfig+0x628>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCC_OscConfig+0x628>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a2e      	ldr	r2, [pc, #184]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002882:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f918 	bl	8001ac0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff f914 	bl	8001ac0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e046      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x580>
 80028b2:	e03e      	b.n	8002932 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e039      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d12c      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d123      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11b      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d113      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d109      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	019f800c 	.word	0x019f800c

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e11e      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b91      	ldr	r3, [pc, #580]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d910      	bls.n	800298c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b8e      	ldr	r3, [pc, #568]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 020f 	bic.w	r2, r3, #15
 8002972:	498c      	ldr	r1, [pc, #560]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b8a      	ldr	r3, [pc, #552]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e106      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d073      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d129      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0f4      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029b0:	f000 f99e 	bl	8002cf0 <RCC_GetSysClockFreqFromPLLSource>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a7c      	ldr	r2, [pc, #496]	; (8002bac <HAL_RCC_ClockConfig+0x268>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d93f      	bls.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d033      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d12f      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029de:	4b72      	ldr	r3, [pc, #456]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e6:	4a70      	ldr	r2, [pc, #448]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e024      	b.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0c6      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0c:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0be      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a1c:	f000 f8ce 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_RCC_ClockConfig+0x268>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d909      	bls.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a32:	4a5d      	ldr	r2, [pc, #372]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4957      	ldr	r1, [pc, #348]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7ff f836 	bl	8001ac0 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7ff f832 	bl	8001ac0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e095      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4936      	ldr	r1, [pc, #216]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d21d      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 020f 	bic.w	r2, r3, #15
 8002afc:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b04:	f7fe ffdc 	bl	8001ac0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe ffd8 	bl	8001ac0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e03b      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1ed      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4917      	ldr	r1, [pc, #92]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490f      	ldr	r1, [pc, #60]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b6e:	f000 f825 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <HAL_RCC_ClockConfig+0x26c>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x270>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x274>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe ff48 	bl	8001a28 <HAL_InitTick>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	04c4b400 	.word	0x04c4b400
 8002bb0:	08007754 	.word	0x08007754
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e047      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e03e      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d136      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3301      	adds	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1a:	68d2      	ldr	r2, [r2, #12]
 8002c1c:	0a12      	lsrs	r2, r2, #8
 8002c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
      break;
 8002c28:	e00c      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	0a12      	lsrs	r2, r2, #8
 8002c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      break;
 8002c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0e5b      	lsrs	r3, r3, #25
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c64:	693b      	ldr	r3, [r7, #16]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08007764 	.word	0x08007764

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cc8:	f7ff ffda 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0adb      	lsrs	r3, r3, #11
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4904      	ldr	r1, [pc, #16]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08007764 	.word	0x08007764

08002cf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d10c      	bne.n	8002d2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d1e:	68d2      	ldr	r2, [r2, #12]
 8002d20:	0a12      	lsrs	r2, r2, #8
 8002d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
    break;
 8002d2c:	e00c      	b.n	8002d48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	0a12      	lsrs	r2, r2, #8
 8002d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
    break;
 8002d46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	00f42400 	.word	0x00f42400

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8098 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a3f      	ldr	r2, [pc, #252]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe fe75 	bl	8001ac0 <HAL_GetTick>
 8002dd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd8:	e009      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7fe fe71 	bl	8001ac0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	74fb      	strb	r3, [r7, #19]
        break;
 8002dec:	e005      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ef      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d159      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01e      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d019      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e28:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fe31 	bl	8001ac0 <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e60:	e00b      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fe2d 	bl	8001ac0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d902      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	74fb      	strb	r3, [r7, #19]
            break;
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ec      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb8:	7c7b      	ldrb	r3, [r7, #17]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4aa5      	ldr	r2, [pc, #660]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed6:	4ba0      	ldr	r3, [pc, #640]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f023 0203 	bic.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	499c      	ldr	r1, [pc, #624]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef8:	4b97      	ldr	r3, [pc, #604]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 020c 	bic.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4994      	ldr	r1, [pc, #592]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	498b      	ldr	r1, [pc, #556]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f3c:	4b86      	ldr	r3, [pc, #536]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4983      	ldr	r1, [pc, #524]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f5e:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	497a      	ldr	r1, [pc, #488]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	4972      	ldr	r1, [pc, #456]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4969      	ldr	r1, [pc, #420]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4961      	ldr	r1, [pc, #388]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	4958      	ldr	r1, [pc, #352]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	4950      	ldr	r1, [pc, #320]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003032:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003040:	4b45      	ldr	r3, [pc, #276]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	4942      	ldr	r1, [pc, #264]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003078:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a2e      	ldr	r2, [pc, #184]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	4926      	ldr	r1, [pc, #152]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ce:	d105      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4918      	ldr	r1, [pc, #96]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003112:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	490a      	ldr	r1, [pc, #40]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800314c:	7cbb      	ldrb	r3, [r7, #18]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e049      	b.n	8003202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe f980 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 fc30 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e049      	b.n	80032b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fe f949 	bl	80014c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f000 fbd9 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_TIM_PWM_Start+0x24>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e03c      	b.n	8003356 <HAL_TIM_PWM_Start+0x9e>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d109      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x3e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e02f      	b.n	8003356 <HAL_TIM_PWM_Start+0x9e>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d109      	bne.n	8003310 <HAL_TIM_PWM_Start+0x58>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e022      	b.n	8003356 <HAL_TIM_PWM_Start+0x9e>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d109      	bne.n	800332a <HAL_TIM_PWM_Start+0x72>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e015      	b.n	8003356 <HAL_TIM_PWM_Start+0x9e>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d109      	bne.n	8003344 <HAL_TIM_PWM_Start+0x8c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <HAL_TIM_PWM_Start+0x9e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e097      	b.n	800348e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xb6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	e023      	b.n	80033b6 <HAL_TIM_PWM_Start+0xfe>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xc6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	e01b      	b.n	80033b6 <HAL_TIM_PWM_Start+0xfe>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xd6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	e013      	b.n	80033b6 <HAL_TIM_PWM_Start+0xfe>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Start+0xe6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_PWM_Start+0xfe>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Start+0xf6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ac:	e003      	b.n	80033b6 <HAL_TIM_PWM_Start+0xfe>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 ff40 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a33      	ldr	r2, [pc, #204]	; (8003498 <HAL_TIM_PWM_Start+0x1e0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x13e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a32      	ldr	r2, [pc, #200]	; (800349c <HAL_TIM_PWM_Start+0x1e4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x13e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <HAL_TIM_PWM_Start+0x1e8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x13e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <HAL_TIM_PWM_Start+0x1ec>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x13e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_TIM_PWM_Start+0x1f0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_Start+0x142>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_TIM_PWM_Start+0x144>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_TIM_PWM_Start+0x1e0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_TIM_PWM_Start+0x194>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d013      	beq.n	800344c <HAL_TIM_PWM_Start+0x194>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <HAL_TIM_PWM_Start+0x1f4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_PWM_Start+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <HAL_TIM_PWM_Start+0x1f8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_PWM_Start+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_TIM_PWM_Start+0x1e4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_PWM_Start+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_TIM_PWM_Start+0x1e8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d115      	bne.n	8003478 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_TIM_PWM_Start+0x1fc>)
 8003454:	4013      	ands	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d015      	beq.n	800348a <HAL_TIM_PWM_Start+0x1d2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d011      	beq.n	800348a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	e008      	b.n	800348a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e000      	b.n	800348c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40013400 	.word	0x40013400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	00010007 	.word	0x00010007

080034b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 feba 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3e      	ldr	r2, [pc, #248]	; (80035d0 <HAL_TIM_PWM_Stop+0x118>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3d      	ldr	r2, [pc, #244]	; (80035d4 <HAL_TIM_PWM_Stop+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <HAL_TIM_PWM_Stop+0x120>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_TIM_PWM_Stop+0x124>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_TIM_PWM_Stop+0x128>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_Stop+0x4e>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_TIM_PWM_Stop+0x50>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d017      	beq.n	800353c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	f241 1311 	movw	r3, #4369	; 0x1111
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10f      	bne.n	800353c <HAL_TIM_PWM_Stop+0x84>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	f244 4344 	movw	r3, #17476	; 0x4444
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_TIM_PWM_Stop+0x84>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	f241 1311 	movw	r3, #4369	; 0x1111
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <HAL_TIM_PWM_Stop+0xb4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	f244 4344 	movw	r3, #17476	; 0x4444
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_TIM_PWM_Stop+0xb4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_TIM_PWM_Stop+0xc4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357a:	e023      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d104      	bne.n	800358c <HAL_TIM_PWM_Stop+0xd4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358a:	e01b      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d104      	bne.n	800359c <HAL_TIM_PWM_Stop+0xe4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359a:	e013      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d104      	bne.n	80035ac <HAL_TIM_PWM_Stop+0xf4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035aa:	e00b      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_PWM_Stop+0x104>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ba:	e003      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ff      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b14      	cmp	r3, #20
 800360e:	f200 80f0 	bhi.w	80037f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080037f3 	.word	0x080037f3
 8003620:	080037f3 	.word	0x080037f3
 8003624:	080037f3 	.word	0x080037f3
 8003628:	080036ad 	.word	0x080036ad
 800362c:	080037f3 	.word	0x080037f3
 8003630:	080037f3 	.word	0x080037f3
 8003634:	080037f3 	.word	0x080037f3
 8003638:	080036ef 	.word	0x080036ef
 800363c:	080037f3 	.word	0x080037f3
 8003640:	080037f3 	.word	0x080037f3
 8003644:	080037f3 	.word	0x080037f3
 8003648:	0800372f 	.word	0x0800372f
 800364c:	080037f3 	.word	0x080037f3
 8003650:	080037f3 	.word	0x080037f3
 8003654:	080037f3 	.word	0x080037f3
 8003658:	08003771 	.word	0x08003771
 800365c:	080037f3 	.word	0x080037f3
 8003660:	080037f3 	.word	0x080037f3
 8003664:	080037f3 	.word	0x080037f3
 8003668:	080037b1 	.word	0x080037b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa54 	bl	8003b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
      break;
 80036aa:	e0a5      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fac4 	bl	8003c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
      break;
 80036ec:	e084      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fb2d 	bl	8003d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0208 	orr.w	r2, r2, #8
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0204 	bic.w	r2, r2, #4
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
      break;
 800372c:	e064      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fb95 	bl	8003e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	61da      	str	r2, [r3, #28]
      break;
 800376e:	e043      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fbfe 	bl	8003f78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80037ae:	e023      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fc42 	bl	8004040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80037f0:	e002      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop

0800380c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIM_ConfigClockSource+0x1c>
 8003824:	2302      	movs	r3, #2
 8003826:	e0de      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x1da>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800384a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	f000 80a9 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003868:	4a61      	ldr	r2, [pc, #388]	; (80039f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	f200 80ae 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 8003870:	4a60      	ldr	r2, [pc, #384]	; (80039f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	f000 80a1 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003878:	4a5e      	ldr	r2, [pc, #376]	; (80039f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	f200 80a6 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 8003880:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	f000 8099 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003888:	4a5b      	ldr	r2, [pc, #364]	; (80039f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	f200 809e 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 8003890:	4a5a      	ldr	r2, [pc, #360]	; (80039fc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f000 8091 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_TIM_ConfigClockSource+0x1f0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	f200 8096 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80038a4:	f000 8089 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 80038a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80038ac:	f200 808e 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b4:	d03e      	beq.n	8003934 <HAL_TIM_ConfigClockSource+0x128>
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ba:	f200 8087 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	f000 8086 	beq.w	80039d2 <HAL_TIM_ConfigClockSource+0x1c6>
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ca:	d87f      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038cc:	2b70      	cmp	r3, #112	; 0x70
 80038ce:	d01a      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xfa>
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d87b      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038d4:	2b60      	cmp	r3, #96	; 0x60
 80038d6:	d050      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x16e>
 80038d8:	2b60      	cmp	r3, #96	; 0x60
 80038da:	d877      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038dc:	2b50      	cmp	r3, #80	; 0x50
 80038de:	d03c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x14e>
 80038e0:	2b50      	cmp	r3, #80	; 0x50
 80038e2:	d873      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d058      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x18e>
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d86f      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038ec:	2b30      	cmp	r3, #48	; 0x30
 80038ee:	d064      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 80038f0:	2b30      	cmp	r3, #48	; 0x30
 80038f2:	d86b      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d060      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d867      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d05c      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003900:	2b10      	cmp	r3, #16
 8003902:	d05a      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003904:	e062      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f000 fc75 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	609a      	str	r2, [r3, #8]
      break;
 8003932:	e04f      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f000 fc5e 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003956:	609a      	str	r2, [r3, #8]
      break;
 8003958:	e03c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	461a      	mov	r2, r3
 8003968:	f000 fbd0 	bl	800410c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2150      	movs	r1, #80	; 0x50
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fc29 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003978:	e02c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	461a      	mov	r2, r3
 8003988:	f000 fbef 	bl	800416a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2160      	movs	r1, #96	; 0x60
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fc19 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003998:	e01c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f000 fbb0 	bl	800410c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fc09 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 80039b8:	e00c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f000 fc00 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 80039ca:	e003      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e000      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80039d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	00100070 	.word	0x00100070
 80039f4:	00100040 	.word	0x00100040
 80039f8:	00100030 	.word	0x00100030
 80039fc:	00100020 	.word	0x00100020

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <TIM_Base_SetConfig+0x104>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a39      	ldr	r2, [pc, #228]	; (8003b08 <TIM_Base_SetConfig+0x108>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a38      	ldr	r2, [pc, #224]	; (8003b0c <TIM_Base_SetConfig+0x10c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a37      	ldr	r2, [pc, #220]	; (8003b10 <TIM_Base_SetConfig+0x110>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <TIM_Base_SetConfig+0x104>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01b      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d017      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <TIM_Base_SetConfig+0x108>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <TIM_Base_SetConfig+0x10c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00f      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <TIM_Base_SetConfig+0x110>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <TIM_Base_SetConfig+0x114>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <TIM_Base_SetConfig+0x118>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <TIM_Base_SetConfig+0x104>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <TIM_Base_SetConfig+0x110>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <TIM_Base_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <TIM_Base_SetConfig+0x118>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	615a      	str	r2, [r3, #20]
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40013400 	.word	0x40013400
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40014400 	.word	0x40014400
 8003b1c:	40014800 	.word	0x40014800

08003b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0201 	bic.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0303 	bic.w	r3, r3, #3
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 0302 	bic.w	r3, r3, #2
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <TIM_OC1_SetConfig+0x10c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_OC1_SetConfig+0x80>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <TIM_OC1_SetConfig+0x110>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_OC1_SetConfig+0x80>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <TIM_OC1_SetConfig+0x114>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC1_SetConfig+0x80>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <TIM_OC1_SetConfig+0x118>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC1_SetConfig+0x80>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a28      	ldr	r2, [pc, #160]	; (8003c3c <TIM_OC1_SetConfig+0x11c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10c      	bne.n	8003bba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0308 	bic.w	r3, r3, #8
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 0304 	bic.w	r3, r3, #4
 8003bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <TIM_OC1_SetConfig+0x10c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_OC1_SetConfig+0xc2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <TIM_OC1_SetConfig+0x110>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_OC1_SetConfig+0xc2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <TIM_OC1_SetConfig+0x114>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_OC1_SetConfig+0xc2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <TIM_OC1_SetConfig+0x118>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC1_SetConfig+0xc2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <TIM_OC1_SetConfig+0x11c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d111      	bne.n	8003c06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0210 	bic.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0320 	bic.w	r3, r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <TIM_OC2_SetConfig+0x100>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC2_SetConfig+0x6c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <TIM_OC2_SetConfig+0x104>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <TIM_OC2_SetConfig+0x100>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00f      	beq.n	8003cf0 <TIM_OC2_SetConfig+0xb0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <TIM_OC2_SetConfig+0x104>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_OC2_SetConfig+0xb0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <TIM_OC2_SetConfig+0x108>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_OC2_SetConfig+0xb0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <TIM_OC2_SetConfig+0x10c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_OC2_SetConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <TIM_OC2_SetConfig+0x110>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d113      	bne.n	8003d18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40013400 	.word	0x40013400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800

08003d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <TIM_OC3_SetConfig+0xfc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0x6a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_OC3_SetConfig+0x100>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10d      	bne.n	8003dda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <TIM_OC3_SetConfig+0xfc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_OC3_SetConfig+0xae>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <TIM_OC3_SetConfig+0x100>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_OC3_SetConfig+0xae>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <TIM_OC3_SetConfig+0x104>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_OC3_SetConfig+0xae>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <TIM_OC3_SetConfig+0x108>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_OC3_SetConfig+0xae>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <TIM_OC3_SetConfig+0x10c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d113      	bne.n	8003e2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <TIM_OC4_SetConfig+0x100>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC4_SetConfig+0x6c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <TIM_OC4_SetConfig+0x104>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10d      	bne.n	8003eec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <TIM_OC4_SetConfig+0x100>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_OC4_SetConfig+0xb0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <TIM_OC4_SetConfig+0x104>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_OC4_SetConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <TIM_OC4_SetConfig+0x108>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_OC4_SetConfig+0xb0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <TIM_OC4_SetConfig+0x10c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_OC4_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <TIM_OC4_SetConfig+0x110>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d113      	bne.n	8003f3c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	; (800402c <TIM_OC5_SetConfig+0xb4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <TIM_OC5_SetConfig+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <TIM_OC5_SetConfig+0xbc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <TIM_OC5_SetConfig+0xc0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <TIM_OC5_SetConfig+0xc4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d109      	bne.n	8004006 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800

08004040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	051b      	lsls	r3, r3, #20
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <TIM_OC6_SetConfig+0xb8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <TIM_OC6_SetConfig+0xbc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <TIM_OC6_SetConfig+0xc0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC6_SetConfig+0xc4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC6_SetConfig+0xc8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 0307 	orr.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e065      	b.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a2c      	ldr	r2, [pc, #176]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431e:	d013      	beq.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a13      	ldr	r2, [pc, #76]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10c      	bne.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	4313      	orrs	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40013400 	.word	0x40013400
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40014000 	.word	0x40014000

08004394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e087      	b.n	80044c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d106      	bne.n	800444c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d126      	bne.n	80044ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	051b      	lsls	r3, r3, #20
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0e      	ldr	r2, [pc, #56]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d106      	bne.n	80044ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40013400 	.word	0x40013400

080044d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e042      	b.n	800456c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fd f863 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2224      	movs	r2, #36	; 0x24
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fc50 	bl	8004dbc <UART_SetConfig>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e022      	b.n	800456c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 ff10 	bl	8005354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 ff97 	bl	8005498 <UART_CheckIdleState>
 800456a:	4603      	mov	r3, r0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458a:	2b20      	cmp	r3, #32
 800458c:	f040 8083 	bne.w	8004696 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Transmit+0x28>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e07b      	b.n	8004698 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Transmit+0x3a>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e074      	b.n	8004698 <HAL_UART_Transmit+0x124>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2221      	movs	r2, #33	; 0x21
 80045c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045c6:	f7fd fa7b 	bl	8001ac0 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x84>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004608:	e02c      	b.n	8004664 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 ff8a 	bl	800552e <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e039      	b.n	8004698 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e007      	b.n	8004652 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1cc      	bne.n	800460a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	2140      	movs	r1, #64	; 0x40
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 ff57 	bl	800552e <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e006      	b.n	8004698 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d142      	bne.n	800473e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_UART_Receive_IT+0x24>
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e03b      	b.n	8004740 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Receive_IT+0x36>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e034      	b.n	8004740 <HAL_UART_Receive_IT+0xa0>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a17      	ldr	r2, [pc, #92]	; (8004748 <HAL_UART_Receive_IT+0xa8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d018      	beq.n	800472e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	61bb      	str	r3, [r7, #24]
   return(result);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e6      	bne.n	80046fc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	461a      	mov	r2, r3
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 ffc3 	bl	80056c0 <UART_Start_Receive_IT>
 800473a:	4603      	mov	r3, r0
 800473c:	e000      	b.n	8004740 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3728      	adds	r7, #40	; 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40008000 	.word	0x40008000

0800474c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b0ba      	sub	sp, #232	; 0xe8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004772:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004776:	f640 030f 	movw	r3, #2063	; 0x80f
 800477a:	4013      	ands	r3, r2
 800477c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11b      	bne.n	80047c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 82d6 	beq.w	8004d62 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
      }
      return;
 80047be:	e2d0      	b.n	8004d62 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 811f 	beq.w	8004a08 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80047ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_UART_IRQHandler+0x2b0>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80047d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047da:	4b89      	ldr	r3, [pc, #548]	; (8004a00 <HAL_UART_IRQHandler+0x2b4>)
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8112 	beq.w	8004a08 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d011      	beq.n	8004814 <HAL_UART_IRQHandler+0xc8>
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00b      	beq.n	8004814 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480a:	f043 0201 	orr.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d011      	beq.n	8004844 <HAL_UART_IRQHandler+0xf8>
 8004820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2202      	movs	r2, #2
 8004832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d011      	beq.n	8004874 <HAL_UART_IRQHandler+0x128>
 8004850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2204      	movs	r2, #4
 8004862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d017      	beq.n	80048b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800488c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004890:	4b5a      	ldr	r3, [pc, #360]	; (80049fc <HAL_UART_IRQHandler+0x2b0>)
 8004892:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2208      	movs	r2, #8
 800489e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a6:	f043 0208 	orr.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <HAL_UART_IRQHandler+0x196>
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 823c 	beq.w	8004d66 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d013      	beq.n	8004922 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800493a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800493e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004942:	2b00      	cmp	r3, #0
 8004944:	d04f      	beq.n	80049e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 ffe4 	bl	8005914 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d141      	bne.n	80049de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3308      	adds	r3, #8
 8004960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3308      	adds	r3, #8
 8004982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800498a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800499e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1d9      	bne.n	800495a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d013      	beq.n	80049d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b2:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_UART_IRQHandler+0x2b8>)
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd f9f4 	bl	8001da8 <HAL_DMA_Abort_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d017      	beq.n	80049f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80049d0:	4610      	mov	r0, r2
 80049d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e00f      	b.n	80049f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9da 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	e00b      	b.n	80049f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9d6 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e007      	b.n	80049f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f9d2 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80049f4:	e1b7      	b.n	8004d66 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f6:	bf00      	nop
    return;
 80049f8:	e1b5      	b.n	8004d66 <HAL_UART_IRQHandler+0x61a>
 80049fa:	bf00      	nop
 80049fc:	10000001 	.word	0x10000001
 8004a00:	04000120 	.word	0x04000120
 8004a04:	080059e1 	.word	0x080059e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 814a 	bne.w	8004ca6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8143 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 813c 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2210      	movs	r2, #16
 8004a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	f040 80b5 	bne.w	8004bb0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8187 	beq.w	8004d6a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f080 817f 	bcs.w	8004d6a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 8086 	bne.w	8004b94 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ab6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004abe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1da      	bne.n	8004a88 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004af6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004afa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004afe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e1      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e3      	bne.n	8004b0e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b64:	f023 0310 	bic.w	r3, r3, #16
 8004b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b76:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e4      	bne.n	8004b54 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd f8b1 	bl	8001cf6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8fb 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bae:	e0dc      	b.n	8004d6a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80ce 	beq.w	8004d6e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80c9 	beq.w	8004d6e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004c00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e4      	bne.n	8004bdc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	623b      	str	r3, [r7, #32]
   return(result);
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e1      	bne.n	8004c12 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0310 	bic.w	r3, r3, #16
 8004c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	69b9      	ldr	r1, [r7, #24]
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	617b      	str	r3, [r7, #20]
   return(result);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e4      	bne.n	8004c62 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f880 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ca4:	e063      	b.n	8004d6e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x584>
 8004cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 fb27 	bl	800631c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cce:	e051      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d014      	beq.n	8004d06 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03a      	beq.n	8004d72 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
    }
    return;
 8004d04:	e035      	b.n	8004d72 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_UART_IRQHandler+0x5da>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fe74 	bl	8005a0c <UART_EndTransmit_IT>
    return;
 8004d24:	e026      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_UART_IRQHandler+0x5fa>
 8004d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 fb00 	bl	8006344 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d44:	e016      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_UART_IRQHandler+0x628>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da0c      	bge.n	8004d74 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 fae8 	bl	8006330 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d60:	e008      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
      return;
 8004d62:	bf00      	nop
 8004d64:	e006      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
    return;
 8004d66:	bf00      	nop
 8004d68:	e004      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
      return;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
      return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x628>
    return;
 8004d72:	bf00      	nop
  }
}
 8004d74:	37e8      	adds	r7, #232	; 0xe8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b08c      	sub	sp, #48	; 0x30
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4bab      	ldr	r3, [pc, #684]	; (8005098 <UART_SetConfig+0x2dc>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4aa0      	ldr	r2, [pc, #640]	; (800509c <UART_SetConfig+0x2e0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	f023 010f 	bic.w	r1, r3, #15
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a91      	ldr	r2, [pc, #580]	; (80050a0 <UART_SetConfig+0x2e4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d125      	bne.n	8004eac <UART_SetConfig+0xf0>
 8004e60:	4b90      	ldr	r3, [pc, #576]	; (80050a4 <UART_SetConfig+0x2e8>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d81a      	bhi.n	8004ea4 <UART_SetConfig+0xe8>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <UART_SetConfig+0xb8>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8a:	e0d6      	b.n	800503a <UART_SetConfig+0x27e>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e92:	e0d2      	b.n	800503a <UART_SetConfig+0x27e>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9a:	e0ce      	b.n	800503a <UART_SetConfig+0x27e>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	e0ca      	b.n	800503a <UART_SetConfig+0x27e>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eaa:	e0c6      	b.n	800503a <UART_SetConfig+0x27e>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a7d      	ldr	r2, [pc, #500]	; (80050a8 <UART_SetConfig+0x2ec>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d138      	bne.n	8004f28 <UART_SetConfig+0x16c>
 8004eb6:	4b7b      	ldr	r3, [pc, #492]	; (80050a4 <UART_SetConfig+0x2e8>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b0c      	cmp	r3, #12
 8004ec2:	d82d      	bhi.n	8004f20 <UART_SetConfig+0x164>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x110>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f01 	.word	0x08004f01
 8004ed0:	08004f21 	.word	0x08004f21
 8004ed4:	08004f21 	.word	0x08004f21
 8004ed8:	08004f21 	.word	0x08004f21
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f21 	.word	0x08004f21
 8004ee4:	08004f21 	.word	0x08004f21
 8004ee8:	08004f21 	.word	0x08004f21
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f21 	.word	0x08004f21
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e098      	b.n	800503a <UART_SetConfig+0x27e>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e094      	b.n	800503a <UART_SetConfig+0x27e>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f16:	e090      	b.n	800503a <UART_SetConfig+0x27e>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1e:	e08c      	b.n	800503a <UART_SetConfig+0x27e>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f26:	e088      	b.n	800503a <UART_SetConfig+0x27e>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5f      	ldr	r2, [pc, #380]	; (80050ac <UART_SetConfig+0x2f0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d125      	bne.n	8004f7e <UART_SetConfig+0x1c2>
 8004f32:	4b5c      	ldr	r3, [pc, #368]	; (80050a4 <UART_SetConfig+0x2e8>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f3c:	2b30      	cmp	r3, #48	; 0x30
 8004f3e:	d016      	beq.n	8004f6e <UART_SetConfig+0x1b2>
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d818      	bhi.n	8004f76 <UART_SetConfig+0x1ba>
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d00a      	beq.n	8004f5e <UART_SetConfig+0x1a2>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d814      	bhi.n	8004f76 <UART_SetConfig+0x1ba>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <UART_SetConfig+0x19a>
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d008      	beq.n	8004f66 <UART_SetConfig+0x1aa>
 8004f54:	e00f      	b.n	8004f76 <UART_SetConfig+0x1ba>
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5c:	e06d      	b.n	800503a <UART_SetConfig+0x27e>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f64:	e069      	b.n	800503a <UART_SetConfig+0x27e>
 8004f66:	2304      	movs	r3, #4
 8004f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6c:	e065      	b.n	800503a <UART_SetConfig+0x27e>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f74:	e061      	b.n	800503a <UART_SetConfig+0x27e>
 8004f76:	2310      	movs	r3, #16
 8004f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7c:	e05d      	b.n	800503a <UART_SetConfig+0x27e>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4b      	ldr	r2, [pc, #300]	; (80050b0 <UART_SetConfig+0x2f4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d125      	bne.n	8004fd4 <UART_SetConfig+0x218>
 8004f88:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <UART_SetConfig+0x2e8>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f92:	2bc0      	cmp	r3, #192	; 0xc0
 8004f94:	d016      	beq.n	8004fc4 <UART_SetConfig+0x208>
 8004f96:	2bc0      	cmp	r3, #192	; 0xc0
 8004f98:	d818      	bhi.n	8004fcc <UART_SetConfig+0x210>
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d00a      	beq.n	8004fb4 <UART_SetConfig+0x1f8>
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d814      	bhi.n	8004fcc <UART_SetConfig+0x210>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <UART_SetConfig+0x1f0>
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d008      	beq.n	8004fbc <UART_SetConfig+0x200>
 8004faa:	e00f      	b.n	8004fcc <UART_SetConfig+0x210>
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb2:	e042      	b.n	800503a <UART_SetConfig+0x27e>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e03e      	b.n	800503a <UART_SetConfig+0x27e>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e03a      	b.n	800503a <UART_SetConfig+0x27e>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e036      	b.n	800503a <UART_SetConfig+0x27e>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e032      	b.n	800503a <UART_SetConfig+0x27e>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a30      	ldr	r2, [pc, #192]	; (800509c <UART_SetConfig+0x2e0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d12a      	bne.n	8005034 <UART_SetConfig+0x278>
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <UART_SetConfig+0x2e8>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fec:	d01a      	beq.n	8005024 <UART_SetConfig+0x268>
 8004fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff2:	d81b      	bhi.n	800502c <UART_SetConfig+0x270>
 8004ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff8:	d00c      	beq.n	8005014 <UART_SetConfig+0x258>
 8004ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffe:	d815      	bhi.n	800502c <UART_SetConfig+0x270>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <UART_SetConfig+0x250>
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d008      	beq.n	800501c <UART_SetConfig+0x260>
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x270>
 800500c:	2300      	movs	r3, #0
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005012:	e012      	b.n	800503a <UART_SetConfig+0x27e>
 8005014:	2302      	movs	r3, #2
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e00e      	b.n	800503a <UART_SetConfig+0x27e>
 800501c:	2304      	movs	r3, #4
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e00a      	b.n	800503a <UART_SetConfig+0x27e>
 8005024:	2308      	movs	r3, #8
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502a:	e006      	b.n	800503a <UART_SetConfig+0x27e>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005032:	e002      	b.n	800503a <UART_SetConfig+0x27e>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <UART_SetConfig+0x2e0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	f040 80a8 	bne.w	8005196 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800504a:	2b08      	cmp	r3, #8
 800504c:	d834      	bhi.n	80050b8 <UART_SetConfig+0x2fc>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x298>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005079 	.word	0x08005079
 8005058:	080050b9 	.word	0x080050b9
 800505c:	08005081 	.word	0x08005081
 8005060:	080050b9 	.word	0x080050b9
 8005064:	08005087 	.word	0x08005087
 8005068:	080050b9 	.word	0x080050b9
 800506c:	080050b9 	.word	0x080050b9
 8005070:	080050b9 	.word	0x080050b9
 8005074:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fd fe0e 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 800507c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800507e:	e021      	b.n	80050c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <UART_SetConfig+0x2f8>)
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005084:	e01e      	b.n	80050c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fd fd99 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800508c:	e01a      	b.n	80050c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005094:	e016      	b.n	80050c4 <UART_SetConfig+0x308>
 8005096:	bf00      	nop
 8005098:	cfff69f3 	.word	0xcfff69f3
 800509c:	40008000 	.word	0x40008000
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40004400 	.word	0x40004400
 80050ac:	40004800 	.word	0x40004800
 80050b0:	40004c00 	.word	0x40004c00
 80050b4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 812a 	beq.w	8005320 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	4a9e      	ldr	r2, [pc, #632]	; (800534c <UART_SetConfig+0x590>)
 80050d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	fbb3 f3f2 	udiv	r3, r3, r2
 80050de:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d305      	bcc.n	80050fc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d903      	bls.n	8005104 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005102:	e10d      	b.n	8005320 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	2200      	movs	r2, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	60fa      	str	r2, [r7, #12]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	4a8e      	ldr	r2, [pc, #568]	; (800534c <UART_SetConfig+0x590>)
 8005112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005116:	b29b      	uxth	r3, r3
 8005118:	2200      	movs	r2, #0
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005126:	f7fb f8d3 	bl	80002d0 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4610      	mov	r0, r2
 8005130:	4619      	mov	r1, r3
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	020b      	lsls	r3, r1, #8
 800513c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005140:	0202      	lsls	r2, r0, #8
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	6849      	ldr	r1, [r1, #4]
 8005146:	0849      	lsrs	r1, r1, #1
 8005148:	2000      	movs	r0, #0
 800514a:	460c      	mov	r4, r1
 800514c:	4605      	mov	r5, r0
 800514e:	eb12 0804 	adds.w	r8, r2, r4
 8005152:	eb43 0905 	adc.w	r9, r3, r5
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	469a      	mov	sl, r3
 800515e:	4693      	mov	fp, r2
 8005160:	4652      	mov	r2, sl
 8005162:	465b      	mov	r3, fp
 8005164:	4640      	mov	r0, r8
 8005166:	4649      	mov	r1, r9
 8005168:	f7fb f8b2 	bl	80002d0 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4613      	mov	r3, r2
 8005172:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517a:	d308      	bcc.n	800518e <UART_SetConfig+0x3d2>
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005182:	d204      	bcs.n	800518e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a3a      	ldr	r2, [r7, #32]
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	e0c8      	b.n	8005320 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005194:	e0c4      	b.n	8005320 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519e:	d167      	bne.n	8005270 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80051a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d828      	bhi.n	80051fa <UART_SetConfig+0x43e>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x3f4>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	080051fb 	.word	0x080051fb
 80051c0:	080051eb 	.word	0x080051eb
 80051c4:	080051fb 	.word	0x080051fb
 80051c8:	080051fb 	.word	0x080051fb
 80051cc:	080051fb 	.word	0x080051fb
 80051d0:	080051f3 	.word	0x080051f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fd fd60 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051da:	e014      	b.n	8005206 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051dc:	f7fd fd72 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 80051e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e2:	e010      	b.n	8005206 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e4:	4b5a      	ldr	r3, [pc, #360]	; (8005350 <UART_SetConfig+0x594>)
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051e8:	e00d      	b.n	8005206 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ea:	f7fd fce7 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051f0:	e009      	b.n	8005206 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051f8:	e005      	b.n	8005206 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8089 	beq.w	8005320 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	4a4e      	ldr	r2, [pc, #312]	; (800534c <UART_SetConfig+0x590>)
 8005214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005218:	461a      	mov	r2, r3
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005220:	005a      	lsls	r2, r3, #1
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	441a      	add	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d916      	bls.n	8005268 <UART_SetConfig+0x4ac>
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d212      	bcs.n	8005268 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f023 030f 	bic.w	r3, r3, #15
 800524a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	b29b      	uxth	r3, r3
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	b29a      	uxth	r2, r3
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	4313      	orrs	r3, r2
 800525c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	8bfa      	ldrh	r2, [r7, #30]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e05b      	b.n	8005320 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800526e:	e057      	b.n	8005320 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005270:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005274:	2b08      	cmp	r3, #8
 8005276:	d828      	bhi.n	80052ca <UART_SetConfig+0x50e>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x4c4>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fd fcf8 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052aa:	e014      	b.n	80052d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fd fd0a 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 80052b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b2:	e010      	b.n	80052d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b26      	ldr	r3, [pc, #152]	; (8005350 <UART_SetConfig+0x594>)
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b8:	e00d      	b.n	80052d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fd fc7f 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 80052be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052c0:	e009      	b.n	80052d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052c8:	e005      	b.n	80052d6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052d4:	bf00      	nop
    }

    if (pclk != 0U)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d021      	beq.n	8005320 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <UART_SetConfig+0x590>)
 80052e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	441a      	add	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	d909      	bls.n	800531a <UART_SetConfig+0x55e>
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530c:	d205      	bcs.n	800531a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	b29a      	uxth	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	e002      	b.n	8005320 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2201      	movs	r2, #1
 8005324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2201      	movs	r2, #1
 800532c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800533c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005340:	4618      	mov	r0, r3
 8005342:	3730      	adds	r7, #48	; 0x30
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534a:	bf00      	nop
 800534c:	0800776c 	.word	0x0800776c
 8005350:	00f42400 	.word	0x00f42400

08005354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d10a      	bne.n	800546a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a8:	f7fc fb0a 	bl	8001ac0 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d10e      	bne.n	80054da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f82f 	bl	800552e <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e025      	b.n	8005526 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d10e      	bne.n	8005506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f819 	bl	800552e <UART_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e00f      	b.n	8005526 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b09c      	sub	sp, #112	; 0x70
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553e:	e0a9      	b.n	8005694 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	f000 80a5 	beq.w	8005694 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fc fab9 	bl	8001ac0 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <UART_WaitOnFlagUntilTimeout+0x32>
 800555a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555c:	2b00      	cmp	r3, #0
 800555e:	d140      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005574:	667b      	str	r3, [r7, #100]	; 0x64
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005580:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800558c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e6      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	663b      	str	r3, [r7, #96]	; 0x60
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3308      	adds	r3, #8
 80055b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80055b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e5      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e069      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d051      	beq.n	8005694 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fe:	d149      	bne.n	8005694 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005608:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800561e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
 800562a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800562e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e6      	bne.n	800560a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3308      	adds	r3, #8
 8005642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	613b      	str	r3, [r7, #16]
   return(result);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	66bb      	str	r3, [r7, #104]	; 0x68
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800565c:	623a      	str	r2, [r7, #32]
 800565e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	69f9      	ldr	r1, [r7, #28]
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	61bb      	str	r3, [r7, #24]
   return(result);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e5      	bne.n	800563c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e010      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	f43f af46 	beq.w	8005540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3770      	adds	r7, #112	; 0x70
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b0a3      	sub	sp, #140	; 0x8c
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d10e      	bne.n	8005712 <UART_Start_Receive_IT+0x52>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <UART_Start_Receive_IT+0x48>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005706:	e02d      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	22ff      	movs	r2, #255	; 0xff
 800570c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005710:	e028      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10d      	bne.n	8005736 <UART_Start_Receive_IT+0x76>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <UART_Start_Receive_IT+0x6c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800572a:	e01b      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	227f      	movs	r2, #127	; 0x7f
 8005730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005734:	e016      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573e:	d10d      	bne.n	800575c <UART_Start_Receive_IT+0x9c>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <UART_Start_Receive_IT+0x92>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	227f      	movs	r2, #127	; 0x7f
 800574c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005750:	e008      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	223f      	movs	r2, #63	; 0x3f
 8005756:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800575a:	e003      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2222      	movs	r2, #34	; 0x22
 8005770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005798:	673a      	str	r2, [r7, #112]	; 0x70
 800579a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800579e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80057a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e3      	bne.n	8005774 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b4:	d153      	bne.n	800585e <UART_Start_Receive_IT+0x19e>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d34d      	bcc.n	800585e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ca:	d107      	bne.n	80057dc <UART_Start_Receive_IT+0x11c>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a4b      	ldr	r2, [pc, #300]	; (8005904 <UART_Start_Receive_IT+0x244>)
 80057d8:	671a      	str	r2, [r3, #112]	; 0x70
 80057da:	e002      	b.n	80057e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a4a      	ldr	r2, [pc, #296]	; (8005908 <UART_Start_Receive_IT+0x248>)
 80057e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01a      	beq.n	8005828 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005816:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800581a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e4      	bne.n	80057f2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005848:	64ba      	str	r2, [r7, #72]	; 0x48
 800584a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800584e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_Start_Receive_IT+0x168>
 800585c:	e04a      	b.n	80058f4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d107      	bne.n	8005878 <UART_Start_Receive_IT+0x1b8>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a26      	ldr	r2, [pc, #152]	; (800590c <UART_Start_Receive_IT+0x24c>)
 8005874:	671a      	str	r2, [r3, #112]	; 0x70
 8005876:	e002      	b.n	800587e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a25      	ldr	r2, [pc, #148]	; (8005910 <UART_Start_Receive_IT+0x250>)
 800587c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d019      	beq.n	80058c2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80058a2:	677b      	str	r3, [r7, #116]	; 0x74
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
 80058ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e6      	bne.n	800588e <UART_Start_Receive_IT+0x1ce>
 80058c0:	e018      	b.n	80058f4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	613b      	str	r3, [r7, #16]
   return(result);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f043 0320 	orr.w	r3, r3, #32
 80058d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	69f9      	ldr	r1, [r7, #28]
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e6      	bne.n	80058c2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	378c      	adds	r7, #140	; 0x8c
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	0800601d 	.word	0x0800601d
 8005908:	08005d25 	.word	0x08005d25
 800590c:	08005bc3 	.word	0x08005bc3
 8005910:	08005a63 	.word	0x08005a63

08005914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b095      	sub	sp, #84	; 0x54
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	61fb      	str	r3, [r7, #28]
   return(result);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	64bb      	str	r3, [r7, #72]	; 0x48
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d118      	bne.n	80059c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60bb      	str	r3, [r7, #8]
   return(result);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	647b      	str	r3, [r7, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80059d4:	bf00      	nop
 80059d6:	3754      	adds	r7, #84	; 0x54
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff f9c6 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff f991 	bl	8004d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a5a:	bf00      	nop
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b096      	sub	sp, #88	; 0x58
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	2b22      	cmp	r3, #34	; 0x22
 8005a7c:	f040 8095 	bne.w	8005baa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a8e:	b2d9      	uxtb	r1, r3
 8005a90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	400a      	ands	r2, r1
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d178      	bne.n	8005bba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005adc:	653b      	str	r3, [r7, #80]	; 0x50
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e5      	bne.n	8005afa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d12e      	bne.n	8005ba2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0310 	bic.w	r3, r3, #16
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	617b      	str	r3, [r7, #20]
   return(result);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e6      	bne.n	8005b4a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d103      	bne.n	8005b92 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff f902 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ba0:	e00b      	b.n	8005bba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fa ff7c 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8005ba8:	e007      	b.n	8005bba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0208 	orr.w	r2, r2, #8
 8005bb8:	619a      	str	r2, [r3, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	3758      	adds	r7, #88	; 0x58
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b096      	sub	sp, #88	; 0x58
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	2b22      	cmp	r3, #34	; 0x22
 8005bdc:	f040 8095 	bne.w	8005d0a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bf0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005bf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d178      	bne.n	8005d1a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	643b      	str	r3, [r7, #64]	; 0x40
 8005c48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d12e      	bne.n	8005d02 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6979      	ldr	r1, [r7, #20]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e6      	bne.n	8005caa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d103      	bne.n	8005cf2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff f852 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d00:	e00b      	b.n	8005d1a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fa fecc 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8005d08:	e007      	b.n	8005d1a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	619a      	str	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	3758      	adds	r7, #88	; 0x58
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b0a6      	sub	sp, #152	; 0x98
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d32:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	2b22      	cmp	r3, #34	; 0x22
 8005d5c:	f040 814f 	bne.w	8005ffe <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d66:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d6a:	e0f6      	b.n	8005f5a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d76:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005d7a:	b2d9      	uxtb	r1, r3
 8005d7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	400a      	ands	r2, r1
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d053      	beq.n	8005e66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d011      	beq.n	8005dee <UART_RxISR_8BIT_FIFOEN+0xca>
 8005dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de4:	f043 0201 	orr.w	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d011      	beq.n	8005e1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e14:	f043 0204 	orr.w	r2, r3, #4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d011      	beq.n	8005e4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e44:	f043 0202 	orr.w	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d006      	beq.n	8005e66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7fe ff99 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d173      	bne.n	8005f5a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e96:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005e9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e4      	bne.n	8005e72 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ecc:	657a      	str	r2, [r7, #84]	; 0x54
 8005ece:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e3      	bne.n	8005ea8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d12e      	bne.n	8005f54 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e6      	bne.n	8005efc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d103      	bne.n	8005f44 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2210      	movs	r2, #16
 8005f42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7fe ff29 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
 8005f52:	e002      	b.n	8005f5a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7fa fda3 	bl	8000aa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f47f aefe 	bne.w	8005d6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f7a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d045      	beq.n	800600e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d23e      	bcs.n	800600e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a14      	ldr	r2, [pc, #80]	; (8006018 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005fc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f043 0320 	orr.w	r3, r3, #32
 8005fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6979      	ldr	r1, [r7, #20]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e6      	bne.n	8005fca <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ffc:	e007      	b.n	800600e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0208 	orr.w	r2, r2, #8
 800600c:	619a      	str	r2, [r3, #24]
}
 800600e:	bf00      	nop
 8006010:	3798      	adds	r7, #152	; 0x98
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	08005a63 	.word	0x08005a63

0800601c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b0a8      	sub	sp, #160	; 0xa0
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800602a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	2b22      	cmp	r3, #34	; 0x22
 8006054:	f040 8153 	bne.w	80062fe <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800605e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006062:	e0fa      	b.n	800625a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006076:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800607a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800607e:	4013      	ands	r3, r2
 8006080:	b29a      	uxth	r2, r3
 8006082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	1c9a      	adds	r2, r3, #2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d053      	beq.n	8006162 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <UART_RxISR_16BIT_FIFOEN+0xce>
 80060c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e0:	f043 0201 	orr.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80060f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2202      	movs	r2, #2
 8006108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006110:	f043 0204 	orr.w	r2, r3, #4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800611a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2204      	movs	r2, #4
 8006138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006140:	f043 0202 	orr.w	r2, r3, #2
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fe fe1b 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d175      	bne.n	800625a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800617c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006192:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006196:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800619e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e4      	bne.n	800616e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80061ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e1      	bne.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d12e      	bne.n	8006254 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	f023 0310 	bic.w	r3, r3, #16
 8006210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800621a:	647b      	str	r3, [r7, #68]	; 0x44
 800621c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e6      	bne.n	80061fc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b10      	cmp	r3, #16
 800623a:	d103      	bne.n	8006244 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2210      	movs	r2, #16
 8006242:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fe fda9 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
 8006252:	e002      	b.n	800625a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fa fc23 	bl	8000aa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800625a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800625e:	2b00      	cmp	r3, #0
 8006260:	d006      	beq.n	8006270 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	f47f aefa 	bne.w	8006064 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006276:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800627a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800627e:	2b00      	cmp	r3, #0
 8006280:	d045      	beq.n	800630e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006288:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800628c:	429a      	cmp	r2, r3
 800628e:	d23e      	bcs.n	800630e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3308      	adds	r3, #8
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	623b      	str	r3, [r7, #32]
   return(result);
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a6:	677b      	str	r3, [r7, #116]	; 0x74
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80062b0:	633a      	str	r2, [r7, #48]	; 0x30
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e5      	bne.n	8006290 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a14      	ldr	r2, [pc, #80]	; (8006318 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80062c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f043 0320 	orr.w	r3, r3, #32
 80062de:	673b      	str	r3, [r7, #112]	; 0x70
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	69b9      	ldr	r1, [r7, #24]
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	617b      	str	r3, [r7, #20]
   return(result);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062fc:	e007      	b.n	800630e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0208 	orr.w	r2, r2, #8
 800630c:	619a      	str	r2, [r3, #24]
}
 800630e:	bf00      	nop
 8006310:	37a0      	adds	r7, #160	; 0xa0
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	08005bc3 	.word	0x08005bc3

0800631c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_UARTEx_DisableFifoMode+0x16>
 800636a:	2302      	movs	r3, #2
 800636c:	e027      	b.n	80063be <HAL_UARTEx_DisableFifoMode+0x66>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2224      	movs	r2, #36	; 0x24
 800637a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800639c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063de:	2302      	movs	r3, #2
 80063e0:	e02d      	b.n	800643e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2224      	movs	r2, #36	; 0x24
 80063ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f850 	bl	80064c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800645a:	2302      	movs	r3, #2
 800645c:	e02d      	b.n	80064ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	; 0x24
 800646a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f812 	bl	80064c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d108      	bne.n	80064e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064e4:	e031      	b.n	800654a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064e6:	2308      	movs	r3, #8
 80064e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ea:	2308      	movs	r3, #8
 80064ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	0e5b      	lsrs	r3, r3, #25
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	0f5b      	lsrs	r3, r3, #29
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	7b3a      	ldrb	r2, [r7, #12]
 8006512:	4911      	ldr	r1, [pc, #68]	; (8006558 <UARTEx_SetNbDataToProcess+0x94>)
 8006514:	5c8a      	ldrb	r2, [r1, r2]
 8006516:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800651a:	7b3a      	ldrb	r2, [r7, #12]
 800651c:	490f      	ldr	r1, [pc, #60]	; (800655c <UARTEx_SetNbDataToProcess+0x98>)
 800651e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006520:	fb93 f3f2 	sdiv	r3, r3, r2
 8006524:	b29a      	uxth	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	7b7a      	ldrb	r2, [r7, #13]
 8006530:	4909      	ldr	r1, [pc, #36]	; (8006558 <UARTEx_SetNbDataToProcess+0x94>)
 8006532:	5c8a      	ldrb	r2, [r1, r2]
 8006534:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006538:	7b7a      	ldrb	r2, [r7, #13]
 800653a:	4908      	ldr	r1, [pc, #32]	; (800655c <UARTEx_SetNbDataToProcess+0x98>)
 800653c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800653e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	08007784 	.word	0x08007784
 800655c:	0800778c 	.word	0x0800778c

08006560 <atoi>:
 8006560:	220a      	movs	r2, #10
 8006562:	2100      	movs	r1, #0
 8006564:	f000 b882 	b.w	800666c <strtol>

08006568 <_strtol_l.constprop.0>:
 8006568:	2b01      	cmp	r3, #1
 800656a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800656e:	d001      	beq.n	8006574 <_strtol_l.constprop.0+0xc>
 8006570:	2b24      	cmp	r3, #36	; 0x24
 8006572:	d906      	bls.n	8006582 <_strtol_l.constprop.0+0x1a>
 8006574:	f000 fa00 	bl	8006978 <__errno>
 8006578:	2316      	movs	r3, #22
 800657a:	6003      	str	r3, [r0, #0]
 800657c:	2000      	movs	r0, #0
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006668 <_strtol_l.constprop.0+0x100>
 8006586:	460d      	mov	r5, r1
 8006588:	462e      	mov	r6, r5
 800658a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800658e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006592:	f017 0708 	ands.w	r7, r7, #8
 8006596:	d1f7      	bne.n	8006588 <_strtol_l.constprop.0+0x20>
 8006598:	2c2d      	cmp	r4, #45	; 0x2d
 800659a:	d132      	bne.n	8006602 <_strtol_l.constprop.0+0x9a>
 800659c:	782c      	ldrb	r4, [r5, #0]
 800659e:	2701      	movs	r7, #1
 80065a0:	1cb5      	adds	r5, r6, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d05b      	beq.n	800665e <_strtol_l.constprop.0+0xf6>
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d109      	bne.n	80065be <_strtol_l.constprop.0+0x56>
 80065aa:	2c30      	cmp	r4, #48	; 0x30
 80065ac:	d107      	bne.n	80065be <_strtol_l.constprop.0+0x56>
 80065ae:	782c      	ldrb	r4, [r5, #0]
 80065b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065b4:	2c58      	cmp	r4, #88	; 0x58
 80065b6:	d14d      	bne.n	8006654 <_strtol_l.constprop.0+0xec>
 80065b8:	786c      	ldrb	r4, [r5, #1]
 80065ba:	2310      	movs	r3, #16
 80065bc:	3502      	adds	r5, #2
 80065be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80065c6:	f04f 0e00 	mov.w	lr, #0
 80065ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80065ce:	4676      	mov	r6, lr
 80065d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80065d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80065d8:	f1bc 0f09 	cmp.w	ip, #9
 80065dc:	d816      	bhi.n	800660c <_strtol_l.constprop.0+0xa4>
 80065de:	4664      	mov	r4, ip
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	dd24      	ble.n	800662e <_strtol_l.constprop.0+0xc6>
 80065e4:	f1be 3fff 	cmp.w	lr, #4294967295
 80065e8:	d008      	beq.n	80065fc <_strtol_l.constprop.0+0x94>
 80065ea:	45b1      	cmp	r9, r6
 80065ec:	d31c      	bcc.n	8006628 <_strtol_l.constprop.0+0xc0>
 80065ee:	d101      	bne.n	80065f4 <_strtol_l.constprop.0+0x8c>
 80065f0:	45a2      	cmp	sl, r4
 80065f2:	db19      	blt.n	8006628 <_strtol_l.constprop.0+0xc0>
 80065f4:	fb06 4603 	mla	r6, r6, r3, r4
 80065f8:	f04f 0e01 	mov.w	lr, #1
 80065fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006600:	e7e8      	b.n	80065d4 <_strtol_l.constprop.0+0x6c>
 8006602:	2c2b      	cmp	r4, #43	; 0x2b
 8006604:	bf04      	itt	eq
 8006606:	782c      	ldrbeq	r4, [r5, #0]
 8006608:	1cb5      	addeq	r5, r6, #2
 800660a:	e7ca      	b.n	80065a2 <_strtol_l.constprop.0+0x3a>
 800660c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006610:	f1bc 0f19 	cmp.w	ip, #25
 8006614:	d801      	bhi.n	800661a <_strtol_l.constprop.0+0xb2>
 8006616:	3c37      	subs	r4, #55	; 0x37
 8006618:	e7e2      	b.n	80065e0 <_strtol_l.constprop.0+0x78>
 800661a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800661e:	f1bc 0f19 	cmp.w	ip, #25
 8006622:	d804      	bhi.n	800662e <_strtol_l.constprop.0+0xc6>
 8006624:	3c57      	subs	r4, #87	; 0x57
 8006626:	e7db      	b.n	80065e0 <_strtol_l.constprop.0+0x78>
 8006628:	f04f 3eff 	mov.w	lr, #4294967295
 800662c:	e7e6      	b.n	80065fc <_strtol_l.constprop.0+0x94>
 800662e:	f1be 3fff 	cmp.w	lr, #4294967295
 8006632:	d105      	bne.n	8006640 <_strtol_l.constprop.0+0xd8>
 8006634:	2322      	movs	r3, #34	; 0x22
 8006636:	6003      	str	r3, [r0, #0]
 8006638:	4646      	mov	r6, r8
 800663a:	b942      	cbnz	r2, 800664e <_strtol_l.constprop.0+0xe6>
 800663c:	4630      	mov	r0, r6
 800663e:	e79e      	b.n	800657e <_strtol_l.constprop.0+0x16>
 8006640:	b107      	cbz	r7, 8006644 <_strtol_l.constprop.0+0xdc>
 8006642:	4276      	negs	r6, r6
 8006644:	2a00      	cmp	r2, #0
 8006646:	d0f9      	beq.n	800663c <_strtol_l.constprop.0+0xd4>
 8006648:	f1be 0f00 	cmp.w	lr, #0
 800664c:	d000      	beq.n	8006650 <_strtol_l.constprop.0+0xe8>
 800664e:	1e69      	subs	r1, r5, #1
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	e7f3      	b.n	800663c <_strtol_l.constprop.0+0xd4>
 8006654:	2430      	movs	r4, #48	; 0x30
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1b1      	bne.n	80065be <_strtol_l.constprop.0+0x56>
 800665a:	2308      	movs	r3, #8
 800665c:	e7af      	b.n	80065be <_strtol_l.constprop.0+0x56>
 800665e:	2c30      	cmp	r4, #48	; 0x30
 8006660:	d0a5      	beq.n	80065ae <_strtol_l.constprop.0+0x46>
 8006662:	230a      	movs	r3, #10
 8006664:	e7ab      	b.n	80065be <_strtol_l.constprop.0+0x56>
 8006666:	bf00      	nop
 8006668:	08007795 	.word	0x08007795

0800666c <strtol>:
 800666c:	4613      	mov	r3, r2
 800666e:	460a      	mov	r2, r1
 8006670:	4601      	mov	r1, r0
 8006672:	4802      	ldr	r0, [pc, #8]	; (800667c <strtol+0x10>)
 8006674:	6800      	ldr	r0, [r0, #0]
 8006676:	f7ff bf77 	b.w	8006568 <_strtol_l.constprop.0>
 800667a:	bf00      	nop
 800667c:	20000064 	.word	0x20000064

08006680 <std>:
 8006680:	2300      	movs	r3, #0
 8006682:	b510      	push	{r4, lr}
 8006684:	4604      	mov	r4, r0
 8006686:	e9c0 3300 	strd	r3, r3, [r0]
 800668a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800668e:	6083      	str	r3, [r0, #8]
 8006690:	8181      	strh	r1, [r0, #12]
 8006692:	6643      	str	r3, [r0, #100]	; 0x64
 8006694:	81c2      	strh	r2, [r0, #14]
 8006696:	6183      	str	r3, [r0, #24]
 8006698:	4619      	mov	r1, r3
 800669a:	2208      	movs	r2, #8
 800669c:	305c      	adds	r0, #92	; 0x5c
 800669e:	f000 f906 	bl	80068ae <memset>
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <std+0x58>)
 80066a4:	6263      	str	r3, [r4, #36]	; 0x24
 80066a6:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <std+0x5c>)
 80066a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <std+0x60>)
 80066ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066ae:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <std+0x64>)
 80066b0:	6323      	str	r3, [r4, #48]	; 0x30
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <std+0x68>)
 80066b4:	6224      	str	r4, [r4, #32]
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d006      	beq.n	80066c8 <std+0x48>
 80066ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80066be:	4294      	cmp	r4, r2
 80066c0:	d002      	beq.n	80066c8 <std+0x48>
 80066c2:	33d0      	adds	r3, #208	; 0xd0
 80066c4:	429c      	cmp	r4, r3
 80066c6:	d105      	bne.n	80066d4 <std+0x54>
 80066c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f000 b97c 	b.w	80069cc <__retarget_lock_init_recursive>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	08006829 	.word	0x08006829
 80066dc:	0800684b 	.word	0x0800684b
 80066e0:	08006883 	.word	0x08006883
 80066e4:	080068a7 	.word	0x080068a7
 80066e8:	20000898 	.word	0x20000898

080066ec <stdio_exit_handler>:
 80066ec:	4a02      	ldr	r2, [pc, #8]	; (80066f8 <stdio_exit_handler+0xc>)
 80066ee:	4903      	ldr	r1, [pc, #12]	; (80066fc <stdio_exit_handler+0x10>)
 80066f0:	4803      	ldr	r0, [pc, #12]	; (8006700 <stdio_exit_handler+0x14>)
 80066f2:	f000 b869 	b.w	80067c8 <_fwalk_sglue>
 80066f6:	bf00      	nop
 80066f8:	2000000c 	.word	0x2000000c
 80066fc:	08007295 	.word	0x08007295
 8006700:	20000018 	.word	0x20000018

08006704 <cleanup_stdio>:
 8006704:	6841      	ldr	r1, [r0, #4]
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <cleanup_stdio+0x34>)
 8006708:	4299      	cmp	r1, r3
 800670a:	b510      	push	{r4, lr}
 800670c:	4604      	mov	r4, r0
 800670e:	d001      	beq.n	8006714 <cleanup_stdio+0x10>
 8006710:	f000 fdc0 	bl	8007294 <_fflush_r>
 8006714:	68a1      	ldr	r1, [r4, #8]
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <cleanup_stdio+0x38>)
 8006718:	4299      	cmp	r1, r3
 800671a:	d002      	beq.n	8006722 <cleanup_stdio+0x1e>
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fdb9 	bl	8007294 <_fflush_r>
 8006722:	68e1      	ldr	r1, [r4, #12]
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <cleanup_stdio+0x3c>)
 8006726:	4299      	cmp	r1, r3
 8006728:	d004      	beq.n	8006734 <cleanup_stdio+0x30>
 800672a:	4620      	mov	r0, r4
 800672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006730:	f000 bdb0 	b.w	8007294 <_fflush_r>
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	20000898 	.word	0x20000898
 800673c:	20000900 	.word	0x20000900
 8006740:	20000968 	.word	0x20000968

08006744 <global_stdio_init.part.0>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <global_stdio_init.part.0+0x30>)
 8006748:	4c0b      	ldr	r4, [pc, #44]	; (8006778 <global_stdio_init.part.0+0x34>)
 800674a:	4a0c      	ldr	r2, [pc, #48]	; (800677c <global_stdio_init.part.0+0x38>)
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	4620      	mov	r0, r4
 8006750:	2200      	movs	r2, #0
 8006752:	2104      	movs	r1, #4
 8006754:	f7ff ff94 	bl	8006680 <std>
 8006758:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800675c:	2201      	movs	r2, #1
 800675e:	2109      	movs	r1, #9
 8006760:	f7ff ff8e 	bl	8006680 <std>
 8006764:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006768:	2202      	movs	r2, #2
 800676a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800676e:	2112      	movs	r1, #18
 8006770:	f7ff bf86 	b.w	8006680 <std>
 8006774:	200009d0 	.word	0x200009d0
 8006778:	20000898 	.word	0x20000898
 800677c:	080066ed 	.word	0x080066ed

08006780 <__sfp_lock_acquire>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__sfp_lock_acquire+0x8>)
 8006782:	f000 b924 	b.w	80069ce <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	200009d9 	.word	0x200009d9

0800678c <__sfp_lock_release>:
 800678c:	4801      	ldr	r0, [pc, #4]	; (8006794 <__sfp_lock_release+0x8>)
 800678e:	f000 b91f 	b.w	80069d0 <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	200009d9 	.word	0x200009d9

08006798 <__sinit>:
 8006798:	b510      	push	{r4, lr}
 800679a:	4604      	mov	r4, r0
 800679c:	f7ff fff0 	bl	8006780 <__sfp_lock_acquire>
 80067a0:	6a23      	ldr	r3, [r4, #32]
 80067a2:	b11b      	cbz	r3, 80067ac <__sinit+0x14>
 80067a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a8:	f7ff bff0 	b.w	800678c <__sfp_lock_release>
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <__sinit+0x28>)
 80067ae:	6223      	str	r3, [r4, #32]
 80067b0:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <__sinit+0x2c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f5      	bne.n	80067a4 <__sinit+0xc>
 80067b8:	f7ff ffc4 	bl	8006744 <global_stdio_init.part.0>
 80067bc:	e7f2      	b.n	80067a4 <__sinit+0xc>
 80067be:	bf00      	nop
 80067c0:	08006705 	.word	0x08006705
 80067c4:	200009d0 	.word	0x200009d0

080067c8 <_fwalk_sglue>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4607      	mov	r7, r0
 80067ce:	4688      	mov	r8, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	2600      	movs	r6, #0
 80067d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067d8:	f1b9 0901 	subs.w	r9, r9, #1
 80067dc:	d505      	bpl.n	80067ea <_fwalk_sglue+0x22>
 80067de:	6824      	ldr	r4, [r4, #0]
 80067e0:	2c00      	cmp	r4, #0
 80067e2:	d1f7      	bne.n	80067d4 <_fwalk_sglue+0xc>
 80067e4:	4630      	mov	r0, r6
 80067e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d907      	bls.n	8006800 <_fwalk_sglue+0x38>
 80067f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067f4:	3301      	adds	r3, #1
 80067f6:	d003      	beq.n	8006800 <_fwalk_sglue+0x38>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4638      	mov	r0, r7
 80067fc:	47c0      	blx	r8
 80067fe:	4306      	orrs	r6, r0
 8006800:	3568      	adds	r5, #104	; 0x68
 8006802:	e7e9      	b.n	80067d8 <_fwalk_sglue+0x10>

08006804 <iprintf>:
 8006804:	b40f      	push	{r0, r1, r2, r3}
 8006806:	b507      	push	{r0, r1, r2, lr}
 8006808:	4906      	ldr	r1, [pc, #24]	; (8006824 <iprintf+0x20>)
 800680a:	ab04      	add	r3, sp, #16
 800680c:	6808      	ldr	r0, [r1, #0]
 800680e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006812:	6881      	ldr	r1, [r0, #8]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	f000 fa0d 	bl	8006c34 <_vfiprintf_r>
 800681a:	b003      	add	sp, #12
 800681c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006820:	b004      	add	sp, #16
 8006822:	4770      	bx	lr
 8006824:	20000064 	.word	0x20000064

08006828 <__sread>:
 8006828:	b510      	push	{r4, lr}
 800682a:	460c      	mov	r4, r1
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	f000 f87e 	bl	8006930 <_read_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	bfab      	itete	ge
 8006838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800683a:	89a3      	ldrhlt	r3, [r4, #12]
 800683c:	181b      	addge	r3, r3, r0
 800683e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006842:	bfac      	ite	ge
 8006844:	6563      	strge	r3, [r4, #84]	; 0x54
 8006846:	81a3      	strhlt	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__swrite>:
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	461f      	mov	r7, r3
 8006850:	898b      	ldrh	r3, [r1, #12]
 8006852:	05db      	lsls	r3, r3, #23
 8006854:	4605      	mov	r5, r0
 8006856:	460c      	mov	r4, r1
 8006858:	4616      	mov	r6, r2
 800685a:	d505      	bpl.n	8006868 <__swrite+0x1e>
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	2302      	movs	r3, #2
 8006862:	2200      	movs	r2, #0
 8006864:	f000 f852 	bl	800690c <_lseek_r>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	4632      	mov	r2, r6
 8006876:	463b      	mov	r3, r7
 8006878:	4628      	mov	r0, r5
 800687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	f000 b869 	b.w	8006954 <_write_r>

08006882 <__sseek>:
 8006882:	b510      	push	{r4, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688a:	f000 f83f 	bl	800690c <_lseek_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	bf15      	itete	ne
 8006894:	6560      	strne	r0, [r4, #84]	; 0x54
 8006896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800689a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800689e:	81a3      	strheq	r3, [r4, #12]
 80068a0:	bf18      	it	ne
 80068a2:	81a3      	strhne	r3, [r4, #12]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <__sclose>:
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 b81f 	b.w	80068ec <_close_r>

080068ae <memset>:
 80068ae:	4402      	add	r2, r0
 80068b0:	4603      	mov	r3, r0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d100      	bne.n	80068b8 <memset+0xa>
 80068b6:	4770      	bx	lr
 80068b8:	f803 1b01 	strb.w	r1, [r3], #1
 80068bc:	e7f9      	b.n	80068b2 <memset+0x4>

080068be <strstr>:
 80068be:	780a      	ldrb	r2, [r1, #0]
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	b96a      	cbnz	r2, 80068e0 <strstr+0x22>
 80068c4:	bd70      	pop	{r4, r5, r6, pc}
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d109      	bne.n	80068de <strstr+0x20>
 80068ca:	460c      	mov	r4, r1
 80068cc:	4605      	mov	r5, r0
 80068ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f6      	beq.n	80068c4 <strstr+0x6>
 80068d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80068da:	429e      	cmp	r6, r3
 80068dc:	d0f7      	beq.n	80068ce <strstr+0x10>
 80068de:	3001      	adds	r0, #1
 80068e0:	7803      	ldrb	r3, [r0, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1ef      	bne.n	80068c6 <strstr+0x8>
 80068e6:	4618      	mov	r0, r3
 80068e8:	e7ec      	b.n	80068c4 <strstr+0x6>
	...

080068ec <_close_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d06      	ldr	r5, [pc, #24]	; (8006908 <_close_r+0x1c>)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	f7fa ffd7 	bl	80018aa <_close>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_close_r+0x1a>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_close_r+0x1a>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	200009d4 	.word	0x200009d4

0800690c <_lseek_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4d07      	ldr	r5, [pc, #28]	; (800692c <_lseek_r+0x20>)
 8006910:	4604      	mov	r4, r0
 8006912:	4608      	mov	r0, r1
 8006914:	4611      	mov	r1, r2
 8006916:	2200      	movs	r2, #0
 8006918:	602a      	str	r2, [r5, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	f7fa ffec 	bl	80018f8 <_lseek>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_lseek_r+0x1e>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_lseek_r+0x1e>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	200009d4 	.word	0x200009d4

08006930 <_read_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d07      	ldr	r5, [pc, #28]	; (8006950 <_read_r+0x20>)
 8006934:	4604      	mov	r4, r0
 8006936:	4608      	mov	r0, r1
 8006938:	4611      	mov	r1, r2
 800693a:	2200      	movs	r2, #0
 800693c:	602a      	str	r2, [r5, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f7fa ff96 	bl	8001870 <_read>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_read_r+0x1e>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_read_r+0x1e>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	200009d4 	.word	0x200009d4

08006954 <_write_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	; (8006974 <_write_r+0x20>)
 8006958:	4604      	mov	r4, r0
 800695a:	4608      	mov	r0, r1
 800695c:	4611      	mov	r1, r2
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f7fa f88a 	bl	8000a7c <_write>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_write_r+0x1e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_write_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	200009d4 	.word	0x200009d4

08006978 <__errno>:
 8006978:	4b01      	ldr	r3, [pc, #4]	; (8006980 <__errno+0x8>)
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20000064 	.word	0x20000064

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4d0d      	ldr	r5, [pc, #52]	; (80069bc <__libc_init_array+0x38>)
 8006988:	4c0d      	ldr	r4, [pc, #52]	; (80069c0 <__libc_init_array+0x3c>)
 800698a:	1b64      	subs	r4, r4, r5
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	2600      	movs	r6, #0
 8006990:	42a6      	cmp	r6, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	4d0b      	ldr	r5, [pc, #44]	; (80069c4 <__libc_init_array+0x40>)
 8006996:	4c0c      	ldr	r4, [pc, #48]	; (80069c8 <__libc_init_array+0x44>)
 8006998:	f000 fdce 	bl	8007538 <_init>
 800699c:	1b64      	subs	r4, r4, r5
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	2600      	movs	r6, #0
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ac:	4798      	blx	r3
 80069ae:	3601      	adds	r6, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b6:	4798      	blx	r3
 80069b8:	3601      	adds	r6, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	080078d0 	.word	0x080078d0
 80069c0:	080078d0 	.word	0x080078d0
 80069c4:	080078d0 	.word	0x080078d0
 80069c8:	080078d4 	.word	0x080078d4

080069cc <__retarget_lock_init_recursive>:
 80069cc:	4770      	bx	lr

080069ce <__retarget_lock_acquire_recursive>:
 80069ce:	4770      	bx	lr

080069d0 <__retarget_lock_release_recursive>:
 80069d0:	4770      	bx	lr

080069d2 <memcpy>:
 80069d2:	440a      	add	r2, r1
 80069d4:	4291      	cmp	r1, r2
 80069d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80069da:	d100      	bne.n	80069de <memcpy+0xc>
 80069dc:	4770      	bx	lr
 80069de:	b510      	push	{r4, lr}
 80069e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e8:	4291      	cmp	r1, r2
 80069ea:	d1f9      	bne.n	80069e0 <memcpy+0xe>
 80069ec:	bd10      	pop	{r4, pc}
	...

080069f0 <_free_r>:
 80069f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f2:	2900      	cmp	r1, #0
 80069f4:	d044      	beq.n	8006a80 <_free_r+0x90>
 80069f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fa:	9001      	str	r0, [sp, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006a02:	bfb8      	it	lt
 8006a04:	18e4      	addlt	r4, r4, r3
 8006a06:	f000 f8df 	bl	8006bc8 <__malloc_lock>
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <_free_r+0x94>)
 8006a0c:	9801      	ldr	r0, [sp, #4]
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	b933      	cbnz	r3, 8006a20 <_free_r+0x30>
 8006a12:	6063      	str	r3, [r4, #4]
 8006a14:	6014      	str	r4, [r2, #0]
 8006a16:	b003      	add	sp, #12
 8006a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a1c:	f000 b8da 	b.w	8006bd4 <__malloc_unlock>
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	d908      	bls.n	8006a36 <_free_r+0x46>
 8006a24:	6825      	ldr	r5, [r4, #0]
 8006a26:	1961      	adds	r1, r4, r5
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	bf01      	itttt	eq
 8006a2c:	6819      	ldreq	r1, [r3, #0]
 8006a2e:	685b      	ldreq	r3, [r3, #4]
 8006a30:	1949      	addeq	r1, r1, r5
 8006a32:	6021      	streq	r1, [r4, #0]
 8006a34:	e7ed      	b.n	8006a12 <_free_r+0x22>
 8006a36:	461a      	mov	r2, r3
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	b10b      	cbz	r3, 8006a40 <_free_r+0x50>
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d9fa      	bls.n	8006a36 <_free_r+0x46>
 8006a40:	6811      	ldr	r1, [r2, #0]
 8006a42:	1855      	adds	r5, r2, r1
 8006a44:	42a5      	cmp	r5, r4
 8006a46:	d10b      	bne.n	8006a60 <_free_r+0x70>
 8006a48:	6824      	ldr	r4, [r4, #0]
 8006a4a:	4421      	add	r1, r4
 8006a4c:	1854      	adds	r4, r2, r1
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	6011      	str	r1, [r2, #0]
 8006a52:	d1e0      	bne.n	8006a16 <_free_r+0x26>
 8006a54:	681c      	ldr	r4, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	6053      	str	r3, [r2, #4]
 8006a5a:	440c      	add	r4, r1
 8006a5c:	6014      	str	r4, [r2, #0]
 8006a5e:	e7da      	b.n	8006a16 <_free_r+0x26>
 8006a60:	d902      	bls.n	8006a68 <_free_r+0x78>
 8006a62:	230c      	movs	r3, #12
 8006a64:	6003      	str	r3, [r0, #0]
 8006a66:	e7d6      	b.n	8006a16 <_free_r+0x26>
 8006a68:	6825      	ldr	r5, [r4, #0]
 8006a6a:	1961      	adds	r1, r4, r5
 8006a6c:	428b      	cmp	r3, r1
 8006a6e:	bf04      	itt	eq
 8006a70:	6819      	ldreq	r1, [r3, #0]
 8006a72:	685b      	ldreq	r3, [r3, #4]
 8006a74:	6063      	str	r3, [r4, #4]
 8006a76:	bf04      	itt	eq
 8006a78:	1949      	addeq	r1, r1, r5
 8006a7a:	6021      	streq	r1, [r4, #0]
 8006a7c:	6054      	str	r4, [r2, #4]
 8006a7e:	e7ca      	b.n	8006a16 <_free_r+0x26>
 8006a80:	b003      	add	sp, #12
 8006a82:	bd30      	pop	{r4, r5, pc}
 8006a84:	200009dc 	.word	0x200009dc

08006a88 <sbrk_aligned>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	4e0e      	ldr	r6, [pc, #56]	; (8006ac4 <sbrk_aligned+0x3c>)
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	6831      	ldr	r1, [r6, #0]
 8006a90:	4605      	mov	r5, r0
 8006a92:	b911      	cbnz	r1, 8006a9a <sbrk_aligned+0x12>
 8006a94:	f000 fcbc 	bl	8007410 <_sbrk_r>
 8006a98:	6030      	str	r0, [r6, #0]
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 fcb7 	bl	8007410 <_sbrk_r>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d00a      	beq.n	8006abc <sbrk_aligned+0x34>
 8006aa6:	1cc4      	adds	r4, r0, #3
 8006aa8:	f024 0403 	bic.w	r4, r4, #3
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d007      	beq.n	8006ac0 <sbrk_aligned+0x38>
 8006ab0:	1a21      	subs	r1, r4, r0
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fcac 	bl	8007410 <_sbrk_r>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d101      	bne.n	8006ac0 <sbrk_aligned+0x38>
 8006abc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	200009e0 	.word	0x200009e0

08006ac8 <_malloc_r>:
 8006ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006acc:	1ccd      	adds	r5, r1, #3
 8006ace:	f025 0503 	bic.w	r5, r5, #3
 8006ad2:	3508      	adds	r5, #8
 8006ad4:	2d0c      	cmp	r5, #12
 8006ad6:	bf38      	it	cc
 8006ad8:	250c      	movcc	r5, #12
 8006ada:	2d00      	cmp	r5, #0
 8006adc:	4607      	mov	r7, r0
 8006ade:	db01      	blt.n	8006ae4 <_malloc_r+0x1c>
 8006ae0:	42a9      	cmp	r1, r5
 8006ae2:	d905      	bls.n	8006af0 <_malloc_r+0x28>
 8006ae4:	230c      	movs	r3, #12
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	2600      	movs	r6, #0
 8006aea:	4630      	mov	r0, r6
 8006aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006bc4 <_malloc_r+0xfc>
 8006af4:	f000 f868 	bl	8006bc8 <__malloc_lock>
 8006af8:	f8d8 3000 	ldr.w	r3, [r8]
 8006afc:	461c      	mov	r4, r3
 8006afe:	bb5c      	cbnz	r4, 8006b58 <_malloc_r+0x90>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4638      	mov	r0, r7
 8006b04:	f7ff ffc0 	bl	8006a88 <sbrk_aligned>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	d155      	bne.n	8006bba <_malloc_r+0xf2>
 8006b0e:	f8d8 4000 	ldr.w	r4, [r8]
 8006b12:	4626      	mov	r6, r4
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	d145      	bne.n	8006ba4 <_malloc_r+0xdc>
 8006b18:	2c00      	cmp	r4, #0
 8006b1a:	d048      	beq.n	8006bae <_malloc_r+0xe6>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4638      	mov	r0, r7
 8006b22:	eb04 0903 	add.w	r9, r4, r3
 8006b26:	f000 fc73 	bl	8007410 <_sbrk_r>
 8006b2a:	4581      	cmp	r9, r0
 8006b2c:	d13f      	bne.n	8006bae <_malloc_r+0xe6>
 8006b2e:	6821      	ldr	r1, [r4, #0]
 8006b30:	1a6d      	subs	r5, r5, r1
 8006b32:	4629      	mov	r1, r5
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ffa7 	bl	8006a88 <sbrk_aligned>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d037      	beq.n	8006bae <_malloc_r+0xe6>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	442b      	add	r3, r5
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	f8d8 3000 	ldr.w	r3, [r8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d038      	beq.n	8006bbe <_malloc_r+0xf6>
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	42a2      	cmp	r2, r4
 8006b50:	d12b      	bne.n	8006baa <_malloc_r+0xe2>
 8006b52:	2200      	movs	r2, #0
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	e00f      	b.n	8006b78 <_malloc_r+0xb0>
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	1b52      	subs	r2, r2, r5
 8006b5c:	d41f      	bmi.n	8006b9e <_malloc_r+0xd6>
 8006b5e:	2a0b      	cmp	r2, #11
 8006b60:	d917      	bls.n	8006b92 <_malloc_r+0xca>
 8006b62:	1961      	adds	r1, r4, r5
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	6025      	str	r5, [r4, #0]
 8006b68:	bf18      	it	ne
 8006b6a:	6059      	strne	r1, [r3, #4]
 8006b6c:	6863      	ldr	r3, [r4, #4]
 8006b6e:	bf08      	it	eq
 8006b70:	f8c8 1000 	streq.w	r1, [r8]
 8006b74:	5162      	str	r2, [r4, r5]
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f104 060b 	add.w	r6, r4, #11
 8006b7e:	f000 f829 	bl	8006bd4 <__malloc_unlock>
 8006b82:	f026 0607 	bic.w	r6, r6, #7
 8006b86:	1d23      	adds	r3, r4, #4
 8006b88:	1af2      	subs	r2, r6, r3
 8006b8a:	d0ae      	beq.n	8006aea <_malloc_r+0x22>
 8006b8c:	1b9b      	subs	r3, r3, r6
 8006b8e:	50a3      	str	r3, [r4, r2]
 8006b90:	e7ab      	b.n	8006aea <_malloc_r+0x22>
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	6862      	ldr	r2, [r4, #4]
 8006b96:	d1dd      	bne.n	8006b54 <_malloc_r+0x8c>
 8006b98:	f8c8 2000 	str.w	r2, [r8]
 8006b9c:	e7ec      	b.n	8006b78 <_malloc_r+0xb0>
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	6864      	ldr	r4, [r4, #4]
 8006ba2:	e7ac      	b.n	8006afe <_malloc_r+0x36>
 8006ba4:	4634      	mov	r4, r6
 8006ba6:	6876      	ldr	r6, [r6, #4]
 8006ba8:	e7b4      	b.n	8006b14 <_malloc_r+0x4c>
 8006baa:	4613      	mov	r3, r2
 8006bac:	e7cc      	b.n	8006b48 <_malloc_r+0x80>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f000 f80e 	bl	8006bd4 <__malloc_unlock>
 8006bb8:	e797      	b.n	8006aea <_malloc_r+0x22>
 8006bba:	6025      	str	r5, [r4, #0]
 8006bbc:	e7dc      	b.n	8006b78 <_malloc_r+0xb0>
 8006bbe:	605b      	str	r3, [r3, #4]
 8006bc0:	deff      	udf	#255	; 0xff
 8006bc2:	bf00      	nop
 8006bc4:	200009dc 	.word	0x200009dc

08006bc8 <__malloc_lock>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__malloc_lock+0x8>)
 8006bca:	f7ff bf00 	b.w	80069ce <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	200009d8 	.word	0x200009d8

08006bd4 <__malloc_unlock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__malloc_unlock+0x8>)
 8006bd6:	f7ff befb 	b.w	80069d0 <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	200009d8 	.word	0x200009d8

08006be0 <__sfputc_r>:
 8006be0:	6893      	ldr	r3, [r2, #8]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	b410      	push	{r4}
 8006be8:	6093      	str	r3, [r2, #8]
 8006bea:	da08      	bge.n	8006bfe <__sfputc_r+0x1e>
 8006bec:	6994      	ldr	r4, [r2, #24]
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	db01      	blt.n	8006bf6 <__sfputc_r+0x16>
 8006bf2:	290a      	cmp	r1, #10
 8006bf4:	d103      	bne.n	8006bfe <__sfputc_r+0x1e>
 8006bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bfa:	f000 bb73 	b.w	80072e4 <__swbuf_r>
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	1c58      	adds	r0, r3, #1
 8006c02:	6010      	str	r0, [r2, #0]
 8006c04:	7019      	strb	r1, [r3, #0]
 8006c06:	4608      	mov	r0, r1
 8006c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <__sfputs_r>:
 8006c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c10:	4606      	mov	r6, r0
 8006c12:	460f      	mov	r7, r1
 8006c14:	4614      	mov	r4, r2
 8006c16:	18d5      	adds	r5, r2, r3
 8006c18:	42ac      	cmp	r4, r5
 8006c1a:	d101      	bne.n	8006c20 <__sfputs_r+0x12>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e007      	b.n	8006c30 <__sfputs_r+0x22>
 8006c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c24:	463a      	mov	r2, r7
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ffda 	bl	8006be0 <__sfputc_r>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d1f3      	bne.n	8006c18 <__sfputs_r+0xa>
 8006c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c34 <_vfiprintf_r>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	460d      	mov	r5, r1
 8006c3a:	b09d      	sub	sp, #116	; 0x74
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	4698      	mov	r8, r3
 8006c40:	4606      	mov	r6, r0
 8006c42:	b118      	cbz	r0, 8006c4c <_vfiprintf_r+0x18>
 8006c44:	6a03      	ldr	r3, [r0, #32]
 8006c46:	b90b      	cbnz	r3, 8006c4c <_vfiprintf_r+0x18>
 8006c48:	f7ff fda6 	bl	8006798 <__sinit>
 8006c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c4e:	07d9      	lsls	r1, r3, #31
 8006c50:	d405      	bmi.n	8006c5e <_vfiprintf_r+0x2a>
 8006c52:	89ab      	ldrh	r3, [r5, #12]
 8006c54:	059a      	lsls	r2, r3, #22
 8006c56:	d402      	bmi.n	8006c5e <_vfiprintf_r+0x2a>
 8006c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c5a:	f7ff feb8 	bl	80069ce <__retarget_lock_acquire_recursive>
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	071b      	lsls	r3, r3, #28
 8006c62:	d501      	bpl.n	8006c68 <_vfiprintf_r+0x34>
 8006c64:	692b      	ldr	r3, [r5, #16]
 8006c66:	b99b      	cbnz	r3, 8006c90 <_vfiprintf_r+0x5c>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 fb78 	bl	8007360 <__swsetup_r>
 8006c70:	b170      	cbz	r0, 8006c90 <_vfiprintf_r+0x5c>
 8006c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c74:	07dc      	lsls	r4, r3, #31
 8006c76:	d504      	bpl.n	8006c82 <_vfiprintf_r+0x4e>
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	b01d      	add	sp, #116	; 0x74
 8006c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	0598      	lsls	r0, r3, #22
 8006c86:	d4f7      	bmi.n	8006c78 <_vfiprintf_r+0x44>
 8006c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c8a:	f7ff fea1 	bl	80069d0 <__retarget_lock_release_recursive>
 8006c8e:	e7f3      	b.n	8006c78 <_vfiprintf_r+0x44>
 8006c90:	2300      	movs	r3, #0
 8006c92:	9309      	str	r3, [sp, #36]	; 0x24
 8006c94:	2320      	movs	r3, #32
 8006c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9e:	2330      	movs	r3, #48	; 0x30
 8006ca0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e54 <_vfiprintf_r+0x220>
 8006ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca8:	f04f 0901 	mov.w	r9, #1
 8006cac:	4623      	mov	r3, r4
 8006cae:	469a      	mov	sl, r3
 8006cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb4:	b10a      	cbz	r2, 8006cba <_vfiprintf_r+0x86>
 8006cb6:	2a25      	cmp	r2, #37	; 0x25
 8006cb8:	d1f9      	bne.n	8006cae <_vfiprintf_r+0x7a>
 8006cba:	ebba 0b04 	subs.w	fp, sl, r4
 8006cbe:	d00b      	beq.n	8006cd8 <_vfiprintf_r+0xa4>
 8006cc0:	465b      	mov	r3, fp
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ffa1 	bl	8006c0e <__sfputs_r>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f000 80a9 	beq.w	8006e24 <_vfiprintf_r+0x1f0>
 8006cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd4:	445a      	add	r2, fp
 8006cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80a1 	beq.w	8006e24 <_vfiprintf_r+0x1f0>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cec:	f10a 0a01 	add.w	sl, sl, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8006cfa:	4654      	mov	r4, sl
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d02:	4854      	ldr	r0, [pc, #336]	; (8006e54 <_vfiprintf_r+0x220>)
 8006d04:	f7f9 fa94 	bl	8000230 <memchr>
 8006d08:	9a04      	ldr	r2, [sp, #16]
 8006d0a:	b9d8      	cbnz	r0, 8006d44 <_vfiprintf_r+0x110>
 8006d0c:	06d1      	lsls	r1, r2, #27
 8006d0e:	bf44      	itt	mi
 8006d10:	2320      	movmi	r3, #32
 8006d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d16:	0713      	lsls	r3, r2, #28
 8006d18:	bf44      	itt	mi
 8006d1a:	232b      	movmi	r3, #43	; 0x2b
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d20:	f89a 3000 	ldrb.w	r3, [sl]
 8006d24:	2b2a      	cmp	r3, #42	; 0x2a
 8006d26:	d015      	beq.n	8006d54 <_vfiprintf_r+0x120>
 8006d28:	9a07      	ldr	r2, [sp, #28]
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f04f 0c0a 	mov.w	ip, #10
 8006d32:	4621      	mov	r1, r4
 8006d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d38:	3b30      	subs	r3, #48	; 0x30
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d94d      	bls.n	8006dda <_vfiprintf_r+0x1a6>
 8006d3e:	b1b0      	cbz	r0, 8006d6e <_vfiprintf_r+0x13a>
 8006d40:	9207      	str	r2, [sp, #28]
 8006d42:	e014      	b.n	8006d6e <_vfiprintf_r+0x13a>
 8006d44:	eba0 0308 	sub.w	r3, r0, r8
 8006d48:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	46a2      	mov	sl, r4
 8006d52:	e7d2      	b.n	8006cfa <_vfiprintf_r+0xc6>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1d19      	adds	r1, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9103      	str	r1, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfbb      	ittet	lt
 8006d60:	425b      	neglt	r3, r3
 8006d62:	f042 0202 	orrlt.w	r2, r2, #2
 8006d66:	9307      	strge	r3, [sp, #28]
 8006d68:	9307      	strlt	r3, [sp, #28]
 8006d6a:	bfb8      	it	lt
 8006d6c:	9204      	strlt	r2, [sp, #16]
 8006d6e:	7823      	ldrb	r3, [r4, #0]
 8006d70:	2b2e      	cmp	r3, #46	; 0x2e
 8006d72:	d10c      	bne.n	8006d8e <_vfiprintf_r+0x15a>
 8006d74:	7863      	ldrb	r3, [r4, #1]
 8006d76:	2b2a      	cmp	r3, #42	; 0x2a
 8006d78:	d134      	bne.n	8006de4 <_vfiprintf_r+0x1b0>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	1d1a      	adds	r2, r3, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9203      	str	r2, [sp, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfb8      	it	lt
 8006d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8a:	3402      	adds	r4, #2
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e64 <_vfiprintf_r+0x230>
 8006d92:	7821      	ldrb	r1, [r4, #0]
 8006d94:	2203      	movs	r2, #3
 8006d96:	4650      	mov	r0, sl
 8006d98:	f7f9 fa4a 	bl	8000230 <memchr>
 8006d9c:	b138      	cbz	r0, 8006dae <_vfiprintf_r+0x17a>
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	eba0 000a 	sub.w	r0, r0, sl
 8006da4:	2240      	movs	r2, #64	; 0x40
 8006da6:	4082      	lsls	r2, r0
 8006da8:	4313      	orrs	r3, r2
 8006daa:	3401      	adds	r4, #1
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db2:	4829      	ldr	r0, [pc, #164]	; (8006e58 <_vfiprintf_r+0x224>)
 8006db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db8:	2206      	movs	r2, #6
 8006dba:	f7f9 fa39 	bl	8000230 <memchr>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d03f      	beq.n	8006e42 <_vfiprintf_r+0x20e>
 8006dc2:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <_vfiprintf_r+0x228>)
 8006dc4:	bb1b      	cbnz	r3, 8006e0e <_vfiprintf_r+0x1da>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	3307      	adds	r3, #7
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	443b      	add	r3, r7
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	e768      	b.n	8006cac <_vfiprintf_r+0x78>
 8006dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dde:	460c      	mov	r4, r1
 8006de0:	2001      	movs	r0, #1
 8006de2:	e7a6      	b.n	8006d32 <_vfiprintf_r+0xfe>
 8006de4:	2300      	movs	r3, #0
 8006de6:	3401      	adds	r4, #1
 8006de8:	9305      	str	r3, [sp, #20]
 8006dea:	4619      	mov	r1, r3
 8006dec:	f04f 0c0a 	mov.w	ip, #10
 8006df0:	4620      	mov	r0, r4
 8006df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df6:	3a30      	subs	r2, #48	; 0x30
 8006df8:	2a09      	cmp	r2, #9
 8006dfa:	d903      	bls.n	8006e04 <_vfiprintf_r+0x1d0>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0c6      	beq.n	8006d8e <_vfiprintf_r+0x15a>
 8006e00:	9105      	str	r1, [sp, #20]
 8006e02:	e7c4      	b.n	8006d8e <_vfiprintf_r+0x15a>
 8006e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e08:	4604      	mov	r4, r0
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e7f0      	b.n	8006df0 <_vfiprintf_r+0x1bc>
 8006e0e:	ab03      	add	r3, sp, #12
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	462a      	mov	r2, r5
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <_vfiprintf_r+0x22c>)
 8006e16:	a904      	add	r1, sp, #16
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f3af 8000 	nop.w
 8006e1e:	4607      	mov	r7, r0
 8006e20:	1c78      	adds	r0, r7, #1
 8006e22:	d1d6      	bne.n	8006dd2 <_vfiprintf_r+0x19e>
 8006e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_vfiprintf_r+0x202>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	059a      	lsls	r2, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_vfiprintf_r+0x202>
 8006e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e32:	f7ff fdcd 	bl	80069d0 <__retarget_lock_release_recursive>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	065b      	lsls	r3, r3, #25
 8006e3a:	f53f af1d 	bmi.w	8006c78 <_vfiprintf_r+0x44>
 8006e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e40:	e71c      	b.n	8006c7c <_vfiprintf_r+0x48>
 8006e42:	ab03      	add	r3, sp, #12
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	462a      	mov	r2, r5
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <_vfiprintf_r+0x22c>)
 8006e4a:	a904      	add	r1, sp, #16
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f000 f879 	bl	8006f44 <_printf_i>
 8006e52:	e7e4      	b.n	8006e1e <_vfiprintf_r+0x1ea>
 8006e54:	08007895 	.word	0x08007895
 8006e58:	0800789f 	.word	0x0800789f
 8006e5c:	00000000 	.word	0x00000000
 8006e60:	08006c0f 	.word	0x08006c0f
 8006e64:	0800789b 	.word	0x0800789b

08006e68 <_printf_common>:
 8006e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	4699      	mov	r9, r3
 8006e70:	688a      	ldr	r2, [r1, #8]
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	bfb8      	it	lt
 8006e7c:	4613      	movlt	r3, r2
 8006e7e:	6033      	str	r3, [r6, #0]
 8006e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e84:	4607      	mov	r7, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	b10a      	cbz	r2, 8006e8e <_printf_common+0x26>
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	0699      	lsls	r1, r3, #26
 8006e92:	bf42      	ittt	mi
 8006e94:	6833      	ldrmi	r3, [r6, #0]
 8006e96:	3302      	addmi	r3, #2
 8006e98:	6033      	strmi	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	f015 0506 	ands.w	r5, r5, #6
 8006ea0:	d106      	bne.n	8006eb0 <_printf_common+0x48>
 8006ea2:	f104 0a19 	add.w	sl, r4, #25
 8006ea6:	68e3      	ldr	r3, [r4, #12]
 8006ea8:	6832      	ldr	r2, [r6, #0]
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	dc26      	bgt.n	8006efe <_printf_common+0x96>
 8006eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eb4:	1e13      	subs	r3, r2, #0
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	0692      	lsls	r2, r2, #26
 8006ebe:	d42b      	bmi.n	8006f18 <_printf_common+0xb0>
 8006ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	47c0      	blx	r8
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d01e      	beq.n	8006f0c <_printf_common+0xa4>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	6922      	ldr	r2, [r4, #16]
 8006ed2:	f003 0306 	and.w	r3, r3, #6
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	bf02      	ittt	eq
 8006eda:	68e5      	ldreq	r5, [r4, #12]
 8006edc:	6833      	ldreq	r3, [r6, #0]
 8006ede:	1aed      	subeq	r5, r5, r3
 8006ee0:	68a3      	ldr	r3, [r4, #8]
 8006ee2:	bf0c      	ite	eq
 8006ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee8:	2500      	movne	r5, #0
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bfc4      	itt	gt
 8006eee:	1a9b      	subgt	r3, r3, r2
 8006ef0:	18ed      	addgt	r5, r5, r3
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	341a      	adds	r4, #26
 8006ef6:	42b5      	cmp	r5, r6
 8006ef8:	d11a      	bne.n	8006f30 <_printf_common+0xc8>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e008      	b.n	8006f10 <_printf_common+0xa8>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4652      	mov	r2, sl
 8006f02:	4649      	mov	r1, r9
 8006f04:	4638      	mov	r0, r7
 8006f06:	47c0      	blx	r8
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d103      	bne.n	8006f14 <_printf_common+0xac>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	3501      	adds	r5, #1
 8006f16:	e7c6      	b.n	8006ea6 <_printf_common+0x3e>
 8006f18:	18e1      	adds	r1, r4, r3
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	2030      	movs	r0, #48	; 0x30
 8006f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f22:	4422      	add	r2, r4
 8006f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	e7c7      	b.n	8006ec0 <_printf_common+0x58>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4622      	mov	r2, r4
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d0e6      	beq.n	8006f0c <_printf_common+0xa4>
 8006f3e:	3601      	adds	r6, #1
 8006f40:	e7d9      	b.n	8006ef6 <_printf_common+0x8e>
	...

08006f44 <_printf_i>:
 8006f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	7e0f      	ldrb	r7, [r1, #24]
 8006f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f4c:	2f78      	cmp	r7, #120	; 0x78
 8006f4e:	4691      	mov	r9, r2
 8006f50:	4680      	mov	r8, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	469a      	mov	sl, r3
 8006f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f5a:	d807      	bhi.n	8006f6c <_printf_i+0x28>
 8006f5c:	2f62      	cmp	r7, #98	; 0x62
 8006f5e:	d80a      	bhi.n	8006f76 <_printf_i+0x32>
 8006f60:	2f00      	cmp	r7, #0
 8006f62:	f000 80d4 	beq.w	800710e <_printf_i+0x1ca>
 8006f66:	2f58      	cmp	r7, #88	; 0x58
 8006f68:	f000 80c0 	beq.w	80070ec <_printf_i+0x1a8>
 8006f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f74:	e03a      	b.n	8006fec <_printf_i+0xa8>
 8006f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f7a:	2b15      	cmp	r3, #21
 8006f7c:	d8f6      	bhi.n	8006f6c <_printf_i+0x28>
 8006f7e:	a101      	add	r1, pc, #4	; (adr r1, 8006f84 <_printf_i+0x40>)
 8006f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006f6d 	.word	0x08006f6d
 8006f90:	08006f6d 	.word	0x08006f6d
 8006f94:	08006f6d 	.word	0x08006f6d
 8006f98:	08006f6d 	.word	0x08006f6d
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006f6d 	.word	0x08006f6d
 8006fa4:	08006f6d 	.word	0x08006f6d
 8006fa8:	08006f6d 	.word	0x08006f6d
 8006fac:	08006f6d 	.word	0x08006f6d
 8006fb0:	080070f5 	.word	0x080070f5
 8006fb4:	0800701d 	.word	0x0800701d
 8006fb8:	080070af 	.word	0x080070af
 8006fbc:	08006f6d 	.word	0x08006f6d
 8006fc0:	08006f6d 	.word	0x08006f6d
 8006fc4:	08007117 	.word	0x08007117
 8006fc8:	08006f6d 	.word	0x08006f6d
 8006fcc:	0800701d 	.word	0x0800701d
 8006fd0:	08006f6d 	.word	0x08006f6d
 8006fd4:	08006f6d 	.word	0x08006f6d
 8006fd8:	080070b7 	.word	0x080070b7
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	602a      	str	r2, [r5, #0]
 8006fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fec:	2301      	movs	r3, #1
 8006fee:	e09f      	b.n	8007130 <_printf_i+0x1ec>
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	682b      	ldr	r3, [r5, #0]
 8006ff4:	0607      	lsls	r7, r0, #24
 8006ff6:	f103 0104 	add.w	r1, r3, #4
 8006ffa:	6029      	str	r1, [r5, #0]
 8006ffc:	d501      	bpl.n	8007002 <_printf_i+0xbe>
 8006ffe:	681e      	ldr	r6, [r3, #0]
 8007000:	e003      	b.n	800700a <_printf_i+0xc6>
 8007002:	0646      	lsls	r6, r0, #25
 8007004:	d5fb      	bpl.n	8006ffe <_printf_i+0xba>
 8007006:	f9b3 6000 	ldrsh.w	r6, [r3]
 800700a:	2e00      	cmp	r6, #0
 800700c:	da03      	bge.n	8007016 <_printf_i+0xd2>
 800700e:	232d      	movs	r3, #45	; 0x2d
 8007010:	4276      	negs	r6, r6
 8007012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007016:	485a      	ldr	r0, [pc, #360]	; (8007180 <_printf_i+0x23c>)
 8007018:	230a      	movs	r3, #10
 800701a:	e012      	b.n	8007042 <_printf_i+0xfe>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	6820      	ldr	r0, [r4, #0]
 8007020:	1d19      	adds	r1, r3, #4
 8007022:	6029      	str	r1, [r5, #0]
 8007024:	0605      	lsls	r5, r0, #24
 8007026:	d501      	bpl.n	800702c <_printf_i+0xe8>
 8007028:	681e      	ldr	r6, [r3, #0]
 800702a:	e002      	b.n	8007032 <_printf_i+0xee>
 800702c:	0641      	lsls	r1, r0, #25
 800702e:	d5fb      	bpl.n	8007028 <_printf_i+0xe4>
 8007030:	881e      	ldrh	r6, [r3, #0]
 8007032:	4853      	ldr	r0, [pc, #332]	; (8007180 <_printf_i+0x23c>)
 8007034:	2f6f      	cmp	r7, #111	; 0x6f
 8007036:	bf0c      	ite	eq
 8007038:	2308      	moveq	r3, #8
 800703a:	230a      	movne	r3, #10
 800703c:	2100      	movs	r1, #0
 800703e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007042:	6865      	ldr	r5, [r4, #4]
 8007044:	60a5      	str	r5, [r4, #8]
 8007046:	2d00      	cmp	r5, #0
 8007048:	bfa2      	ittt	ge
 800704a:	6821      	ldrge	r1, [r4, #0]
 800704c:	f021 0104 	bicge.w	r1, r1, #4
 8007050:	6021      	strge	r1, [r4, #0]
 8007052:	b90e      	cbnz	r6, 8007058 <_printf_i+0x114>
 8007054:	2d00      	cmp	r5, #0
 8007056:	d04b      	beq.n	80070f0 <_printf_i+0x1ac>
 8007058:	4615      	mov	r5, r2
 800705a:	fbb6 f1f3 	udiv	r1, r6, r3
 800705e:	fb03 6711 	mls	r7, r3, r1, r6
 8007062:	5dc7      	ldrb	r7, [r0, r7]
 8007064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007068:	4637      	mov	r7, r6
 800706a:	42bb      	cmp	r3, r7
 800706c:	460e      	mov	r6, r1
 800706e:	d9f4      	bls.n	800705a <_printf_i+0x116>
 8007070:	2b08      	cmp	r3, #8
 8007072:	d10b      	bne.n	800708c <_printf_i+0x148>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	07de      	lsls	r6, r3, #31
 8007078:	d508      	bpl.n	800708c <_printf_i+0x148>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6861      	ldr	r1, [r4, #4]
 800707e:	4299      	cmp	r1, r3
 8007080:	bfde      	ittt	le
 8007082:	2330      	movle	r3, #48	; 0x30
 8007084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800708c:	1b52      	subs	r2, r2, r5
 800708e:	6122      	str	r2, [r4, #16]
 8007090:	f8cd a000 	str.w	sl, [sp]
 8007094:	464b      	mov	r3, r9
 8007096:	aa03      	add	r2, sp, #12
 8007098:	4621      	mov	r1, r4
 800709a:	4640      	mov	r0, r8
 800709c:	f7ff fee4 	bl	8006e68 <_printf_common>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d14a      	bne.n	800713a <_printf_i+0x1f6>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	b004      	add	sp, #16
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f043 0320 	orr.w	r3, r3, #32
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	4833      	ldr	r0, [pc, #204]	; (8007184 <_printf_i+0x240>)
 80070b8:	2778      	movs	r7, #120	; 0x78
 80070ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	6829      	ldr	r1, [r5, #0]
 80070c2:	061f      	lsls	r7, r3, #24
 80070c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070c8:	d402      	bmi.n	80070d0 <_printf_i+0x18c>
 80070ca:	065f      	lsls	r7, r3, #25
 80070cc:	bf48      	it	mi
 80070ce:	b2b6      	uxthmi	r6, r6
 80070d0:	07df      	lsls	r7, r3, #31
 80070d2:	bf48      	it	mi
 80070d4:	f043 0320 	orrmi.w	r3, r3, #32
 80070d8:	6029      	str	r1, [r5, #0]
 80070da:	bf48      	it	mi
 80070dc:	6023      	strmi	r3, [r4, #0]
 80070de:	b91e      	cbnz	r6, 80070e8 <_printf_i+0x1a4>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	f023 0320 	bic.w	r3, r3, #32
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	2310      	movs	r3, #16
 80070ea:	e7a7      	b.n	800703c <_printf_i+0xf8>
 80070ec:	4824      	ldr	r0, [pc, #144]	; (8007180 <_printf_i+0x23c>)
 80070ee:	e7e4      	b.n	80070ba <_printf_i+0x176>
 80070f0:	4615      	mov	r5, r2
 80070f2:	e7bd      	b.n	8007070 <_printf_i+0x12c>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	6826      	ldr	r6, [r4, #0]
 80070f8:	6961      	ldr	r1, [r4, #20]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6028      	str	r0, [r5, #0]
 80070fe:	0635      	lsls	r5, r6, #24
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	d501      	bpl.n	8007108 <_printf_i+0x1c4>
 8007104:	6019      	str	r1, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0x1ca>
 8007108:	0670      	lsls	r0, r6, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0x1c0>
 800710c:	8019      	strh	r1, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	4615      	mov	r5, r2
 8007114:	e7bc      	b.n	8007090 <_printf_i+0x14c>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	602a      	str	r2, [r5, #0]
 800711c:	681d      	ldr	r5, [r3, #0]
 800711e:	6862      	ldr	r2, [r4, #4]
 8007120:	2100      	movs	r1, #0
 8007122:	4628      	mov	r0, r5
 8007124:	f7f9 f884 	bl	8000230 <memchr>
 8007128:	b108      	cbz	r0, 800712e <_printf_i+0x1ea>
 800712a:	1b40      	subs	r0, r0, r5
 800712c:	6060      	str	r0, [r4, #4]
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2300      	movs	r3, #0
 8007134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007138:	e7aa      	b.n	8007090 <_printf_i+0x14c>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	462a      	mov	r2, r5
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	47d0      	blx	sl
 8007144:	3001      	adds	r0, #1
 8007146:	d0ad      	beq.n	80070a4 <_printf_i+0x160>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	079b      	lsls	r3, r3, #30
 800714c:	d413      	bmi.n	8007176 <_printf_i+0x232>
 800714e:	68e0      	ldr	r0, [r4, #12]
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	4298      	cmp	r0, r3
 8007154:	bfb8      	it	lt
 8007156:	4618      	movlt	r0, r3
 8007158:	e7a6      	b.n	80070a8 <_printf_i+0x164>
 800715a:	2301      	movs	r3, #1
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d09d      	beq.n	80070a4 <_printf_i+0x160>
 8007168:	3501      	adds	r5, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	9903      	ldr	r1, [sp, #12]
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	42ab      	cmp	r3, r5
 8007172:	dcf2      	bgt.n	800715a <_printf_i+0x216>
 8007174:	e7eb      	b.n	800714e <_printf_i+0x20a>
 8007176:	2500      	movs	r5, #0
 8007178:	f104 0619 	add.w	r6, r4, #25
 800717c:	e7f5      	b.n	800716a <_printf_i+0x226>
 800717e:	bf00      	nop
 8007180:	080078a6 	.word	0x080078a6
 8007184:	080078b7 	.word	0x080078b7

08007188 <__sflush_r>:
 8007188:	898a      	ldrh	r2, [r1, #12]
 800718a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718e:	4605      	mov	r5, r0
 8007190:	0710      	lsls	r0, r2, #28
 8007192:	460c      	mov	r4, r1
 8007194:	d458      	bmi.n	8007248 <__sflush_r+0xc0>
 8007196:	684b      	ldr	r3, [r1, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc05      	bgt.n	80071a8 <__sflush_r+0x20>
 800719c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dc02      	bgt.n	80071a8 <__sflush_r+0x20>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	d0f9      	beq.n	80071a2 <__sflush_r+0x1a>
 80071ae:	2300      	movs	r3, #0
 80071b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071b4:	682f      	ldr	r7, [r5, #0]
 80071b6:	6a21      	ldr	r1, [r4, #32]
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	d032      	beq.n	8007222 <__sflush_r+0x9a>
 80071bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	075a      	lsls	r2, r3, #29
 80071c2:	d505      	bpl.n	80071d0 <__sflush_r+0x48>
 80071c4:	6863      	ldr	r3, [r4, #4]
 80071c6:	1ac0      	subs	r0, r0, r3
 80071c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071ca:	b10b      	cbz	r3, 80071d0 <__sflush_r+0x48>
 80071cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ce:	1ac0      	subs	r0, r0, r3
 80071d0:	2300      	movs	r3, #0
 80071d2:	4602      	mov	r2, r0
 80071d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071d6:	6a21      	ldr	r1, [r4, #32]
 80071d8:	4628      	mov	r0, r5
 80071da:	47b0      	blx	r6
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	d106      	bne.n	80071f0 <__sflush_r+0x68>
 80071e2:	6829      	ldr	r1, [r5, #0]
 80071e4:	291d      	cmp	r1, #29
 80071e6:	d82b      	bhi.n	8007240 <__sflush_r+0xb8>
 80071e8:	4a29      	ldr	r2, [pc, #164]	; (8007290 <__sflush_r+0x108>)
 80071ea:	410a      	asrs	r2, r1
 80071ec:	07d6      	lsls	r6, r2, #31
 80071ee:	d427      	bmi.n	8007240 <__sflush_r+0xb8>
 80071f0:	2200      	movs	r2, #0
 80071f2:	6062      	str	r2, [r4, #4]
 80071f4:	04d9      	lsls	r1, r3, #19
 80071f6:	6922      	ldr	r2, [r4, #16]
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	d504      	bpl.n	8007206 <__sflush_r+0x7e>
 80071fc:	1c42      	adds	r2, r0, #1
 80071fe:	d101      	bne.n	8007204 <__sflush_r+0x7c>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b903      	cbnz	r3, 8007206 <__sflush_r+0x7e>
 8007204:	6560      	str	r0, [r4, #84]	; 0x54
 8007206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007208:	602f      	str	r7, [r5, #0]
 800720a:	2900      	cmp	r1, #0
 800720c:	d0c9      	beq.n	80071a2 <__sflush_r+0x1a>
 800720e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007212:	4299      	cmp	r1, r3
 8007214:	d002      	beq.n	800721c <__sflush_r+0x94>
 8007216:	4628      	mov	r0, r5
 8007218:	f7ff fbea 	bl	80069f0 <_free_r>
 800721c:	2000      	movs	r0, #0
 800721e:	6360      	str	r0, [r4, #52]	; 0x34
 8007220:	e7c0      	b.n	80071a4 <__sflush_r+0x1c>
 8007222:	2301      	movs	r3, #1
 8007224:	4628      	mov	r0, r5
 8007226:	47b0      	blx	r6
 8007228:	1c41      	adds	r1, r0, #1
 800722a:	d1c8      	bne.n	80071be <__sflush_r+0x36>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0c5      	beq.n	80071be <__sflush_r+0x36>
 8007232:	2b1d      	cmp	r3, #29
 8007234:	d001      	beq.n	800723a <__sflush_r+0xb2>
 8007236:	2b16      	cmp	r3, #22
 8007238:	d101      	bne.n	800723e <__sflush_r+0xb6>
 800723a:	602f      	str	r7, [r5, #0]
 800723c:	e7b1      	b.n	80071a2 <__sflush_r+0x1a>
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	e7ad      	b.n	80071a4 <__sflush_r+0x1c>
 8007248:	690f      	ldr	r7, [r1, #16]
 800724a:	2f00      	cmp	r7, #0
 800724c:	d0a9      	beq.n	80071a2 <__sflush_r+0x1a>
 800724e:	0793      	lsls	r3, r2, #30
 8007250:	680e      	ldr	r6, [r1, #0]
 8007252:	bf08      	it	eq
 8007254:	694b      	ldreq	r3, [r1, #20]
 8007256:	600f      	str	r7, [r1, #0]
 8007258:	bf18      	it	ne
 800725a:	2300      	movne	r3, #0
 800725c:	eba6 0807 	sub.w	r8, r6, r7
 8007260:	608b      	str	r3, [r1, #8]
 8007262:	f1b8 0f00 	cmp.w	r8, #0
 8007266:	dd9c      	ble.n	80071a2 <__sflush_r+0x1a>
 8007268:	6a21      	ldr	r1, [r4, #32]
 800726a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800726c:	4643      	mov	r3, r8
 800726e:	463a      	mov	r2, r7
 8007270:	4628      	mov	r0, r5
 8007272:	47b0      	blx	r6
 8007274:	2800      	cmp	r0, #0
 8007276:	dc06      	bgt.n	8007286 <__sflush_r+0xfe>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e78e      	b.n	80071a4 <__sflush_r+0x1c>
 8007286:	4407      	add	r7, r0
 8007288:	eba8 0800 	sub.w	r8, r8, r0
 800728c:	e7e9      	b.n	8007262 <__sflush_r+0xda>
 800728e:	bf00      	nop
 8007290:	dfbffffe 	.word	0xdfbffffe

08007294 <_fflush_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	690b      	ldr	r3, [r1, #16]
 8007298:	4605      	mov	r5, r0
 800729a:	460c      	mov	r4, r1
 800729c:	b913      	cbnz	r3, 80072a4 <_fflush_r+0x10>
 800729e:	2500      	movs	r5, #0
 80072a0:	4628      	mov	r0, r5
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	b118      	cbz	r0, 80072ae <_fflush_r+0x1a>
 80072a6:	6a03      	ldr	r3, [r0, #32]
 80072a8:	b90b      	cbnz	r3, 80072ae <_fflush_r+0x1a>
 80072aa:	f7ff fa75 	bl	8006798 <__sinit>
 80072ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f3      	beq.n	800729e <_fflush_r+0xa>
 80072b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072b8:	07d0      	lsls	r0, r2, #31
 80072ba:	d404      	bmi.n	80072c6 <_fflush_r+0x32>
 80072bc:	0599      	lsls	r1, r3, #22
 80072be:	d402      	bmi.n	80072c6 <_fflush_r+0x32>
 80072c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072c2:	f7ff fb84 	bl	80069ce <__retarget_lock_acquire_recursive>
 80072c6:	4628      	mov	r0, r5
 80072c8:	4621      	mov	r1, r4
 80072ca:	f7ff ff5d 	bl	8007188 <__sflush_r>
 80072ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072d0:	07da      	lsls	r2, r3, #31
 80072d2:	4605      	mov	r5, r0
 80072d4:	d4e4      	bmi.n	80072a0 <_fflush_r+0xc>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	059b      	lsls	r3, r3, #22
 80072da:	d4e1      	bmi.n	80072a0 <_fflush_r+0xc>
 80072dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072de:	f7ff fb77 	bl	80069d0 <__retarget_lock_release_recursive>
 80072e2:	e7dd      	b.n	80072a0 <_fflush_r+0xc>

080072e4 <__swbuf_r>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	460e      	mov	r6, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	4605      	mov	r5, r0
 80072ec:	b118      	cbz	r0, 80072f6 <__swbuf_r+0x12>
 80072ee:	6a03      	ldr	r3, [r0, #32]
 80072f0:	b90b      	cbnz	r3, 80072f6 <__swbuf_r+0x12>
 80072f2:	f7ff fa51 	bl	8006798 <__sinit>
 80072f6:	69a3      	ldr	r3, [r4, #24]
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	071a      	lsls	r2, r3, #28
 80072fe:	d525      	bpl.n	800734c <__swbuf_r+0x68>
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	b31b      	cbz	r3, 800734c <__swbuf_r+0x68>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	6922      	ldr	r2, [r4, #16]
 8007308:	1a98      	subs	r0, r3, r2
 800730a:	6963      	ldr	r3, [r4, #20]
 800730c:	b2f6      	uxtb	r6, r6
 800730e:	4283      	cmp	r3, r0
 8007310:	4637      	mov	r7, r6
 8007312:	dc04      	bgt.n	800731e <__swbuf_r+0x3a>
 8007314:	4621      	mov	r1, r4
 8007316:	4628      	mov	r0, r5
 8007318:	f7ff ffbc 	bl	8007294 <_fflush_r>
 800731c:	b9e0      	cbnz	r0, 8007358 <__swbuf_r+0x74>
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	3b01      	subs	r3, #1
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	6022      	str	r2, [r4, #0]
 800732a:	701e      	strb	r6, [r3, #0]
 800732c:	6962      	ldr	r2, [r4, #20]
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	429a      	cmp	r2, r3
 8007332:	d004      	beq.n	800733e <__swbuf_r+0x5a>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	07db      	lsls	r3, r3, #31
 8007338:	d506      	bpl.n	8007348 <__swbuf_r+0x64>
 800733a:	2e0a      	cmp	r6, #10
 800733c:	d104      	bne.n	8007348 <__swbuf_r+0x64>
 800733e:	4621      	mov	r1, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f7ff ffa7 	bl	8007294 <_fflush_r>
 8007346:	b938      	cbnz	r0, 8007358 <__swbuf_r+0x74>
 8007348:	4638      	mov	r0, r7
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f806 	bl	8007360 <__swsetup_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	d0d5      	beq.n	8007304 <__swbuf_r+0x20>
 8007358:	f04f 37ff 	mov.w	r7, #4294967295
 800735c:	e7f4      	b.n	8007348 <__swbuf_r+0x64>
	...

08007360 <__swsetup_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4b2a      	ldr	r3, [pc, #168]	; (800740c <__swsetup_r+0xac>)
 8007364:	4605      	mov	r5, r0
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	460c      	mov	r4, r1
 800736a:	b118      	cbz	r0, 8007374 <__swsetup_r+0x14>
 800736c:	6a03      	ldr	r3, [r0, #32]
 800736e:	b90b      	cbnz	r3, 8007374 <__swsetup_r+0x14>
 8007370:	f7ff fa12 	bl	8006798 <__sinit>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800737a:	0718      	lsls	r0, r3, #28
 800737c:	d422      	bmi.n	80073c4 <__swsetup_r+0x64>
 800737e:	06d9      	lsls	r1, r3, #27
 8007380:	d407      	bmi.n	8007392 <__swsetup_r+0x32>
 8007382:	2309      	movs	r3, #9
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	e034      	b.n	80073fc <__swsetup_r+0x9c>
 8007392:	0758      	lsls	r0, r3, #29
 8007394:	d512      	bpl.n	80073bc <__swsetup_r+0x5c>
 8007396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007398:	b141      	cbz	r1, 80073ac <__swsetup_r+0x4c>
 800739a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739e:	4299      	cmp	r1, r3
 80073a0:	d002      	beq.n	80073a8 <__swsetup_r+0x48>
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff fb24 	bl	80069f0 <_free_r>
 80073a8:	2300      	movs	r3, #0
 80073aa:	6363      	str	r3, [r4, #52]	; 0x34
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	2300      	movs	r3, #0
 80073b6:	6063      	str	r3, [r4, #4]
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f043 0308 	orr.w	r3, r3, #8
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	b94b      	cbnz	r3, 80073dc <__swsetup_r+0x7c>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d2:	d003      	beq.n	80073dc <__swsetup_r+0x7c>
 80073d4:	4621      	mov	r1, r4
 80073d6:	4628      	mov	r0, r5
 80073d8:	f000 f850 	bl	800747c <__smakebuf_r>
 80073dc:	89a0      	ldrh	r0, [r4, #12]
 80073de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e2:	f010 0301 	ands.w	r3, r0, #1
 80073e6:	d00a      	beq.n	80073fe <__swsetup_r+0x9e>
 80073e8:	2300      	movs	r3, #0
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	6963      	ldr	r3, [r4, #20]
 80073ee:	425b      	negs	r3, r3
 80073f0:	61a3      	str	r3, [r4, #24]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	b943      	cbnz	r3, 8007408 <__swsetup_r+0xa8>
 80073f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073fa:	d1c4      	bne.n	8007386 <__swsetup_r+0x26>
 80073fc:	bd38      	pop	{r3, r4, r5, pc}
 80073fe:	0781      	lsls	r1, r0, #30
 8007400:	bf58      	it	pl
 8007402:	6963      	ldrpl	r3, [r4, #20]
 8007404:	60a3      	str	r3, [r4, #8]
 8007406:	e7f4      	b.n	80073f2 <__swsetup_r+0x92>
 8007408:	2000      	movs	r0, #0
 800740a:	e7f7      	b.n	80073fc <__swsetup_r+0x9c>
 800740c:	20000064 	.word	0x20000064

08007410 <_sbrk_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d06      	ldr	r5, [pc, #24]	; (800742c <_sbrk_r+0x1c>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fa fa7a 	bl	8001914 <_sbrk>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_sbrk_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_sbrk_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	200009d4 	.word	0x200009d4

08007430 <__swhatbuf_r>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007438:	2900      	cmp	r1, #0
 800743a:	b096      	sub	sp, #88	; 0x58
 800743c:	4615      	mov	r5, r2
 800743e:	461e      	mov	r6, r3
 8007440:	da0d      	bge.n	800745e <__swhatbuf_r+0x2e>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007448:	f04f 0100 	mov.w	r1, #0
 800744c:	bf0c      	ite	eq
 800744e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007452:	2340      	movne	r3, #64	; 0x40
 8007454:	2000      	movs	r0, #0
 8007456:	6031      	str	r1, [r6, #0]
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	b016      	add	sp, #88	; 0x58
 800745c:	bd70      	pop	{r4, r5, r6, pc}
 800745e:	466a      	mov	r2, sp
 8007460:	f000 f848 	bl	80074f4 <_fstat_r>
 8007464:	2800      	cmp	r0, #0
 8007466:	dbec      	blt.n	8007442 <__swhatbuf_r+0x12>
 8007468:	9901      	ldr	r1, [sp, #4]
 800746a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800746e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007472:	4259      	negs	r1, r3
 8007474:	4159      	adcs	r1, r3
 8007476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800747a:	e7eb      	b.n	8007454 <__swhatbuf_r+0x24>

0800747c <__smakebuf_r>:
 800747c:	898b      	ldrh	r3, [r1, #12]
 800747e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007480:	079d      	lsls	r5, r3, #30
 8007482:	4606      	mov	r6, r0
 8007484:	460c      	mov	r4, r1
 8007486:	d507      	bpl.n	8007498 <__smakebuf_r+0x1c>
 8007488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	2301      	movs	r3, #1
 8007492:	6163      	str	r3, [r4, #20]
 8007494:	b002      	add	sp, #8
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	ab01      	add	r3, sp, #4
 800749a:	466a      	mov	r2, sp
 800749c:	f7ff ffc8 	bl	8007430 <__swhatbuf_r>
 80074a0:	9900      	ldr	r1, [sp, #0]
 80074a2:	4605      	mov	r5, r0
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fb0f 	bl	8006ac8 <_malloc_r>
 80074aa:	b948      	cbnz	r0, 80074c0 <__smakebuf_r+0x44>
 80074ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b0:	059a      	lsls	r2, r3, #22
 80074b2:	d4ef      	bmi.n	8007494 <__smakebuf_r+0x18>
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	f043 0302 	orr.w	r3, r3, #2
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	e7e3      	b.n	8007488 <__smakebuf_r+0xc>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	6020      	str	r0, [r4, #0]
 80074c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	9b00      	ldr	r3, [sp, #0]
 80074cc:	6163      	str	r3, [r4, #20]
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	6120      	str	r0, [r4, #16]
 80074d2:	b15b      	cbz	r3, 80074ec <__smakebuf_r+0x70>
 80074d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 f81d 	bl	8007518 <_isatty_r>
 80074de:	b128      	cbz	r0, 80074ec <__smakebuf_r+0x70>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	f043 0301 	orr.w	r3, r3, #1
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	431d      	orrs	r5, r3
 80074f0:	81a5      	strh	r5, [r4, #12]
 80074f2:	e7cf      	b.n	8007494 <__smakebuf_r+0x18>

080074f4 <_fstat_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	; (8007514 <_fstat_r+0x20>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	f7fa f9de 	bl	80018c2 <_fstat>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d102      	bne.n	8007510 <_fstat_r+0x1c>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	b103      	cbz	r3, 8007510 <_fstat_r+0x1c>
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	bd38      	pop	{r3, r4, r5, pc}
 8007512:	bf00      	nop
 8007514:	200009d4 	.word	0x200009d4

08007518 <_isatty_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d06      	ldr	r5, [pc, #24]	; (8007534 <_isatty_r+0x1c>)
 800751c:	2300      	movs	r3, #0
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	f7fa f9dd 	bl	80018e2 <_isatty>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_isatty_r+0x1a>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_isatty_r+0x1a>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	200009d4 	.word	0x200009d4

08007538 <_init>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr

08007544 <_fini>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr
